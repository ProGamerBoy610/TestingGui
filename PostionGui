local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local lp = Players.LocalPlayer
local fakeDead = false

-- Function: Fake Death
local function fakeDeath()
    local char = lp.Character or lp.CharacterAdded:Wait()
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hum then return end

    fakeDead = true
    hum:ChangeState(Enum.HumanoidStateType.Physics)
    hum.PlatformStand = true

    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            part.Anchored = false
            part.Velocity = Vector3.new(math.random(-5,5), 15, math.random(-5,5))
        end
    end

    print("[ðŸ’€] Fake death activated.")
end

-- Function: Recover from Fake Death
local function recover()
    local char = lp.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hum then return end

    fakeDead = false
    hum.PlatformStand = false
    hum:ChangeState(Enum.HumanoidStateType.GettingUp)

    print("[âœ…] Recovered from fake death.")
end

-- Auto-recover when player moves (WASD or Space)
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if not fakeDead then return end

    local moveKeys = {
        Enum.KeyCode.W,
        Enum.KeyCode.A,
        Enum.KeyCode.S,
        Enum.KeyCode.D,
        Enum.KeyCode.Space
    }

    if table.find(moveKeys, input.KeyCode) then
        recover()
    end
end)

-- Stop all movement if player is truly dead (health = 0)
RunService.Heartbeat:Connect(function()
    local char = lp.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum and hum.Health <= 0 then
        hum.PlatformStand = true
    end
end)

-- Start fake death immediately
fakeDeath()
