local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local window = DrRayLibrary:Load("Fryzer Hub", "Default")
local tab = DrRayLibrary.newTab("Fruit Stealer", "ImageIdHere")

-- Variables to store current selections
local currentSelectedPlayer = nil
local currentSelectedItem = nil
local currentPlayerItems = {}

-- Function to get all player names
local function getPlayerNames()
    local names = {}
    local players = Players:GetPlayers()
    
    for _, p in ipairs(players) do
        if p ~= player then -- Exclude local player
            table.insert(names, p.Name)
        end
    end
    
    if #names == 0 then
        table.insert(names, "No other players")
    end
    
    return names
end

-- Function to get items from selected player's backpack
local function getPlayerItems(playerName)
    local items = {}
    local targetPlayer = Players:FindFirstChild(playerName)
    
    if targetPlayer and targetPlayer:FindFirstChild("Backpack") then
        local backpack = targetPlayer.Backpack
        
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") or item:IsA("HopperBin") then
                table.insert(items, item.Name)
            end
        end
    end
    
    return items
end

-- Function to get all possible items from all players (for dropdown population)
local function getAllPossibleItems()
    local allItems = {"Select player first"}
    local itemSet = {}
    
    local players = Players:GetPlayers()
    for _, p in ipairs(players) do
        if p ~= player and p:FindFirstChild("Backpack") then
            local backpack = p.Backpack
            for _, item in pairs(backpack:GetChildren()) do
                if (item:IsA("Tool") or item:IsA("HopperBin")) and not itemSet[item.Name] then
                    itemSet[item.Name] = true
                    table.insert(allItems, item.Name)
                end
            end
        end
    end
    
    return allItems
end

-- Function to steal/copy selected item
local function stealItem(playerName, itemName)
    local targetPlayer = Players:FindFirstChild(playerName)
    
    if not targetPlayer or not targetPlayer:FindFirstChild("Backpack") then
        print("Player or backpack not found!")
        return false
    end
    
    local backpack = targetPlayer.Backpack
    local targetItem = backpack:FindFirstChild(itemName)
    
    if targetItem and (targetItem:IsA("Tool") or targetItem:IsA("HopperBin")) then
        local success, err = pcall(function()
            local clonedItem = targetItem:Clone()
            clonedItem.Parent = player.Backpack
        end)
        
        if success then
            print("Successfully copied: " .. itemName .. " from " .. playerName)
            return true
        else
            print("Error copying item: " .. tostring(err))
            return false
        end
    else
        print("Item '" .. itemName .. "' not found in " .. playerName .. "'s backpack")
        return false
    end
end

-- Function to steal all items from selected player
local function stealAllItems(playerName)
    local targetPlayer = Players:FindFirstChild(playerName)
    
    if not targetPlayer or not targetPlayer:FindFirstChild("Backpack") then
        print("Player or backpack not found!")
        return 0
    end
    
    local backpack = targetPlayer.Backpack
    local stolenCount = 0
    
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") or item:IsA("HopperBin") then
            local success, err = pcall(function()
                local clonedItem = item:Clone()
                clonedItem.Parent = player.Backpack
                stolenCount = stolenCount + 1
            end)
            
            if not success then
                print("Error copying " .. item.Name .. ": " .. tostring(err))
            end
        end
    end
    
    print("Successfully copied " .. stolenCount .. " items from " .. playerName)
    return stolenCount
end

-- Function to display player's items
local function displayPlayerItems(playerName)
    local items = getPlayerItems(playerName)
    
    if #items == 0 then
        print(playerName .. " has no items in their backpack")
        return
    end
    
    print("=== " .. playerName .. "'s Backpack Items ===")
    for i, itemName in ipairs(items) do
        print(i .. ". " .. itemName)
    end
    print("Total items: " .. #items)
    print("=====================================")
end

-- Initialize data
local playerNames = getPlayerNames()
local allPossibleItems = getAllPossibleItems()

-- Create Player Selection Dropdown
tab.newDropdown("Select Player", "Choose a player to steal from", playerNames, function(selectedPlayer)
    if selectedPlayer == "No other players" then
        print("No other players available")
        return
    end
    
    currentSelectedPlayer = selectedPlayer
    print("Selected player: " .. selectedPlayer)
    
    -- Display their items
    displayPlayerItems(selectedPlayer)
    
    -- Get their current items for validation
    currentPlayerItems = getPlayerItems(selectedPlayer)
    
    print("Now select an item from the second dropdown")
    print("Available items for " .. selectedPlayer .. ":")
    for i, item in ipairs(currentPlayerItems) do
        print("- " .. item)
    end
end)

-- Create Item Selection Dropdown
tab.newDropdown("Select Item", "Choose an item to steal", allPossibleItems, function(selectedItem)
    if selectedItem == "Select player first" then
        print("Please select a player first!")
        return
    end
    
    currentSelectedItem = selectedItem
    print("Selected item: " .. selectedItem)
    
    -- Check if the selected player actually has this item
    if currentSelectedPlayer and currentPlayerItems then
        local hasItem = false
        for _, item in ipairs(currentPlayerItems) do
            if item == selectedItem then
                hasItem = true
                break
            end
        end
        
        if hasItem then
            print("✓ " .. currentSelectedPlayer .. " has " .. selectedItem)
        else
            print("⚠ " .. currentSelectedPlayer .. " does NOT have " .. selectedItem)
            print("This item might be from another player's backpack")
        end
    end
end)

-- Create buttons
tab.newButton("Show Player Items", "Refresh and show selected player's backpack", function()
    if not currentSelectedPlayer then
        print("Please select a player first!")
        return
    end
    
    currentPlayerItems = getPlayerItems(currentSelectedPlayer)
    displayPlayerItems(currentSelectedPlayer)
end)

tab.newButton("Steal Selected Item", "Copy the selected item to your backpack", function()
    if not currentSelectedPlayer then
        print("Please select a player first!")
        return
    end
    
    if not currentSelectedItem or currentSelectedItem == "Select player first" then
        print("Please select an item first!")
        return
    end
    
    local success = stealItem(currentSelectedPlayer, currentSelectedItem)
    if success then
        print("✓ Successfully stole: " .. currentSelectedItem)
    else
        print("✗ Failed to steal: " .. currentSelectedItem)
    end
end)

tab.newButton("Steal All Items", "Copy all items from selected player", function()
    if not currentSelectedPlayer then
        print("Please select a player first!")
        return
    end
    
    local count = stealAllItems(currentSelectedPlayer)
    print("Stole " .. count .. " items from " .. currentSelectedPlayer)
end)

tab.newButton("Refresh Dropdowns", "Update player and item lists", function()
    print("=== REFRESHING ===")
    
    -- Get updated data
    local newPlayerNames = getPlayerNames()
    local newItemsList = getAllPossibleItems()
    
    print("Updated Players:")
    for i, name in ipairs(newPlayerNames) do
        print(i .. ". " .. name)
    end
    
    print("Updated Available Items:")
    for i, item in ipairs(newItemsList) do
        if item ~= "Select player first" then
            print("- " .. item)
        end
    end
    
    print("Note: You may need to recreate the GUI to see updated dropdown options")
    print("==================")
    
    -- Refresh current player's items if selected
    if currentSelectedPlayer then
        currentPlayerItems = getPlayerItems(currentSelectedPlayer)
        displayPlayerItems(currentSelectedPlayer)
    end
end)

tab.newButton("Recreate GUI", "Restart the GUI with fresh data", function()
    print("Recreating GUI with fresh data...")
    screenGui = player.PlayerGui:FindFirstChild("DrRay")
    if screenGui then
        screenGui:Destroy()
    end
    wait(0.5)
    
    -- This will restart the script (you might need to run it again manually)
    print("GUI destroyed. Please run the script again for updated dropdowns.")
end)

-- Auto-refresh events
Players.PlayerAdded:Connect(function(newPlayer)
    wait(1)
    print(newPlayer.Name .. " joined! Use 'Refresh Dropdowns' to update lists.")
end)

Players.PlayerRemoving:Connect(function(leavingPlayer)
    if currentSelectedPlayer == leavingPlayer.Name then
        currentSelectedPlayer = nil
        currentSelectedItem = nil
        currentPlayerItems = {}
        print("Your selected player left the game!")
    end
    print(leavingPlayer.Name .. " left! Use 'Refresh Dropdowns' to update lists.")
end)

-- Initialize window
window:Toggle()
window:Open()

print("=== Fruit Stealer with 2 Dropdowns ===")
print("1. Select a player from first dropdown")
print("2. Select an item from second dropdown")
print("3. Click 'Steal Selected Item' or 'Steal All Items'")
print("4. Use 'Refresh Dropdowns' to update lists")
print("5. Use 'Recreate GUI' if dropdowns don't update")
print("=======================================")
