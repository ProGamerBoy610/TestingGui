--Pet dupe with sell SCRIPT GAG
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

-- Gradient text function (used in popup)
local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / math.max(#text - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d, %d, %d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

-- Popup before loading
local Confirmed = false
WindUI:Popup({
    Title = "Confirmation",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "Fryzer Hub " .. gradient("FH", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")),
    Buttons = {
        {
            Title = "Cancel",
            Variant = "Secondary",
        },
        {
            Title = "Continue",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})
repeat task.wait() until Confirmed

-- Window creation (KeySystem removed)
local Window = WindUI:CreateWindow({
    Title = "Fryzer Hub",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "Grow a garden",
    Folder = "YourHub",
    Size = UDim2.fromOffset(580, 360),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    ScrollBarEnabled = true,

    User = {
        Enabled = true,
        Anonymous = false,
        Username = LocalPlayer.DisplayName,
        UserId = LocalPlayer.UserId,
        Callback = function()
            print("User icon clicked:", LocalPlayer.Name)
        end
    }
})

-- UI open button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    Draggable = true,
})

-- Main Tab
local MainTab = Window:Tab({
    Title = "Player",
    Icon = "user"
})

-- Teleport locations
local locations = {
    ["Event Area"] = Vector3.new(-119.69, 3.00, -14.97),
    ["Gear Shop"] = Vector3.new(-285.27, 3.00, -13.62),
    ["Pet Eggs Shop"] = Vector3.new(-287.34, 3.00, -0.91),
    ["Cosmetics Shop"] = Vector3.new(-286.11, 3.00, -24.29),
    ["Garden 1"] = Vector3.new(33.44, 3.00, 38.34),
    ["Garden 2"] = Vector3.new(-100.65, 3.00, 38.08),
    ["Garden 3"] = Vector3.new(-237.85, 3.00, 38.51),
    ["Garden 4"] = Vector3.new(34.44, 3.00, -65.85),
    ["Garden 5"] = Vector3.new(-98.96, 3.00, -65.37),
    ["Garden 6"] = Vector3.new(-235.72, 3.00, -70.17)
}

local selectedLocation = "Event Area"

-- Welcome Paragraph
MainTab:Paragraph({
    Title = "Welcome to Fryzer Hub!",
    Content = "Hello " .. LocalPlayer.DisplayName .. "! You're running WindUI successfully."
})

-- Dropdown to choose teleport location
MainTab:Dropdown({
    Title = "Select Location",
    Values = {"Event Area", "Gear Shop", "Pet Eggs Shop", "Cosmetics Shop", "Garden 1", "Garden 2", "Garden 3", "Garden 4", "Garden 5", "Garden 6"},
    Value = "Event Area",
    Multi = false,
    AllowNone = false,
    Callback = function(selected)
        selectedLocation = selected
    end
})

-- Teleport Button
MainTab:Button({
    Title = "Teleport",
    Desc = "Teleport to selected location",
    Callback = function()
        local pos = locations[selectedLocation]
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
            WindUI:Notify({
                Title = "Teleported!",
                Content = "Teleported to " .. selectedLocation,
                Duration = 1
            })
        else
            WindUI:Notify({
                Title = "Teleport Failed",
                Content = "TRY AGAIN",
                Duration = 5
            })
        end
    end
})

-- Walkspeed Slider
MainTab:Slider({
    Title = "Walkspeed",
    Value = {
        Min = 16,
        Max = 100,
        Default = 16
    },
    Callback = function(val)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = val
            print("Walkspeed set to:", val)
        end
    end
})

-- VISUAL Tab
local Tab = Window:Tab({
    Title = "Real Functions",
    Icon = "send"
})

-- Fixed sellInventory function
local function sellInventory()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Save the player's current position
    local originalPosition = humanoidRootPart.CFrame

    -- Target coordinates (adjusted to be closer to sell area)
    local targetPosition = Vector3.new(86.59001922607422, 2.999999761581421, 0.426799476146698)

    -- Teleport the player
    humanoidRootPart.CFrame = CFrame.new(targetPosition)
    
    -- Wait longer for the game to register the position
    wait(0.5)
    
    -- Try multiple times to fire the remote event
    for i = 1, 3 do
        pcall(function()
            game:GetService("ReplicatedStorage").GameEvents.Sell_Inventory:FireServer()
        end)
        wait(0.2)
    end

    -- Wait longer before teleporting back
    wait(2)
    
    -- Teleport back to original position
    humanoidRootPart.CFrame = originalPosition
end

-- Sell-all Button
Tab:Button({
    Title = "Sell all",
    Desc = "This will sell all items",
    Callback = function()
        sellInventory()
        WindUI:Notify({
            Title = "Sell all",
            Content = "Got the money?",
            Duration = 1
        })
    end
})

-- Fixed sellInventory function
local function sellInventory()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Save the player's current position
    local originalPosition = humanoidRootPart.CFrame

    -- Target coordinates (adjusted to be closer to sell area)
    local targetPosition = Vector3.new(86.59001922607422, 2.999999761581421, 0.426799476146698)

    -- Teleport the player
    humanoidRootPart.CFrame = CFrame.new(targetPosition)
    
    -- Wait longer for the game to register the position
    wait(0.5)
    
    -- Try multiple times to fire the remote event
    for i = 1, 3 do
        pcall(function()
            game:GetService("ReplicatedStorage").GameEvents.Sell_Item:FireServer()
        end)
        wait(0.2)
    end

    -- Wait longer before teleporting back
    wait(2)
    
    -- Teleport back to original position
    humanoidRootPart.CFrame = originalPosition
end

-- Sell-all Button
Tab:Button({
    Title = "Sell item",
    Desc = "This will sell items in your hand",
    Callback = function()
        sellInventory()
        WindUI:Notify({
            Title = "Sell item",
            Content = "Got the money?",
            Duration = 1
        })
    end
})

-- PET AND GEAR SHOP GUI VISIBILITY TOGGLE (FIXED)
local player = game:GetService("Players").LocalPlayer
local originalStates = {}

local function enableGUI()
    pcall(function()
        local playerGui = player:WaitForChild("PlayerGui")
        local teleportUI = playerGui:WaitForChild("Teleport_UI")
        local frame = teleportUI:WaitForChild("Frame")
        local gearFrame = frame:WaitForChild("Gear")
        local petsFrame = frame:WaitForChild("Pets")

        -- Store original states
        originalStates = {
            teleportUI = teleportUI.Enabled,  -- ScreenGui uses Enabled, not Visible
            frame = frame.Visible,
            gear = gearFrame.Visible,
            pets = petsFrame.Visible,
        }

        -- Enable all GUI elements
        teleportUI.Enabled = true  -- ScreenGui property
        frame.Visible = true
        gearFrame.Visible = true
        petsFrame.Visible = true
    end)
end

local function disableGUI()
    pcall(function()
        local playerGui = player:WaitForChild("PlayerGui")
        local teleportUI = playerGui:WaitForChild("Teleport_UI")
        local frame = teleportUI:WaitForChild("Frame")
        local gearFrame = frame:WaitForChild("Gear")
        local petsFrame = frame:WaitForChild("Pets")

        -- Restore original states
        teleportUI.Enabled = originalStates.teleportUI or false
        frame.Visible = originalStates.frame or false
        gearFrame.Visible = originalStates.gear or false
        petsFrame.Visible = originalStates.pets or false
    end)
end

Tab:Toggle({
    Title = "Enable GUI", 
    Value = false,
    Callback = function(state)
        if state then
            enableGUI()
            print("GUI enabled")
        else
            disableGUI()
            print("GUI disabled")
        end
    end
})


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local BuySeedStock = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock")

local seeds = {
    "Apple",
    "Bamboo",
    "Beanstalk",
    "Blueberry",
    "Burning Bud",
    "Cacao",
    "Cactus",
    "Carrot",
    "Coconut",
    "Corn",
    "Daffodil",
    "Dragon Fruit",
    "Elder Strawberry",
    "Ember Lily",
    "Giant Pinecone",
    "Grape",
    "Mango",
    "Mushroom",
    "Orange Tulip",
    "Pepper",
    "Pumpkin",
    "Strawberry",
    "Sugar Apple",
    "Tomato",
    "Watermelon"
}

-- Add "ALL" option to the seeds list
local dropdownOptions = {"ALL"}
for _, seed in ipairs(seeds) do
    table.insert(dropdownOptions, seed)
end

local selectedSeeds = {"ALL"}
local toggleEnabled = false
local buyingSeeds = false

local function buySelectedSeeds()
    if buyingSeeds then return end
    buyingSeeds = true
    
    for _, selectedSeed in ipairs(selectedSeeds) do
        if selectedSeed == "ALL" then
            -- Buy all seeds if "ALL" is selected
            for _, seed in ipairs(seeds) do
                BuySeedStock:FireServer(seed)
                task.wait(0.2)
            end
        else
            -- Buy individual selected seed
            BuySeedStock:FireServer(selectedSeed)
            task.wait(0.2)
        end
    end
    
    buyingSeeds = false
end

-- Dropdown (Multi)
Tab:Dropdown({
    Title = "Select Seeds to Buy",
    Values = dropdownOptions,
    Value = {"ALL"},
    Multi = true,
    AllowNone = true,
    Callback = function(values)
        selectedSeeds = values
    end
})

-- Toggle
Tab:Toggle({
    Title = "Auto Buy Seeds", 
    Value = false,
    Callback = function(state)
        toggleEnabled = state
        if state then
            spawn(function()
                while toggleEnabled do
                    buySelectedSeeds()
                    task.wait(1) -- Wait 1 second between buying cycles
                end
            end)
        end
    end
})

-- Beta Tab
local AutoTab = Window:Tab({
    Title = "Auto Farm",
    Icon = "repeat"
})

-- Timed Auto Farm Script with Toggle
-- 30 seconds farming, 15 seconds waiting cycle

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- Configuration
local FARM_ENABLED = false
local FARM_DURATION = 60 -- Farm for 30 seconds
local WAIT_DURATION = 4 -- Wait for 15 seconds
local TELEPORT_SPEED = 0.3

-- Variables
local playerFarm = nil
local currentFarmingConnection = nil

-- Function to teleport smoothly
local function teleportTo(targetPosition)
    local character = player.Character
    if not character then return false end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return false end
    
    local tweenInfo = TweenInfo.new(TELEPORT_SPEED, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetPosition})
    
    tween:Play()
    tween.Completed:Wait()
    return true
end

-- Function to click proximity prompt
local function clickProximityPrompt(prompt)
    if prompt and prompt:IsA("ProximityPrompt") then
        local success = pcall(function()
            fireproximityprompt(prompt)
        end)
        return success
    end
    return false
end

-- Function to find the local player's farm
local function findPlayerFarm()
    local workspace = game:GetService("Workspace")
    
    -- Check if Farm folder exists
    local farmFolder = workspace:FindFirstChild("Farm")
    if not farmFolder then
        return nil
    end
    
    -- Look through all farms to find the player's farm
    for _, farm in pairs(farmFolder:GetChildren()) do
        if farm.Name == "Farm" then
            local success, result = pcall(function()
                local important = farm:FindFirstChild("Important")
                if important then
                    local data = important:FindFirstChild("Data")
                    if data then
                        local owner = data:FindFirstChild("Owner")
                        if owner and owner.Value == player.Name then
                            return farm
                        end
                    end
                end
                return nil
            end)
            
            if success and result then
                return result
            end
        end
    end
    
    return nil
end

-- Function to get all plants in the player's farm
local function getPlantsInFarm(farm)
    if not farm then return {} end
    
    local plants = {}
    
    pcall(function()
        local important = farm:FindFirstChild("Important")
        if important then
            local plantsPhysical = important:FindFirstChild("Plants_Physical")
            if plantsPhysical then
                for _, plant in pairs(plantsPhysical:GetChildren()) do
                    if plant:IsA("Model") then
                        -- Find ProximityPrompt in the plant
                        for _, child in pairs(plant:GetDescendants()) do
                            if child:IsA("ProximityPrompt") then
                                table.insert(plants, {
                                    model = plant,
                                    prompt = child,
                                    name = plant.Name
                                })
                                break
                            end
                        end
                    end
                end
            end
        end
    end)
    
    return plants
end

-- Function to farm for 30 seconds
local function farmFor30Seconds()
    if not playerFarm then
        return
    end
    
    local farmingStartTime = tick()
    local plantsHarvested = 0
    
    while (tick() - farmingStartTime) < FARM_DURATION and FARM_ENABLED do
        -- Get current plants in farm
        local plants = getPlantsInFarm(playerFarm)
        
        if #plants == 0 then
            wait(2)
        else
            -- Harvest all available plants
            for _, plantData in pairs(plants) do
                if not FARM_ENABLED then break end
                
                -- Check if we still have time
                if (tick() - farmingStartTime) >= FARM_DURATION then
                    break
                end
                
                local plant = plantData.model
                local prompt = plantData.prompt
                
                -- Check if plant still exists
                if plant and plant.Parent and prompt and prompt.Parent then
                    -- Get plant position
                    local plantPosition = plant:GetModelCFrame()
                    local plantSize = plant:GetExtentsSize()
                    local plantHeight = plantSize.Y / 2 + 3
                    
                    -- Teleport to plant
                    if teleportTo(plantPosition + Vector3.new(0, plantHeight, 0)) then
                        wait(0.5)
                        
                        -- Try to click proximity prompt
                        if clickProximityPrompt(prompt) then
                            plantsHarvested = plantsHarvested + 1
                        end
                    end
                    
                    -- Small delay between plants
                    wait(0.3)
                end
            end
            
            -- After harvesting all visible plants, wait a bit before checking again
            wait(1)
        end
    end
end

-- Function to wait for 15 seconds and sell inventory
local function waitFor15SecondsAndSell()
    local waitStartTime = tick()
    
    -- Teleport to selling location (Steven's location)
    local sellLocation = CFrame.new(86.58584594726562, 2.999999761581421, 0.426784485578537)
    
    if teleportTo(sellLocation) then
        wait(1) -- Wait a moment at the location
        
        -- Fire the sell inventory remote
        pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
        end)
    end
    
    -- Continue waiting for the remaining time
    while (tick() - waitStartTime) < WAIT_DURATION and FARM_ENABLED do
        wait(3) -- Update every 3 seconds during wait
    end
end

-- Main farming loop
local function startTimedAutoFarm()
    -- Find player's farm first
    playerFarm = findPlayerFarm()
    
    if not playerFarm then
        return
    end
    
    local cycleCount = 0
    
    -- Main cycle loop
    while FARM_ENABLED do
        cycleCount = cycleCount + 1
        
        -- Check if character exists
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            player.CharacterAdded:Wait()
            wait(2)
        end
        
        -- Phase 1: Farm for 30 seconds
        pcall(function()
            farmFor30Seconds()
        end)
        
        if not FARM_ENABLED then break end
        
        -- Phase 2: Wait for 15 seconds and sell inventory
        pcall(function()
            waitFor15SecondsAndSell()
        end)
    end
end

-- Function to stop the auto farm
local function stopTimedAutoFarm()
    FARM_ENABLED = false
    
    if currentFarmingConnection then
        currentFarmingConnection:Disconnect()
        currentFarmingConnection = nil
    end
end

-- Toggle
AutoTab:Toggle({
    Title = "Auto Farm", 
    Value = false,
    Callback = function(state)
        if state then
            FARM_ENABLED = true
            spawn(function()
                startTimedAutoFarm()
            end)
        else
            stopTimedAutoFarm()
        end
    end
})

-- Global functions for control (optional)
_G.StopTimedAutoFarm = stopTimedAutoFarm
_G.StartTimedAutoFarm = function()
    FARM_ENABLED = true
    spawn(function()
        startTimedAutoFarm()
    end)
end

_G.GetPlayerFarm = function()
    return playerFarm
end

_G.FindPlayerFarmAgain = function()
    playerFarm = findPlayerFarm()
    return playerFarm
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local BuySeedStock = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock")

local seeds = {
    "Apple",
    "Bamboo",
    "Beanstalk",
    "Blueberry",
    "Burning Bud",
    "Cacao",
    "Cactus",
    "Carrot",
    "Coconut",
    "Corn",
    "Daffodil",
    "Dragon Fruit",
    "Elder Strawberry",
    "Ember Lily",
    "Giant Pinecone",
    "Grape",
    "Mango",
    "Mushroom",
    "Orange Tulip",
    "Pepper",
    "Pumpkin",
    "Strawberry",
    "Sugar Apple",
    "Tomato",
    "Watermelon"
}

-- Add "ALL" option to the seeds list
local dropdownOptions = {"ALL"}
for _, seed in ipairs(seeds) do
    table.insert(dropdownOptions, seed)
end

local selectedSeeds = {"ALL"}
local toggleEnabled = false
local buyingSeeds = false

local function buySelectedSeeds()
    if buyingSeeds then return end
    buyingSeeds = true
    
    for _, selectedSeed in ipairs(selectedSeeds) do
        if selectedSeed == "ALL" then
            -- Buy all seeds if "ALL" is selected
            for _, seed in ipairs(seeds) do
                BuySeedStock:FireServer(seed)
                task.wait(0.2)
            end
        else
            -- Buy individual selected seed
            BuySeedStock:FireServer(selectedSeed)
            task.wait(0.2)
        end
    end
    
    buyingSeeds = false
end

-- Dropdown (Multi)
AutoTab:Dropdown({
    Title = "Select Seeds to Buy",
    Values = dropdownOptions,
    Value = {"ALL"},
    Multi = true,
    AllowNone = true,
    Callback = function(values)
        selectedSeeds = values
    end
})

-- Toggle
AutoTab:Toggle({
    Title = "Auto Buy Seeds", 
    Value = false,
    Callback = function(state)
        toggleEnabled = state
        if state then
            spawn(function()
                while toggleEnabled do
                    buySelectedSeeds()
                    task.wait(1) -- Wait 1 second between buying cycles
                end
            end)
        end
    end
})



local ScriptTab = Window:Tab({
    Title = "WHAT NEW",
    Icon = "code"
})

ScriptTab:Button({
    Title = "Jandel Chat System",
    Desc = "Launch the script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/FryzerHub/Key-system-gui/refs/heads/main/Chat%20system%20GAG"))()
        WindUI:Notify({
            Title = "Script Loaded",
            Content = "script has been executed!",
            Duration = 3
        })
    end
})

ScriptTab:Button({
    Title = "Pet Dupers (Can't Gift)",
    Desc = "Launch the script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/FryzerHub/Key-system-gui/refs/heads/main/Pet%20dupe%20script%20wind%20ui%20lib"))()
        WindUI:Notify({
            Title = "Script Loaded",
            Content = "script has been executed!",
            Duration = 3
        })
    end
})

ScriptTab:Button({
    Title = "Item Stealer",
    Desc = "Launch the script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ProGamerBoy610/Button-gui/refs/heads/main/items%20stealer%20v2%20gag"))
        WindUI:Notify({
            Title = "Script Loaded",
            Content = "script has been executed!",
            Duration = 3
        })
    end
})

ScriptTab:Button({
    Title = "Admin Commander (SPAWN ALL THINGS)",
    Desc = "Launch the script",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/FryzerHub/Key-system-gui/refs/heads/main/Jandle%20admin%20commander%20GUi%20key%20system"))()
        WindUI:Notify({
            Title = "Script Loaded",
            Content = "script has been executed!",
            Duration = 3
        })
    end
})

Window:OnClose(function()
    print("Window closed.")
end)
