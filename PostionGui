local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/ProGamerBoy610/Script-Hub/refs/heads/main/maintop.lua"))()

local infoTab = Library:CreateTab("INFO")
local autoTab = Library:CreateTab("AUTO FARM")
local guiTab = Library:CreateTab("SHOPS")
local selsedTab = Library:CreateTab("BUY&SELL")

-- INFO Tab Components
Library:CreateLabel(infoTab, "GROW A GARDEN v2.77")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

Library:CreateTextLabel(infoTab, "Welcome, " .. LocalPlayer.Name)
Library:CreateTextLabel(infoTab, "Version - 2.77")
Library:CreateLabel(infoTab, "Join Discord For More Scripts")
Library:CreateButton(infoTab, "Copy Discord Link", function()
    local discordUrl = "https://discord.gg/rpE4Eet7"
    setclipboard(discordUrl)
    print("üìã Discord invite copied to clipboard!")
end)

-- Button Component
Library:CreateButton(infoTab, "Features Name", function() 
    print("‚úÖfeatures working!") 
end)

-- Toggle Component
Library:CreateToggle(infoTab, "Enable Toggle", true, function(value) 
    print("üì¢", value and "ON" or "OFF") 
end)

-- Slider Component
Library:CreateSlider(infoTab, "Slider", 50, 150, 100, function(value) 
    print("üìè UI Scale:", value .. "%") 
end)

-- Dropdown Component
Library:CreateDropdown(infoTab, "Theme", {"Dark", "Light", "Blue", "Red"}, "Dark", function(value) 
    print("üé® Theme selected:", value) 
end)

-- Auto Farm Toggle
Library:CreateToggle(infoTab, "Auto Farm", false, function(value)
    print("üå± Auto Farm:", value and "ENABLED" or "DISABLED")
end)

-- Farm Duration Slider
Library:CreateSlider(infoTab, "Farm Duration", 10, 120, 30, function(value)
    print("‚è±Ô∏è Farm Duration:", value .. " seconds")
end)

-- AUTO FARM

Library:CreateLabel(autoTab, "AUTO FARM")
Library:CreateTextLabel(autoTab, "It will find your garden and collect fruit and sell")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- Configuration (now controlled by UI)
local FARM_ENABLED = false -- Default to off, controlled by toggle
local FARM_DURATION = 30 -- Controlled by slider
local WAIT_DURATION = 5
local TELEPORT_SPEED = 0.3

-- Variables
local playerFarm = nil
local currentFarmingConnection = nil
local autoFarmRunning = false

print("üå± Auto Farm System Loaded...")

-- Add controls to your existing hub
-- Replace 'mainTab' with your actual tab variable name
Library:CreateToggle(autoTab, "Auto Farm", false, function(value)
    FARM_ENABLED = value
    if value then
        print("‚úÖ Auto Farm Enabled")
        if not autoFarmRunning then
            startTimedAutoFarm()
        end
    else
        print("‚ùå Auto Farm Disabled")
        stopTimedAutoFarm()
    end
end)

Library:CreateSlider(autoTab, "Farm Duration (seconds)", 10, 120, 30, function(value)
    FARM_DURATION = value
    print("‚è±Ô∏è Farm Duration set to:", value .. " seconds")
end)

-- Function to teleport smoothly
local function teleportTo(targetPosition)
    local character = player.Character
    if not character then return false end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return false end
    
    local tweenInfo = TweenInfo.new(TELEPORT_SPEED, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetPosition})
    
    tween:Play()
    tween.Completed:Wait()
    return true
end

-- Function to click proximity prompt
local function clickProximityPrompt(prompt)
    if prompt and prompt:IsA("ProximityPrompt") then
        local success = pcall(function()
            fireproximityprompt(prompt)
        end)
        return success
    end
    return false
end

-- Function to find the local player's farm
local function findPlayerFarm()
    local workspace = game:GetService("Workspace")
    
    print("üîç Searching for " .. player.Name .. "'s farm...")
    
    -- Check if Farm folder exists
    local farmFolder = workspace:FindFirstChild("Farm")
    if not farmFolder then
        warn("‚ùå Farm folder not found in workspace")
        return nil
    end
    
    -- Look through all farms to find the player's farm
    for _, farm in pairs(farmFolder:GetChildren()) do
        if farm.Name == "Farm" then
            local success, result = pcall(function()
                local important = farm:FindFirstChild("Important")
                if important then
                    local data = important:FindFirstChild("Data")
                    if data then
                        local owner = data:FindFirstChild("Owner")
                        if owner and owner.Value == player.Name then
                            return farm
                        end
                    end
                end
                return nil
            end)
            
            if success and result then
                print("‚úÖ Found " .. player.Name .. "'s farm!")
                return result
            end
        end
    end
    
    warn("‚ùå Could not find farm owned by: " .. player.Name)
    return nil
end

-- Function to get all plants in the player's farm
local function getPlantsInFarm(farm)
    if not farm then return {} end
    
    local plants = {}
    
    pcall(function()
        local important = farm:FindFirstChild("Important")
        if important then
            local plantsPhysical = important:FindFirstChild("Plants_Physical")
            if plantsPhysical then
                for _, plant in pairs(plantsPhysical:GetChildren()) do
                    if plant:IsA("Model") then
                        -- Find ProximityPrompt in the plant
                        for _, child in pairs(plant:GetDescendants()) do
                            if child:IsA("ProximityPrompt") then
                                table.insert(plants, {
                                    model = plant,
                                    prompt = child,
                                    name = plant.Name
                                })
                                break
                            end
                        end
                    end
                end
            end
        end
    end)
    
    return plants
end

-- Function to farm for specified duration
local function farmForDuration()
    if not playerFarm then
        print("‚ùå No farm found, skipping farming phase")
        return
    end
    
    print("üå± === FARMING PHASE (" .. FARM_DURATION .. " seconds) ===")
    local farmingStartTime = tick()
    local plantsHarvested = 0
    
    while (tick() - farmingStartTime) < FARM_DURATION and FARM_ENABLED do
        -- Get current plants in farm
        local plants = getPlantsInFarm(playerFarm)
        
        if #plants == 0 then
            print("üîç No plants found, waiting for plants to grow...")
            wait(2)
        else
            print("üåæ Found " .. #plants .. " plants to harvest")
            
            -- Harvest all available plants
            for _, plantData in pairs(plants) do
                if not FARM_ENABLED then break end
                
                -- Check if we still have time
                if (tick() - farmingStartTime) >= FARM_DURATION then
                    print("‚è∞ " .. FARM_DURATION .. " second farming time reached")
                    break
                end
                
                local plant = plantData.model
                local prompt = plantData.prompt
                
                -- Check if plant still exists
                if plant and plant.Parent and prompt and prompt.Parent then
                    -- Get plant position
                    local plantPosition = plant:GetModelCFrame()
                    local plantSize = plant:GetExtentsSize()
                    local plantHeight = plantSize.Y / 2 + 3
                    
                    print("üå± Harvesting " .. plantData.name .. " (" .. (plantsHarvested + 1) .. ")")
                    
                    -- Teleport to plant
                    if teleportTo(plantPosition + Vector3.new(0, plantHeight, 0)) then
                        wait(0.5)
                        
                        -- Try to click proximity prompt
                        if clickProximityPrompt(prompt) then
                            plantsHarvested = plantsHarvested + 1
                            print("‚úÖ Harvested " .. plantData.name)
                        else
                            print("‚ö†Ô∏è Failed to harvest " .. plantData.name)
                        end
                    end
                    
                    -- Small delay between plants
                    wait(0.3)
                end
            end
            
            -- After harvesting all visible plants, wait a bit before checking again
            wait(1)
        end
    end
    
    local farmingTime = tick() - farmingStartTime
    print("üìä Farming phase complete!")
    print("‚è±Ô∏è Farmed for: " .. math.floor(farmingTime) .. " seconds")
    print("üå± Plants harvested: " .. plantsHarvested)
end

-- Function to wait and sell inventory
local function waitAndSell()
    print("‚è≥ === WAITING PHASE (" .. WAIT_DURATION .. " seconds) + SELLING ===")
    local waitStartTime = tick()
    
    -- Teleport to selling location (Steven's location)
    local sellLocation = CFrame.new(86.58584594726562, 2.999999761581421, 0.426784485578537)
    print("üí∞ Teleporting to sell location...")
    
    if teleportTo(sellLocation) then
        wait(1) -- Wait a moment at the location
        
        -- Fire the sell inventory remote
        local success = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
            print("‚úÖ Sell_Inventory remote fired!")
        end)
        
        if not success then
            warn("‚ùå Failed to fire Sell_Inventory remote")
        end
    else
        warn("‚ùå Failed to teleport to sell location")
    end
    
    -- Continue waiting for the remaining time
    while (tick() - waitStartTime) < WAIT_DURATION and FARM_ENABLED do
        local remainingTime = WAIT_DURATION - (tick() - waitStartTime)
        if remainingTime > 0 then
            print("üí§ Waiting at sell location... " .. math.ceil(remainingTime) .. " seconds remaining")
            wait(3) -- Update every 3 seconds during wait
        end
    end
    
    print("‚úÖ Wait phase complete!")
end

-- Main farming loop
function startTimedAutoFarm()
    if autoFarmRunning then return end
    
    print("üöÄ Starting Timed Auto Farm System...")
    print("‚è±Ô∏è Cycle: " .. FARM_DURATION .. "s Farming ‚Üí " .. WAIT_DURATION .. "s Waiting ‚Üí Repeat")
    
    autoFarmRunning = true
    
    -- Find player's farm first
    playerFarm = findPlayerFarm()
    
    if not playerFarm then
        warn("‚ùå Cannot start auto farm - player farm not found")
        autoFarmRunning = false
        return
    end
    
    print("üè° Player farm located! Starting timed cycles...")
    
    local cycleCount = 0
    
    -- Main cycle loop
    spawn(function()
        while FARM_ENABLED and autoFarmRunning do
            cycleCount = cycleCount + 1
            print("üîÑ === CYCLE " .. cycleCount .. " START ===")
            
            -- Check if character exists
            if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                print("‚ö†Ô∏è Waiting for character to spawn...")
                player.CharacterAdded:Wait()
                wait(2)
            end
            
            -- Phase 1: Farm for specified duration
            local success = pcall(function()
                farmForDuration()
            end)
            
            if not success then
                warn("‚ö†Ô∏è Error during farming phase")
            end
            
            if not FARM_ENABLED or not autoFarmRunning then break end
            
            -- Phase 2: Wait and sell inventory
            success = pcall(function()
                waitAndSell()
            end)
            
            if not success then
                warn("‚ö†Ô∏è Error during waiting phase")
            end
            
            print("‚úÖ === CYCLE " .. cycleCount .. " COMPLETE ===")
            print("")
        end
        
        autoFarmRunning = false
        print("üõë Timed Auto Farm stopped!")
    end)
end

-- Function to stop the auto farm
function stopTimedAutoFarm()
    FARM_ENABLED = false
    autoFarmRunning = false
    
    if currentFarmingConnection then
        currentFarmingConnection:Disconnect()
        currentFarmingConnection = nil
    end
    
    print("üõë Timed Auto Farm stopped!")
end

-- Global functions for external control (optional)
_G.StopTimedAutoFarm = stopTimedAutoFarm
_G.StartTimedAutoFarm = startTimedAutoFarm

_G.GetPlayerFarm = function()
    return playerFarm
end

_G.FindPlayerFarmAgain = function()
    playerFarm = findPlayerFarm()
    return playerFarm
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- Variables for auto-pressing
local isRunning = false
local autoConnection = nil
local proximityPrompts = {}

-- Function to find all proximity prompts in the game
local function findProximityPrompts()
    proximityPrompts = {}
    
    -- Search in workspace
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("ProximityPrompt") then
            table.insert(proximityPrompts, obj)
        end
    end
    
    return #proximityPrompts
end

-- Function to get the closest proximity prompt to the player
local function getClosestProximityPrompt()
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local playerPosition = player.Character.HumanoidRootPart.Position
    local closestPrompt = nil
    local closestDistance = math.huge
    
    for _, prompt in pairs(proximityPrompts) do
        if prompt.Parent and prompt.Enabled then
            local promptPosition = prompt.Parent.Position
            local distance = (playerPosition - promptPosition).Magnitude
            
            -- Check if within range
            if distance <= prompt.MaxActivationDistance and distance < closestDistance then
                closestDistance = distance
                closestPrompt = prompt
            end
        end
    end
    
    return closestPrompt
end

-- Function to start auto-pressing
local function startAutoPressing()
    if isRunning then return end
    
    isRunning = true
    print("‚úÖ Auto Proximity Started")
    
    -- Find all proximity prompts
    local promptCount = findProximityPrompts()
    print("Found " .. promptCount .. " proximity prompts")
    
    -- Start the auto-pressing loop
    autoConnection = RunService.Heartbeat:Connect(function()
        -- Refresh prompts occasionally
        if math.random(1, 60) == 1 then -- Every ~1 second
            findProximityPrompts()
        end
        
        -- Find the closest prompt
        local closestPrompt = getClosestProximityPrompt()
        
        if closestPrompt then
            -- Trigger the proximity prompt
            pcall(function()
                fireproximityprompt(closestPrompt)
            end)
        end
    end)
end

-- Function to stop auto-pressing
local function stopAutoPressing()
    if not isRunning then return end
    
    isRunning = false
    print("‚ùå Auto Proximity Stopped")
    
    if autoConnection then
        autoConnection:Disconnect()
        autoConnection = nil
    end
end

-- Auto Proximity Toggle Control
Library:CreateToggle(autoTab, "Collect more", false, function(value)
    if value then
        startAutoPressing()
    else
        stopAutoPressing()
    end
end)

Library:CreateLabel(guiTab, "SHOWS THE SHOP ")

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Function to toggle GUI visibility
local function toggleGUI(guiName, enabled)
    local gui = playerGui:FindFirstChild(guiName)
    if gui then
        gui.Enabled = enabled
        print("üîß " .. guiName .. ":", enabled and "ENABLED" or "DISABLED")
    else
        warn("‚ùå GUI not found: " .. guiName)
    end
end

-- Event Shop Toggle
Library:CreateToggle(guiTab, "Event Shop", false, function(value)
    toggleGUI("EventShop_UI", value)
end)

-- Pet Shop Toggle  
Library:CreateToggle(guiTab, "Pet Shop", false, function(value)
    toggleGUI("PetShop_UI", value)
end)

-- Seed Shop Toggle
Library:CreateToggle(guiTab, "Seed Shop", false, function(value)
    toggleGUI("Seed_Shop", value)
end)

-- Gear Shop Toggle
Library:CreateToggle(guiTab, "Gear Shop", false, function(value)
    toggleGUI("Gear_Shop", value)
end)

-- Cosmetic Shop Toggle
Library:CreateToggle(guiTab, "Cosmetic Shop", false, function(value)
    toggleGUI("CosmeticShop_UI", value)
end)

Library:CreateLabel(selsedTab, "SEEDS")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local BuySeedStock = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock")

local seeds = {
    "Apple",
    "Bamboo",
    "Beanstalk",
    "Blueberry",
    "Burning Bud",
    "Cacao",
    "Cactus",
    "Carrot",
    "Coconut",
    "Corn",
    "Daffodil",
    "Dragon Fruit",
    "Elder Strawberry",
    "Ember Lily",
    "Giant Pinecone",
    "Grape",
    "Mango",
    "Mushroom",
    "Orange Tulip",
    "Pepper",
    "Pumpkin",
    "Strawberry",
    "Sugar Apple",
    "Tomato",
    "Watermelon"
}

-- Add "ALL" option to the seeds list
local dropdownOptions = {"ALL"}
for _, seed in ipairs(seeds) do
    table.insert(dropdownOptions, seed)
end

local selectedSeed = "ALL"
local toggleEnabled = false
local buyingSeeds = false

local function buySelectedSeeds()
    if buyingSeeds then return end
    buyingSeeds = true
    
    if selectedSeed == "ALL" then
        -- Buy all seeds if "ALL" is selected
        for _, seed in ipairs(seeds) do
            BuySeedStock:FireServer(seed)
            task.wait(0.1)
        end
    else
        -- Buy individual selected seed
        BuySeedStock:FireServer(selectedSeed)
        task.wait(0.1)
    end
    
    buyingSeeds = false
end

-- Seed Selection Dropdown
Library:CreateDropdown(selsedTab, "Select Seeds to Buy", dropdownOptions, "ALL", function(value)
    selectedSeed = value
    print("üå± Selected seed:", value)
end)

-- Manual Buy Button
Library:CreateButton(selsedTab, "Buy Selected Seeds", function()
    print("üõí Buying seeds...")
    buySelectedSeeds()
end)

Library:CreateLabel(selsedTab, "GROW A GARDEN v2.77")

-- Don't remove this
loadstring(game:HttpGet("https://raw.githubusercontent.com/ProGamerBoy610/Script-Hub/refs/heads/main/circle%20togle.lua"))()

return Library
