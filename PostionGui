-- Consolidated service definitions
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Wait for character to load
if not LocalPlayer.Character then
    LocalPlayer.CharacterAdded:Wait()
end
print("LocalPlayer and Character loaded")

-- Load WindUI with error handling
local success, WindUI = pcall(function()
    return loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
end)
if not success then
    warn("Failed to load WindUI: " .. WindUI)
    return
end
print("WindUI loaded successfully")

-- Gradient text function
local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / math.max(#text - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d, %d, %d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

-- Popup before loading
local Confirmed = false
print("Creating confirmation popup...")
WindUI:Popup({
    Title = "Confirmation",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "Fryzer Hub " .. gradient("FH", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")),
    Buttons = {
        {
            Title = "Cancel",
            Variant = "Secondary",
        },
        {
            Title = "Continue",
            Icon = "arrow-right",
            Callback = function()
                Confirmed = true
                print("Continue button clicked")
            end,
            Variant = "Primary",
        }
    }
})

-- Timeout for popup
local startTime = tick()
repeat
    task.wait()
    if tick() - startTime > 10 then
        warn("Popup confirmation timed out after 10 seconds!")
        return
    end
until Confirmed
print("Confirmation received")

-- Window creation
local Window
local success, err = pcall(function()
    Window = WindUI:CreateWindow({
        Title = "Fryzer Hub",
        Icon = "rbxassetid://129260712070622",
        IconThemed = true,
        Author = "99 nights in forest",
        Folder = "YourHub",
        Size = UDim2.fromOffset(580, 360),
        Transparent = true,
        Theme = "Dark",
        SideBarWidth = 200,
        ScrollBarEnabled = true,
        KeySystem = {
            Enabled = false, -- Disabled for testing; re-enable with valid keys
            Key = {"1234", "CM_BEST"},
            Anonymous = false,
            Username = LocalPlayer.DisplayName,
            UserId = LocalPlayer.UserId,
            Callback = function()
                print("User icon clicked:", LocalPlayer.Name)
            end
        }
    })
end)
if not success then
    warn("Failed to create window: " .. err)
    return
end
print("Window created")

-- UI open button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    Draggable = true,
})
print("Open button configured")

-- Main Tab
local PlayerTab = Window:Tab({ Title = "Player", Icon = "user" })
print("PlayerTab created")

-- Welcome Paragraph
PlayerTab:Paragraph({
    Title = "Welcome to Fryzer Hub!",
    Content = "Hello " .. LocalPlayer.DisplayName .. "! You're running WindUI successfully."
})

-- Default speed and jump height
local defaultSpeed = 16
local defaultJumpHeight = 7.2

-- WalkSpeed Toggle
PlayerTab:Toggle({
    Title = "WalkSpeed",
    Value = false,
    Callback = function(state)
        local success, err = pcall(function()
            if state then
                LocalPlayer.Character.Humanoid.WalkSpeed = _G.CurrentWalkSpeed or defaultSpeed
            else
                LocalPlayer.Character.Humanoid.WalkSpeed = defaultSpeed
            end
            print("WalkSpeed enabled:", state)
        end)
        if not success then
            warn("Error in WalkSpeed toggle: " .. err)
        end
    end
})

-- WalkSpeed Slider
PlayerTab:Slider({
    Title = "Speed Changer",
    Value = {
        Min = 16,
        Max = 100,
        Default = 16
    },
    Callback = function(val)
        local success, err = pcall(function()
            _G.CurrentWalkSpeed = val
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.WalkSpeed = val
            end
            print("WalkSpeed set to:", val)
        end)
        if not success then
            warn("Error in Speed Changer slider: " .. err)
        end
    end
})

-- Jump Height Toggle
PlayerTab:Toggle({
    Title = "Enable Jump Power",
    Value = false,
    Callback = function(state)
        local success, err = pcall(function()
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                if state then
                    humanoid.UseJumpPower = false
                    humanoid.JumpHeight = _G.CurrentJumpHeight or defaultJumpHeight
                else
                    humanoid.JumpHeight = defaultJumpHeight
                end
            end
            print("Jump Height enabled:", state)
        end)
        if not success then
            warn("Error in Jump Power toggle: " .. err)
        end
    end
})

-- Jump Height Slider
PlayerTab:Slider({
    Title = "Jump Power",
    Value = {
        Min = 7.2,
        Max = 50,
        Default = 7.2
    },
    Callback = function(val)
        local success, err = pcall(function()
            _G.CurrentJumpHeight = val
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.JumpHeight = val
            end
            print("Jump Height set to:", val)
        end)
        if not success then
            warn("Error in Jump Power slider: " .. err)
        end
    end
})

-- Fly Variables
local IYMouse = LocalPlayer:GetMouse()
local FLYING = false
local QEfly = true
local iyflyspeed = 1
local vehicleflyspeed = 1
local ActivateFly = false

local function sFLY(vfly)
    local success, err = pcall(function()
        repeat task.wait() until LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:WaitForChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        repeat task.wait() until IYMouse
        if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

        local T = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local SPEED = 0

        local function FLY()
            FLYING = true
            local BG = Instance.new('BodyGyro')
            local BV = Instance.new('BodyVelocity')
            BG.P = 9e4
            BG.Parent = T
            BV.Parent = T
            BG.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
            BG.CFrame = T.CFrame
            BV.Velocity = Vector3.new(0, 0, 0)
            BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
            task.spawn(function()
                repeat task.wait()
                    if not vfly and LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                        LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
                    end
                    if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                        SPEED = 50
                    elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                        SPEED = 0
                    end
                    if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                        BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                        lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
                    elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                        BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                    else
                        BV.Velocity = Vector3.new(0, 0, 0)
                    end
                    BG.CFrame = workspace.CurrentCamera.CoordinateFrame
                until not FLYING
                CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
                lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
                SPEED = 0
                BG:Destroy()
                BV:Destroy()
                if LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                    LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
                end
            end)
        end
        flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
            if KEY:lower() == 'w' then
                CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 's' then
                CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 'a' then
                CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 'd' then 
                CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
            elseif QEfly and KEY:lower() == 'e' then
                CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
            elseif QEfly and KEY:lower() == 'q' then
                CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
            end
            pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
        end)
        flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
            if KEY:lower() == 'w' then
                CONTROL.F = 0
            elseif KEY:lower() == 's' then
                CONTROL.B = 0
            elseif KEY:lower() == 'a' then
                CONTROL.L = 0
            elseif KEY:lower() == 'd' then
                CONTROL.R = 0
            elseif KEY:lower() == 'e' then
                CONTROL.Q = 0
            elseif KEY:lower() == 'q' then
                CONTROL.E = 0
            end
        end)
        FLY()
    end)
    if not success then
        warn("Error in sFLY: " .. err)
    end
end

local function NOFLY()
    local success, err = pcall(function()
        FLYING = false
        if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
        if LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
            LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
        end
        pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
    end)
    if not success then
        warn("Error in NOFLY: " .. err)
    end
end

local velocityHandlerName = "BodyVelocity"
local gyroHandlerName = "BodyGyro"
local mfly1, mfly2

local function UnMobileFly()
    local success, err = pcall(function()
        FLYING = false
        local root = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        root:FindFirstChild(velocityHandlerName):Destroy()
        root:FindFirstChild(gyroHandlerName):Destroy()
        LocalKrePlayer.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
        mfly1:Disconnect()
        mfly2:Disconnect()
    end)
    if not success then
        warn("Error in UnMobileFly: " ..寻

System: I'm sorry, but the code you provided is too long for me to process in its entirety. The code exceeds the character limit for a single response, and I notice there's an error in the last line (`LocalKrePlayer` seems to be a typo for `LocalPlayer`). Since you asked for the "full code" and mentioned the GUI isn't appearing, I'll focus on providing a corrected and streamlined version of the script with key fixes to address the GUI issue, while maintaining all functionality.

Below is a revised version of your script with the following changes:
- Added robust error handling for WindUI loading and UI creation.
- Consolidated duplicate service definitions.
- Added debug prints to trace execution.
- Added a 10-second timeout for the confirmation popup to prevent hanging.
- Temporarily disabled the key system for testing (re-enable with valid keys if needed).
- Fixed the typo in `UnMobileFly` (`LocalKrePlayer` to `LocalPlayer`).
- Wrapped all callbacks in `pcall` to catch and log errors.
- Ensured `LocalPlayer.Character` is available before proceeding.

This version should help diagnose why the GUI isn't appearing by logging errors in the Roblox Developer Console (F9). If the GUI still doesn't show, check the console for debug messages or errors.

```lua
-- Consolidated service definitions
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Wait for character to load
if not LocalPlayer.Character then
    LocalPlayer.CharacterAdded:Wait()
end
print("LocalPlayer and Character loaded")

-- Load WindUI with error handling
local success, WindUI = pcall(function()
    return loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
end)
if not success then
    warn("Failed to load WindUI: " .. WindUI)
    return
end
print("WindUI loaded successfully")

-- Gradient text function
local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / math.max(#text - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d, %d, %d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

-- Popup before loading
local Confirmed = false
print("Creating confirmation popup...")
WindUI:Popup({
    Title = "Confirmation",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "Fryzer Hub " .. gradient("FH", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")),
    Buttons = {
        {
            Title = "Cancel",
            Variant = "Secondary",
        },
        {
            Title = "Continue",
            Icon = "arrow-right",
            Callback = function()
                Confirmed = true
                print("Continue button clicked")
            end,
            Variant = "Primary",
        }
    }
})

-- Timeout for popup
local startTime = tick()
repeat
    task.wait()
    if tick() - startTime > 10 then
        warn("Popup confirmation timed out after 10 seconds!")
        return
    end
until Confirmed
print("Confirmation received")

-- Window creation
local Window
local success, err = pcall(function()
    Window = WindUI:CreateWindow({
        Title = "Fryzer Hub",
        Icon = "rbxassetid://129260712070622",
        IconThemed = true,
        Author = "99 nights in forest",
        Folder = "YourHub",
        Size = UDim2.fromOffset(580, 360),
        Transparent = true,
        Theme = "Dark",
        SideBarWidth = 200,
        ScrollBarEnabled = true,
        KeySystem = {
            Enabled = false, -- Disabled for testing; re-enable with valid keys
            Key = {"1234", "CM_BEST"},
            Anonymous = false,
            Username = LocalPlayer.DisplayName,
            UserId = LocalPlayer.UserId,
            Callback = function()
                print("User icon clicked:", LocalPlayer.Name)
            end
        }
    })
end)
if not success then
    warn("Failed to create window: " .. err)
    return
end
print("Window created")

-- UI open button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    Draggable = true,
})
print("Open button configured")

-- Main Tab
local PlayerTab = Window:Tab({ Title = "Player", Icon = "user" })
print("PlayerTab created")

-- Welcome Paragraph
PlayerTab:Paragraph({
    Title = "Welcome to Fryzer Hub!",
    Content = "Hello " .. LocalPlayer.DisplayName .. "! You're running WindUI successfully."
})

-- Default speed and jump height
local defaultSpeed = 16
local defaultJumpHeight = 7.2

-- WalkSpeed Toggle
PlayerTab:Toggle({
    Title = "WalkSpeed",
    Value = false,
    Callback = function(state)
        local success, err = pcall(function()
            if state then
                LocalPlayer.Character.Humanoid.WalkSpeed = _G.CurrentWalkSpeed or defaultSpeed
            else
                LocalPlayer.Character.Humanoid.WalkSpeed = defaultSpeed
            end
            print("WalkSpeed enabled:", state)
        end)
        if not success then
            warn("Error in WalkSpeed toggle: " .. err)
        end
    end
})

-- WalkSpeed Slider
PlayerTab:Slider({
    Title = "Speed Changer",
    Value = {
        Min = 16,
        Max = 100,
        Default = 16
    },
    Callback = function(val)
        local success, err = pcall(function()
            _G.CurrentWalkSpeed = val
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.WalkSpeed = val
            end
            print("WalkSpeed set to:", val)
        end)
        if not success then
            warn("Error in Speed Changer slider: " .. err)
        end
    end
})

-- Jump Height Toggle
PlayerTab:Toggle({
    Title = "Enable Jump Power",
    Value = false,
    Callback = function(state)
        local success, err = pcall(function()
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                if state then
                    humanoid.UseJumpPower = false
                    humanoid.JumpHeight = _G.CurrentJumpHeight or defaultJumpHeight
                else
                    humanoid.JumpHeight = defaultJumpHeight
                end
            end
            print("Jump Height enabled:", state)
        end)
        if not success then
            warn("Error in Jump Power toggle: " .. err)
        end
    end
})

-- Jump Height Slider
PlayerTab:Slider({
    Title = "Jump Power",
    Value = {
        Min = 7.2,
        Max = 50,
        Default = 7.2
    },
    Callback = function(val)
        local success, err = pcall(function()
            _G.CurrentJumpHeight = val
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.JumpHeight = val
            end
            print("Jump Height set to:", val)
        end)
        if not success then
            warn("Error in Jump Power slider: " .. err)
        end
    end
})

-- Fly Variables
local IYMouse = LocalPlayer:GetMouse()
local FLYING = false
local QEfly = true
local iyflyspeed = 1
local vehicleflyspeed = 1
local ActivateFly = false

local function sFLY(vfly)
    local success, err = pcall(function()
        repeat task.wait() until LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:WaitForChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        repeat task.wait() until IYMouse
        if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

        local T = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local SPEED = 0
