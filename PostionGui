-- 99 nights in the forest
local success, WindUI = pcall(function()
    return loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
end)

if not success then
    local success2, WindUI2 = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/source.lua"))()
    end)
    
    if success2 then
        WindUI = WindUI2
    else
        warn("Failed to load WindUI library.")
        game.StarterGui:SetCore("SendNotification", {
            Title = "Library Error",
            Text = "Failed to load WindUI. Please rejoin and try again.",
            Duration = 10
        })
        return
    end
end

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Player = Players.LocalPlayer

-- Player Info
local PlayerName = Player.DisplayName ~= "" and Player.DisplayName or Player.Name
local AccountAge = Player.AccountAge

-- Game info
local GameName = "Unknown Game"
pcall(function()
    GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
end)

-- Theme
local themeSuccess = pcall(function()
    WindUI:AddTheme({
        Name = "CustomBlue",
        Accent = "#3b82f6",
        Outline = "#1e40af",
        Text = "#ffffff",
        Placeholder = "#93c5fd",
        Background = "#1e293b",
        BackgroundSecondary = "#334155",
    })
end)

-- Window
local _, Window = pcall(function()
    return WindUI:CreateWindow({
        Title = "Fryzer Hub", -- Hub name
        Icon = "rbxassetid://129260712070622",
        Author = "99 Nights in the forest", -- Game name
        Folder = "CustomHub",
        Size = UDim2.fromOffset(500, 370),
        Transparent = false,
        Theme = themeSuccess and "CustomBlue" or "Dark",
        SideBarWidth = 240,
        ScrollBarEnabled = true
    })
end)

if themeSuccess then
    pcall(function()
        WindUI:SetTheme("CustomBlue")
    end)
end

-- Custom Open Button
Window:EditOpenButton({
    Title = " Open Hub",
    Icon = "user",
    CornerRadius = UDim.new(0, 12),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("#3b82f6"), Color3.fromHex("#6366f1")),
    Draggable = true,
})

--================= TABS =================

local Tabs = {}

Tabs.InfoTab = Window:Tab({
    Title = "Info",
    Icon = "info",
    Desc = "Player information and Discord community"
})

Tabs.PlayerTab = Window:Tab({
    Title = "Player",
    Icon = "user-check",
    Desc = "All UI components showcase"
})

Tabs.EspTab = Window:Tab({
    Title = "Visual",
    Icon = "eye",
    Desc = "All UI components showcase"
})

Tabs.JkTab = Window:Tab({
    Title = "Fun",
    Icon = "smile",
    Desc = "All UI components showcase"
})

Tabs.TpTab = Window:Tab({
    Title = "Teleport",
    Icon = "navigation",
    Desc = "All UI components showcase"
})

Tabs.OpTab = Window:Tab({
    Title = "Over Powered",
    Icon = "zap",
    Desc = "All UI components showcase"
})

Window:SelectTab(1)

--================= INFO TAB CONTENT =================

Tabs.InfoTab:Paragraph({
    Title = "Player Information Dashboard",
    Desc = "Complete player details, game information, and community access",
    Image = "user-check",
    Color = "Blue",
})

Tabs.InfoTab:Paragraph({
    Title = "üë§ " .. PlayerName,
    Desc = string.format(
        "üè∑Ô∏è Username: @%s\nüéÇ Account Age: %d days\nüÜî User ID: %d\nüéÆ Current Game: %s\nüë• Server: %d/%d players\nüìç Region: %s",
        Player.Name, AccountAge, Player.UserId, GameName,
        #Players:GetPlayers(), Players.MaxPlayers,
        game:GetService("LocalizationService").RobloxLocaleId
    ),
    Image = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. Player.UserId .. "&width=150&height=150&format=png",
    ImageSize = 52,
})

-- Discord Section
Tabs.InfoTab:Paragraph({
    Title = "Join Our Discord Community",
    Desc = "Connect with other users, get support, and stay updated!",
    Image = "users",
    Color = "Blue",
})

Tabs.InfoTab:Button({
    Title = "Copy Discord Link",
    Desc = "Copy invite link to clipboard",
    Callback = function()
        setclipboard("https://discord.gg/rpE4Eet7")
        WindUI:Notify({
            Title = "Link Copied!",
            Content = "Discord link copied to clipboard",
            Duration = 3,
            Icon = "copy",
        })
    end
})

--================= PLAYER TAB CONTENT =================

Tabs.PlayerTab:Paragraph({
    Title = "Player Controls",
    Desc = "Use the buttons below to control your player character",
    Image = "user-check",
    Color = "Blue",
})

-- Movement Variables
local ActiveSpeedBoost = false
local ActiveJumpBoost = false
local ActiveNoclip = false
local ActiveInstantPrompts = false
local ValueSpeed = 16
local ValueJumpHeight = 7.2
local OldSpeed = 16
local OldJumpHeight = 7.2

-- Character respawn handler
local function updateOriginalValues()
    if Player.Character and Player.Character:FindFirstChild("Humanoid") then
        OldSpeed = Player.Character.Humanoid.WalkSpeed
        OldJumpHeight = Player.Character.Humanoid.JumpHeight or 7.2
    end
end

updateOriginalValues()
Player.CharacterAdded:Connect(updateOriginalValues)

-- Instant Prompts Control
Tabs.PlayerTab:Toggle({
    Title = "Instant Open Chests",
    Icon = "zap-off",
    Value = false,
    Callback = function(state)
        ActiveInstantPrompts = state
        
        task.spawn(function()
            if ActiveInstantPrompts then
                for _, prompt in pairs(game.Workspace:GetDescendants()) do  
                    if prompt:IsA("ProximityPrompt") and prompt.HoldDuration ~= 0 then 
                        prompt:SetAttribute("HoldDurationOld", prompt.HoldDuration)
                        prompt.HoldDuration = 0
                    end 
                end
                
                local promptConnection
                promptConnection = game.Workspace.DescendantAdded:Connect(function(descendant)
                    if ActiveInstantPrompts and descendant:IsA("ProximityPrompt") and descendant.HoldDuration ~= 0 then
                        descendant:SetAttribute("HoldDurationOld", descendant.HoldDuration)
                        descendant.HoldDuration = 0
                    end
                end)
                
                while ActiveInstantPrompts do
                    task.wait(1)
                end
                
                if promptConnection then
                    promptConnection:Disconnect()
                end
            else 
                for _, prompt in pairs(game.Workspace:GetDescendants()) do  
                    if prompt:IsA("ProximityPrompt") and prompt:GetAttribute("HoldDurationOld") then 
                        prompt.HoldDuration = prompt:GetAttribute("HoldDurationOld")
                        prompt:SetAttribute("HoldDurationOld", nil)
                    end 
                end  
            end
        end)
        
        print("‚ö° Instant Prompts: " .. (state and "ON" or "OFF"))
    end
})

-- Speed Controls
Tabs.PlayerTab:Slider({
    Title = "Walk Speed Setting",
    Value = { Min = 16, Max = 500, Default = 16 },
    Callback = function(value)
        ValueSpeed = value
        print("üèÉ Walk speed set to: " .. value)
    end
})

Tabs.PlayerTab:Toggle({
    Title = "Enable Speed Boost",
    Icon = "zap",
    Value = false,
    Callback = function(state)
        ActiveSpeedBoost = state
        
        task.spawn(function()
            while ActiveSpeedBoost do
                if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                    Player.Character.Humanoid.WalkSpeed = ValueSpeed
                end
                task.wait(0.1)
            end
            if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                Player.Character.Humanoid.WalkSpeed = OldSpeed
            end
        end)
        
        print("üèÉ Speed Boost: " .. (state and "ON" or "OFF"))
    end
})

-- Jump Controls
Tabs.PlayerTab:Slider({
    Title = "Jump Height Setting",
    Value = { Min = 7, Max = 200, Default = 50 },
    Callback = function(value)
        ValueJumpHeight = value
        print("ü¶ò Jump height set to: " .. value)
    end
})

Tabs.PlayerTab:Toggle({
    Title = "Enable Jump Boost",
    Icon = "move-up",
    Value = false,
    Callback = function(state)
        ActiveJumpBoost = state
        
        task.spawn(function()
            while ActiveJumpBoost do
                if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                    local humanoid = Player.Character.Humanoid
                    humanoid.UseJumpPower = false
                    humanoid.JumpHeight = ValueJumpHeight
                end
                task.wait(0.1)
            end
            if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                local humanoid = Player.Character.Humanoid
                humanoid.JumpHeight = 7.2
            end
        end)
        
        print("ü¶ò Jump Boost: " .. (state and "ON" or "OFF"))
    end
})

-- Noclip Control
Tabs.PlayerTab:Toggle({
    Title = "Noclip Mode",
    Icon = "ghost",
    Value = false,
    Callback = function(state)
        ActiveNoclip = state
        
        task.spawn(function()
            while ActiveNoclip do 
                if Player.Character then
                    for _, part in pairs(Player.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
                task.wait(0.1)
            end 
            if Player.Character then
                for _, part in pairs(Player.Character:GetDescendants()) do
                    if part:IsA("BasePart") and not part.CanCollide then
                        part.CanCollide = true
                    end
                end
            end
        end)
        
        print("üëª Noclip: " .. (state and "ON" or "OFF"))
    end
})

-- Fly System Variables
local IYMouse = Players.LocalPlayer:GetMouse()
local FLYING = false
local QEfly = true
local iyflyspeed = 1
local vehicleflyspeed = 1
local ActivateFly = false

-- Fly Functions
local function sFLY(vfly)
    repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart") and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    repeat wait() until IYMouse
    if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

    local T = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0

    local function FLY()
        FLYING = true
        local BG = Instance.new('BodyGyro')
        local BV = Instance.new('BodyVelocity')
        BG.P = 9e4
        BG.Parent = T
        BV.Parent = T
        BG.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        BG.CFrame = T.CFrame
        BV.Velocity = Vector3.new(0, 0, 0)
        BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        task.spawn(function()
            repeat wait()
                if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                    Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
                end
                if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                    SPEED = 50
                elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                    SPEED = 0
                end
                if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                    BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                    lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
                elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                    BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                else
                    BV.Velocity = Vector3.new(0, 0, 0)
                end
                BG.CFrame = workspace.CurrentCamera.CoordinateFrame
            until not FLYING
            CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            SPEED = 0
            BG:Destroy()
            BV:Destroy()
            if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
            end
        end)
    end
    flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 's' then
            CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'a' then
            CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'd' then 
            CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
        elseif QEfly and KEY:lower() == 'e' then
            CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
        elseif QEfly and KEY:lower() == 'q' then
            CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
        end
        pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
    end)
    flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = 0
        elseif KEY:lower() == 's' then
            CONTROL.B = 0
        elseif KEY:lower() == 'a' then
            CONTROL.L = 0
        elseif KEY:lower() == 'd' then
            CONTROL.R = 0
        elseif KEY:lower() == 'e' then
            CONTROL.Q = 0
        elseif KEY:lower() == 'q' then
            CONTROL.E = 0
        end
    end)
    FLY()
end

local function NOFLY()
    FLYING = false
    if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
    if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
        Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
    end
    pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end

-- Mobile Fly Functions
local velocityHandlerName = "BodyVelocity"
local gyroHandlerName = "BodyGyro"
local mfly1
local mfly2

local function UnMobileFly()
    pcall(function()
        FLYING = false
        local root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        root:FindFirstChild(velocityHandlerName):Destroy()
        root:FindFirstChild(gyroHandlerName):Destroy()
        Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
        mfly1:Disconnect()
        mfly2:Disconnect()
    end)
end

local function MobileFly()
    UnMobileFly()
    FLYING = true

    local root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    local v3none = Vector3.new()
    local v3zero = Vector3.new(0, 0, 0)
    local v3inf = Vector3.new(9e9, 9e9, 9e9)

    local controlModule = require(Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.Parent = root
    bv.MaxForce = v3zero
    bv.Velocity = v3zero

    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.Parent = root
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50

    mfly1 = Players.LocalPlayer.CharacterAdded:Connect(function()
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 50
    end)

    mfly2 = RunService.RenderStepped:Connect(function()
        root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        camera = workspace.CurrentCamera
        if Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
            local humanoid = Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
            local VelocityHandler = root:FindFirstChild(velocityHandlerName)
            local GyroHandler = root:FindFirstChild(gyroHandlerName)

            VelocityHandler.MaxForce = v3inf
            GyroHandler.MaxTorque = v3inf
            humanoid.PlatformStand = true
            GyroHandler.CFrame = camera.CoordinateFrame
            VelocityHandler.Velocity = v3none

            local direction = controlModule:GetMoveVector()
            if direction.X > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((iyflyspeed) * 50))
            end
            if direction.X < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((iyflyspeed) * 50))
            end
            if direction.Z > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((iyflyspeed) * 50))
            end
            if direction.Z < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((iyflyspeed) * 50))
            end
        end
    end)
end

-- Fly Controls
Tabs.PlayerTab:Slider({
    Title = "Fly Speed",
    Value = { Min = 0.1, Max = 10, Default = 1 },
    Callback = function(val)
        iyflyspeed = val
    end
})

Tabs.PlayerTab:Toggle({
    Title = "Fly", 
    Value = false,
    Callback = function(state)
        ActivateFly = state
        task.spawn(function()
            if not FLYING and ActivateFly then
                if UserInputService.TouchEnabled then
                    MobileFly()
                else
                    NOFLY()
                    wait()
                    sFLY()
                end
            elseif FLYING and not ActivateFly then
                if UserInputService.TouchEnabled then
                    UnMobileFly()
                else
                    NOFLY()
                end
            end
        end)
    end
})

print("üöÄ Simple Movement System loaded!")

--================= VISUAL TAB CONTENT =================

-- ESP System Variables
local ActiveEspItems = false
local ActiveEspEnemy = false
local ActiveEspChildren = false
local ActiveEspPeltTrader = false
local ActiveDistanceEsp = false

local function CreateEsp(Char, Color, Text, Parent, number)
    if not Char or not Parent or not Parent:IsA("BasePart") then return end
    if Char:FindFirstChildOfClass("Highlight") or Parent:FindFirstChild("ESP") then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = Char
    highlight.FillColor = Color
    highlight.FillTransparency = 1
    highlight.OutlineColor = Color
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = Char

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP"
    billboard.Size = UDim2.new(0, 50, 0, 25)
    billboard.AlwaysOnTop = true
    billboard.StudsOffset = Vector3.new(0, number or 2, 0)
    billboard.Adornee = Parent
    billboard.Parent = Parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = Text
    label.TextColor3 = Color
    label.TextScaled = true
    label.Parent = billboard

    task.spawn(function()
        while highlight.Parent and billboard.Parent and Parent.Parent do
            local camera = workspace.CurrentCamera
            if ActiveDistanceEsp and camera and Parent:IsA("BasePart") then
                local distance = (camera.CFrame.Position - Parent.Position).Magnitude
                label.Text = Text .. " (" .. math.floor(distance + 0.5) .. " m)"
            else
                label.Text = Text
            end
            RunService.Heartbeat:Wait()
        end
        if highlight.Parent then highlight:Destroy() end
        if billboard.Parent then billboard:Destroy() end
    end)
end

local function RemoveEsp(Char, Parent)
    if Char and Char:FindFirstChildOfClass("Highlight") then
        Char:FindFirstChildOfClass("Highlight"):Destroy()
    end
    if Parent and Parent:FindFirstChild("ESP") then
        Parent:FindFirstChild("ESP"):Destroy()
    end
end

-- ESP Update Functions
local function UpdateItemsEsp()
    if not workspace:FindFirstChild("Items") then return end
    if ActiveEspItems then
        for _, obj in pairs(workspace.Items:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart then
                CreateEsp(obj, Color3.fromRGB(255, 255, 0), obj.Name, obj.PrimaryPart, 2)
            end
        end
    else
        for _, obj in pairs(workspace.Items:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdateEnemiesEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspEnemy then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               not (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                    obj.Name == "Lost Child3" or obj.Name == "Lost Child4" or
                    obj.Name == "Pelt Trader") then
                CreateEsp(obj, Color3.fromRGB(255, 0, 0), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               not (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                    obj.Name == "Lost Child3" or obj.Name == "Lost Child4" or
                    obj.Name == "Pelt Trader") then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdateChildrenEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspChildren then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                obj.Name == "Lost Child3" or obj.Name == "Lost Child4") then
                CreateEsp(obj, Color3.fromRGB(0, 255, 0), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                obj.Name == "Lost Child3" or obj.Name == "Lost Child4") then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdatePeltTraderEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspPeltTrader then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and obj.Name == "Pelt Trader" then
                CreateEsp(obj, Color3.fromRGB(0, 255, 255), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and obj.Name == "Pelt Trader" then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

-- Health Billboard System
local healthBillboardEnabled = false
local connections = {}
local tracked = {}

local SETTINGS = {
    Name = "HealthBillboard",
    MaxDistance = 250,
    StudsOffset = Vector3.new(0, 3.5, 0),
    TextFont = Enum.Font.GothamBold,
    TextSize = 14,
    AlwaysOnTop = true,
    UpdateHz = 30,
    UseBar = true,
    ShowModelName = false,
    BarHeight = 6,
    BorderThickness = 2.5,
}

local function clamp(n, a, b) return math.max(a, math.min(b, n)) end

local function lerpColor(c1, c2, t)
    return Color3.new(
        c1.R + (c2.R - c1.R) * t,
        c1.G + (c2.G - c1.G) * t,
        c1.B + (c2.B - c1.B) * t
    )
end

local function colorByPercent(p)
    p = clamp(p, 0, 1)
    return lerpColor(Color3.fromRGB(255, 60, 60), Color3.fromRGB(60, 255, 90), p)
end

local function findHead(model)
    local head = model:FindFirstChild("Head")
    if head and head:IsA("BasePart") then return head end
    local best, bestY = nil, -math.huge
    for _, obj in ipairs(model:GetDescendants()) do
        if obj:IsA("BasePart") and obj.CanCollide then
            if obj.Position.Y > bestY then
                bestY = obj.Position.Y
                best = obj
            end
        end
    end
    return best
end

local function makeBillboard(humanoid, head, model)
    if tracked[humanoid] and tracked[humanoid].Parent then return tracked[humanoid] end

    local bb = Instance.new("BillboardGui")
    bb.Name = SETTINGS.Name
    bb.Adornee = head
    bb.AlwaysOnTop = SETTINGS.AlwaysOnTop
    bb.Size = UDim2.fromOffset(160, SETTINGS.UseBar and (26 + SETTINGS.BarHeight) or 26)
    bb.StudsOffset = SETTINGS.StudsOffset
    bb.MaxDistance = SETTINGS.MaxDistance
    bb.ResetOnSpawn = false
    bb.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    bb.Parent = head

    local holder = Instance.new("Frame")
    holder.Size = UDim2.fromScale(1, 1)
    holder.BackgroundTransparency = 1
    holder.Parent = bb

    local text = Instance.new("TextLabel")
    text.Name = "HPText"
    text.Size = UDim2.new(1, -12, 0, 24)
    text.Position = UDim2.fromOffset(6, 2)
    text.BackgroundTransparency = 1
    text.TextColor3 = Color3.new(1,1,1)
    text.TextStrokeTransparency = 0.5
    text.Font = SETTINGS.TextFont
    text.TextSize = SETTINGS.TextSize
    text.Parent = holder

    local barFrame, barFill
    if SETTINGS.UseBar then
        barFrame = Instance.new("Frame")
        barFrame.Name = "Bar"
        barFrame.Size = UDim2.new(1, -12, 0, SETTINGS.BarHeight)
        barFrame.Position = UDim2.fromOffset(6, 26)
        barFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
        barFrame.BorderSizePixel = SETTINGS.BorderThickness
        barFrame.Parent = holder

        barFill = Instance.new("Frame")
        barFill.Name = "Fill"
        barFill.Size = UDim2.fromScale(1, 1)
        barFill.BackgroundColor3 = Color3.fromRGB(60, 255, 90)
        barFill.BorderSizePixel = 0
        barFill.Parent = barFrame
    end

    tracked[humanoid] = bb

    local lastDisplayPct = 1
    local function update()
        if not healthBillboardEnabled then return end
        local hp = clamp(humanoid.Health, 0, math.max(1, humanoid.MaxHealth))
        local maxHp = math.max(1, humanoid.MaxHealth)
        local pct = hp / maxHp
        text.Text = string.format("%d / %d", math.floor(hp + 0.5), math.floor(maxHp + 0.5))

        if barFill then
            lastDisplayPct = lastDisplayPct + (pct - lastDisplayPct) * 0.35
            barFill.Size = UDim2.fromScale(lastDisplayPct, 1)
            barFill.BackgroundColor3 = colorByPercent(lastDisplayPct)
        else
            text.TextColor3 = colorByPercent(pct)
        end
    end

    local healthConn = humanoid.HealthChanged:Connect(update)
    local maxHealthConn = humanoid:GetPropertyChangedSignal("MaxHealth"):Connect(update)
    local diedConn = humanoid.Died:Connect(function()
        if tracked[humanoid] then
            tracked[humanoid]:Destroy()
            tracked[humanoid] = nil
        end
    end)
    local heartbeatConn = RunService.Heartbeat:Connect(update)

    connections[humanoid] = {healthConn, maxHealthConn, diedConn, heartbeatConn}

    update()
end

local function attachToModel(model)
    if not model or not model:IsA("Model") then return end
    if Players:GetPlayerFromCharacter(model) == Player then return end
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    local head = findHead(model)
    if not head then return end
    makeBillboard(humanoid, head, model)
end

local function enableHealthBillboards()
    for _, hum in ipairs(workspace:GetDescendants()) do
        if hum:IsA("Humanoid") and hum.Parent and hum.Parent:IsA("Model") then
            attachToModel(hum.Parent)
        end
    end

    connections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Humanoid") then
            local model = obj.Parent
            if model and model:IsA("Model") then
                task.defer(function()
                    attachToModel(model)
                end)
            end
        end
    end)

    connections.playerAdded = Players.PlayerAdded:Connect(function(plr)
        plr.CharacterAdded:Connect(function(char)
            task.defer(function()
                attachToModel(char)
            end)
        end)
    end)

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Character then attachToModel(plr.Character) end
        plr.CharacterAdded:Connect(function(char)
            task.defer(function()
                attachToModel(char)
            end)
        end)
    end
end

local function disableHealthBillboards()
    for humanoid, connList in pairs(connections) do
        if type(connList) == "table" then
            for _, conn in ipairs(connList) do
                conn:Disconnect()
            end
        elseif connList.Disconnect then
            connList:Disconnect()
        end
    end
    connections = {}

    for humanoid, billboard in pairs(tracked) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    tracked = {}

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("BillboardGui") and obj.Name == SETTINGS.Name then
            obj:Destroy()
        end
    end
end

-- Health Billboard Toggle
Tabs.EspTab:Toggle({
    Title = "Health Billboard",
    Icon = "heart",
    Value = false,
    Callback = function(state)
        healthBillboardEnabled = state
        if state then
            enableHealthBillboards()
        else
            disableHealthBillboards()
        end
        print("Health Billboard", state and "ON" or "OFF")
    end
})

-- ESP Toggles
Tabs.EspTab:Toggle({
    Title = "ESP Items",
    Icon = "package",
    Value = false,
    Callback = function(state)
        ActiveEspItems = state
        UpdateItemsEsp()
        print("ESP Items", state and "ON" or "OFF")
    end
})

Tabs.EspTab:Toggle({
    Title = "ESP Enemies",
    Icon = "skull",
    Value = false,
    Callback = function(state)
        ActiveEspEnemy = state
        UpdateEnemiesEsp()
        print("ESP Enemies", state and "ON" or "OFF")
    end
})

Tabs.EspTab:Toggle({
    Title = "ESP Children",
    Icon = "baby",
    Value = false,
    Callback = function(state)
        ActiveEspChildren = state
        UpdateChildrenEsp()
        print("ESP Children", state and "ON" or "OFF")
    end
})

Tabs.EspTab:Toggle({
    Title = "ESP Pelt Trader",
    Icon = "user",
    Value = false,
    Callback = function(state)
        ActiveEspPeltTrader = state
        UpdatePeltTraderEsp()
        print("ESP Pelt Trader", state and "ON" or "OFF")
    end
})

Tabs.EspTab:Toggle({
    Title = "Show Distance in ESP",
    Icon = "ruler",
    Value = false,
    Callback = function(state)
        ActiveDistanceEsp = state
        if ActiveEspItems then UpdateItemsEsp() end
        if ActiveEspEnemy then UpdateEnemiesEsp() end
        if ActiveEspChildren then UpdateChildrenEsp() end
        if ActiveEspPeltTrader then UpdatePeltTraderEsp() end
        print("Show Distance in ESP", state and "ON" or "OFF")
    end
})

-- Clear All ESP Button
Tabs.EspTab:Button({
    Title = "Clear All ESP",
    Desc = "Removes all active ESP elements",
    Callback = function()
        ActiveEspItems = false
        ActiveEspEnemy = false
        ActiveEspChildren = false
        ActiveEspPeltTrader = false
        
        UpdateItemsEsp()
        UpdateEnemiesEsp()
        UpdateChildrenEsp()
        UpdatePeltTraderEsp()
        
        print("All ESP cleared!")
    end
})

-- Setup ESP connections for dynamic updates
local function setupEspConnections()
    if workspace:FindFirstChild("Items") then
        workspace.Items.ChildAdded:Connect(function(child)
            if ActiveEspItems and child:IsA("Model") and child.PrimaryPart then
                CreateEsp(child, Color3.fromRGB(255, 255, 0), child.Name, child.PrimaryPart, 2)
            end
        end)

        workspace.Items.ChildRemoved:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                RemoveEsp(child, child.PrimaryPart)
            end
        end)
    end

    if workspace:FindFirstChild("Characters") then
        workspace.Characters.ChildAdded:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                if ActiveEspEnemy and
                   not (child.Name == "Lost Child" or child.Name == "Lost Child2" or
                        child.Name == "Lost Child3" or child.Name == "Lost Child4" or
                        child.Name == "Pelt Trader") then
                    CreateEsp(child, Color3.fromRGB(255, 0, 0), child.Name, child.PrimaryPart, 3)
                elseif ActiveEspChildren and
                   (child.Name == "Lost Child" or child.Name == "Lost Child2" or
                    child.Name == "Lost Child3" or child.Name == "Lost Child4") then
                    CreateEsp(child, Color3.fromRGB(0, 255, 0), child.Name, child.PrimaryPart, 3)
                elseif ActiveEspPeltTrader and child.Name == "Pelt Trader" then
                    CreateEsp(child, Color3.fromRGB(0, 255, 255), child.Name, child.PrimaryPart, 3)
                end
            end
        end)

        workspace.Characters.ChildRemoved:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                RemoveEsp(child, child.PrimaryPart)
            end
        end)
    end
end

setupEspConnections()

--================= TELEPORT TAB CONTENT =================

-- Teleport to Campfire
Tabs.TpTab:Button({
    Title = "Teleport to Campfire",
    Desc = "Quick teleport to campfire location",
    Callback = function()
        local targetPosition = Vector3.new(0.2976149320602417, 6.346785545349121, -0.043002475053071976)
        
        if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            Player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            print("Teleported to campfire successfully!")
        else
            print("Teleport failed - Character not found!")
        end
    end
})

-- Lost Child Teleport System
local CharactersFolder = workspace:FindFirstChild("Characters")

if CharactersFolder then
    local lostChildPaths = {
        "Lost Child",
        "Lost Child2", 
        "Lost Child3",
        "Lost Child4"
    }
    
    local availableChildren = {}
    local selectedChild = nil
    local childDropdown = nil

    local function refreshLostChildren()
        local previousChildren = {}
        for _, child in pairs(availableChildren) do
            previousChildren[child] = true
        end
        
        availableChildren = {}
        
        for _, childName in pairs(lostChildPaths) do
            local childModel = CharactersFolder:FindFirstChild(childName)
            if childModel and childModel:IsA("Model") then
                table.insert(availableChildren, childName)
            end
        end
        
        print("Found", #availableChildren, "Lost Children available for teleport")
        
        if selectedChild and not CharactersFolder:FindFirstChild(selectedChild) then
            selectedChild = nil
            print("Previously selected Lost Child no longer exists")
        end
        
        local hasChanges = (#availableChildren ~= #previousChildren)
        if not hasChanges then
            for _, child in pairs(availableChildren) do
                if not previousChildren[child] then
                    hasChanges = true
                    break
                end
            end
        end
        
        if childDropdown and hasChanges then
            pcall(function()
                childDropdown:SetValues(availableChildren)
            end)
            
            if #availableChildren > 0 and not selectedChild then
                selectedChild = availableChildren[1]
                pcall(function()
                    childDropdown:SetValue(selectedChild)
                end)
            end
        end
    end

    local function getLostChildTeleportPosition(childName)
        local childModel = CharactersFolder:FindFirstChild(childName)
        if not childModel then return nil end
        
        local rootPart = childModel:FindFirstChild("HumanoidRootPart")
        if rootPart then return rootPart.Position end
        
        local anyPart = childModel:FindFirstChildWhichIsA("BasePart")
        if anyPart then return anyPart.Position end
        
        if childModel.PrimaryPart then return childModel.PrimaryPart.Position end
        
        return nil
    end

    local function teleportToLostChild(childName)
        if not Player.Character or not Player.Character:FindFirstChild("HumanoidRootPart") then
            print("Player character not found!")
            return false
        end
        
        local targetPosition = getLostChildTeleportPosition(childName)
        if not targetPosition then
            print("Could not find valid teleport position for", childName)
            return false
        end
        
        local teleportPosition = targetPosition + Vector3.new(0, 5, 0)
        Player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
        
        print("Teleported to", childName)
        return true
    end

    refreshLostChildren()

    childDropdown = Tabs.TpTab:Dropdown({
        Title = "Select Lost Child",
        Values = availableChildren,
        Value = availableChildren[1] or "None",
        Callback = function(selected)
            selectedChild = selected
            print("Selected Lost Child:", selected)
        end
    })

    Tabs.TpTab:Button({
        Title = "Teleport to Selected Lost Child",
        Desc = "Teleport to the currently selected Lost Child",
        Callback = function()
            if not selectedChild then
                print("No Lost Child selected!")
                return
            end
            teleportToLostChild(selectedChild)
        end
    })

    for _, childName in pairs(lostChildPaths) do
        Tabs.TpTab:Button({
            Title = "TP to " .. childName,
            Desc = "Direct teleport to " .. childName,
            Callback = function()
                if not CharactersFolder:FindFirstChild(childName) then
                    print(childName, "not found!")
                    return
                end
                teleportToLostChild(childName)
            end
        })
    end

    task.spawn(function()
        while true do
            task.wait(1)
            refreshLostChildren()
        end
    end)
end

-- Sky Platform System
local isOnPlatform = false
local skyPlatform = nil
local platformConnection = nil

local function createSkyPlatform(playerPosition)
    if skyPlatform then
        skyPlatform:Destroy()
    end
    
    skyPlatform = Instance.new("Part")
    skyPlatform.Name = "SkyPlatform"
    skyPlatform.Size = Vector3.new(50, 1, 50)
    skyPlatform.Position = Vector3.new(playerPosition.X, 200, playerPosition.Z)
    skyPlatform.Anchored = true
    skyPlatform.Transparency = 1
    skyPlatform.CanCollide = true
    skyPlatform.TopSurface = Enum.SurfaceType.Smooth
    skyPlatform.BottomSurface = Enum.SurfaceType.Smooth
    skyPlatform.Parent = workspace
    
    platformConnection = RunService.Heartbeat:Connect(function()
        if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and isOnPlatform then
            local humanoidRootPart = Player.Character.HumanoidRootPart
            local playerPos = humanoidRootPart.Position
            
            if playerPos.Y > 150 then
                local distance = (Vector2.new(playerPos.X, playerPos.Z) - Vector2.new(skyPlatform.Position.X, skyPlatform.Position.Z)).Magnitude
                
                if distance > 20 then
                    skyPlatform.Position = Vector3.new(playerPos.X, 200, playerPos.Z)
                end
                
                local minSize = 100
                if skyPlatform.Size.X < minSize then
                    skyPlatform.Size = Vector3.new(minSize, 1, minSize)
                end
            end
        end
    end)
end

local function teleportToSky()
    local character = Player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        print("Error: Character not found")
        return
    end
    
    local humanoidRootPart = character.HumanoidRootPart
    createSkyPlatform(humanoidRootPart.Position)
    humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position.X, 205, humanoidRootPart.Position.Z)
    isOnPlatform = true
    print("Teleported to invisible sky platform!")
end

local function teleportToGround()
    local character = Player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        print("Error: Character not found")
        return
    end
    
    local humanoidRootPart = character.HumanoidRootPart
    local currentPosition = humanoidRootPart.Position
    
    local raycast = workspace:Raycast(Vector3.new(currentPosition.X, currentPosition.Y, currentPosition.Z), Vector3.new(0, -1000, 0))
    
    if raycast then
        humanoidRootPart.CFrame = CFrame.new(currentPosition.X, raycast.Position.Y + 5, currentPosition.Z)
    else
        humanoidRootPart.CFrame = CFrame.new(currentPosition.X, 50, currentPosition.Z)
    end
    
    if skyPlatform then
        skyPlatform:Destroy()
        skyPlatform = nil
    end
    
    if platformConnection then
        platformConnection:Disconnect()
        platformConnection = nil
    end
    
    isOnPlatform = false
    print("Teleported back to ground!")
end

Tabs.TpTab:Toggle({
    Title = "Sky Platform",
    Icon = "cloud",
    Value = false,
    Callback = function(state)
        print(state and "Sky Platform ON" or "Sky Platform OFF")
        
        if state then
            teleportToSky()
        else
            teleportToGround()
        end
    end
})

--================= FUN TAB CONTENT =================

Tabs.JkTab:Paragraph({
    Title = "Fun Features",
    Desc = "Entertainment and visual enhancement features",
    Image = "smile",
    Color = "Blue",
})

-- Character Freeze System
if CharactersFolder then
    local characterCounts = {}
    local characterNames = {}
    local selectedCharacters = {}
    local frozenCharacters = {}
    local characterDropdown = nil
    local isFreezeModeActive = false

    local function refreshCharacterList()
        local previousNames = {}
        for _, name in pairs(characterNames) do
            previousNames[name] = true
        end
        
        characterCounts = {}
        characterNames = {}
        local displayNames = {}

        for _, character in pairs(CharactersFolder:GetChildren()) do
            if character:IsA("Model") then
                local name = character.Name
                if not characterCounts[name] then
                    characterCounts[name] = 0
                    table.insert(characterNames, name)
                end
                characterCounts[name] = characterCounts[name] + 1
            end
        end

        for _, name in pairs(characterNames) do
            local count = characterCounts[name]
            local displayName = name .. " X" .. count
            table.insert(displayNames, displayName)
        end

        print("Found", #characterNames, "unique character types")
        
        local hasChanges = (#characterNames ~= #previousNames)
        if not hasChanges then
            for _, name in pairs(characterNames) do
                if not previousNames[name] then
                    hasChanges = true
                    break
                end
            end
        end
        
        if characterDropdown and hasChanges then
            pcall(function()
                characterDropdown:SetValues(displayNames)
            end)
        end
        
        local validSelections = {}
        for _, selected in pairs(selectedCharacters) do
            local characterName = selected:match("(.+) X%d+")
            if characterName and characterCounts[characterName] then
                table.insert(validSelections, selected)
            end
        end
        selectedCharacters = validSelections
        
        return displayNames
    end

    local function freezeSelectedCharacters()
        if not isFreezeModeActive then return end
        
        for _, character in pairs(CharactersFolder:GetChildren()) do
            if character:IsA("Model") then
                local characterName = character.Name
                
                local shouldFreeze = false
                for _, selected in pairs(selectedCharacters) do
                    local selectedName = selected:match("(.+) X%d+")
                    if selectedName == characterName then
                        shouldFreeze = true
                        break
                    end
                end
                
                if shouldFreeze then
                    for _, part in pairs(character:GetDescendants()) do
                        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                            part.Anchored = true
                            frozenCharacters[part] = true
                        end
                    end
                    
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.PlatformStand = true
                        frozenCharacters[humanoid] = true
                    end
                end
            end
        end
    end

    local function unfreezeAllCharacters()
        for part, _ in pairs(frozenCharacters) do
            if part:IsA("BasePart") then
                part.Anchored = false
            elseif part:IsA("Humanoid") then
                part.PlatformStand = false
            end
        end
        frozenCharacters = {}
        print("All characters unfrozen")
    end

    local displayNames = refreshCharacterList()

    characterDropdown = Tabs.JkTab:Dropdown({
        Title = "Select Characters to Freeze",
        Values = displayNames,
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(selected)
            selectedCharacters = selected
            print("Selected characters:", table.concat(selected, ", "))
            
            if isFreezeModeActive then
                unfreezeAllCharacters()
                freezeSelectedCharacters()
            end
        end
    })

    Tabs.JkTab:Toggle({
        Title = "Freeze Selected Characters",
        Icon = "snowflake",
        Value = false,
        Callback = function(state)
            isFreezeModeActive = state
            print("Character Freeze Mode:", state and "ON" or "OFF")
            
            if state then
                freezeSelectedCharacters()
                print("Selected characters have been frozen")
            else
                unfreezeAllCharacters()
            end
        end
    })

    task.spawn(function()
        while true do
            task.wait(1)
            refreshCharacterList()
            
            if isFreezeModeActive and #selectedCharacters > 0 then
                freezeSelectedCharacters()
            end
        end
    end)
end

-- Visual Settings
Tabs.JkTab:Paragraph({
    Title = "Visual Settings",
    Desc = "Control graphics like fog, brightness, and sky",
    Image = "sun",
    Color = "Yellow",
})

-- No Fog Toggle
Tabs.JkTab:Toggle({
    Title = "No Fog",
    Icon = "cloud-off",
    Value = false,
    Callback = function(state)
        if state then
            game.Lighting.FogEnd = 1e9
            WindUI:Notify({ Title = "No Fog Enabled", Content = "Fog removed.", Duration = 2 })
        else
            game.Lighting.FogEnd = 1000
            WindUI:Notify({ Title = "No Fog Disabled", Content = "Fog restored.", Duration = 2 })
        end
    end
})

-- No Sky Toggle
Tabs.JkTab:Toggle({
    Title = "No Sky",
    Icon = "cloud",
    Value = false,
    Callback = function(state)
        if state then
            for _, v in pairs(game.Lighting:GetChildren()) do
                if v:IsA("Sky") then v.Parent = nil end
            end
            WindUI:Notify({ Title = "No Sky Enabled", Content = "Sky removed.", Duration = 2 })
        else
            local sky = Instance.new("Sky")
            sky.Parent = game.Lighting
            WindUI:Notify({ Title = "No Sky Disabled", Content = "Sky restored.", Duration = 2 })
        end
    end
})

-- Fullbright Toggle
Tabs.JkTab:Toggle({
    Title = "Full Brightness",
    Icon = "sun-medium",
    Value = false,
    Callback = function(state)
        if state then
            game.Lighting.Brightness = 2
            game.Lighting.Ambient = Color3.new(1,1,1)
            game.Lighting.OutdoorAmbient = Color3.new(1,1,1)
            WindUI:Notify({ Title = "Fullbright Enabled", Content = "Lighting set to full brightness.", Duration = 2 })
        else
            game.Lighting.Brightness = 1
            game.Lighting.Ambient = Color3.new(0.5,0.5,0.5)
            game.Lighting.OutdoorAmbient = Color3.new(0.5,0.5,0.5)
            WindUI:Notify({ Title = "Fullbright Disabled", Content = "Lighting restored.", Duration = 2 })
        end
    end
})

-- Low GFX Toggle
Tabs.JkTab:Toggle({
    Title = "Low GFX",
    Icon = "gauge",
    Value = false,
    Callback = function(state)
        if state then
            for _, v in pairs(workspace:GetDescendants()) do
                if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") then
                    v.Material = Enum.Material.Plastic
                    v.Reflectance = 0
                elseif v:IsA("Decal") or v:IsA("Texture") then
                    v:Destroy()
                end
            end
            WindUI:Notify({ Title = "Low GFX Mode Enabled", Content = "Performance optimized.", Duration = 2 })
        else
            WindUI:Notify({ Title = "Low GFX Disabled", Content = "Reload game to restore graphics.", Duration = 2 })
        end
    end
})

--================= OVERPOWERED TAB CONTENT =================

Tabs.OpTab:Paragraph({
    Title = "Overpowered Features",
    Desc = "Warning: Do not change the distance sliders below, they are set to optimal values.",
    Image = "zap",
    Color = "Red",
})

-- Auto Farm Variables
local ActiveAutoChopTree = false
local DistanceForAutoChopTree = 2500
local ActiveKillAura = false
local DistanceForKillAura = 2500

-- Auto Chop Tree Distance Slider
Tabs.OpTab:Slider({
    Title = "Auto Chop Tree Distance (Don't Change)",
    Value = {
        Min = 0,
        Max = 3000,
        Default = 2500
    },
    Callback = function(val)
        DistanceForAutoChopTree = val
        print("Auto Chop Tree distance set to:", val)
    end
})

-- Auto Chop Tree Toggle
Tabs.OpTab:Toggle({
    Title = "Auto Chop Tree", 
    Icon = "tree-pine",
    Value = false,
    Callback = function(state)
        ActiveAutoChopTree = state
        print("Auto Chop Tree is now:", state and "ON" or "OFF")
        
        if ActiveAutoChopTree then
            task.spawn(function()
                while ActiveAutoChopTree do 
                    local character = Player.Character or Player.CharacterAdded:Wait()
                    local hrp = character:WaitForChild("HumanoidRootPart")
                    local weapon = (Player.Inventory:FindFirstChild("Old Axe") or 
                                   Player.Inventory:FindFirstChild("Good Axe") or 
                                   Player.Inventory:FindFirstChild("Strong Axe") or 
                                   Player.Inventory:FindFirstChild("Chainsaw"))
                    
                    -- Check trees in Foliage
                    task.spawn(function()
                        for _, tree in pairs(workspace.Map.Foliage:GetChildren()) do
                            if tree:IsA("Model") and (tree.Name == "Small Tree" or tree.Name == "TreeBig1" or tree.Name == "TreeBig2") and tree.PrimaryPart then
                                local distance = (tree.PrimaryPart.Position - hrp.Position).Magnitude
                                if distance <= DistanceForAutoChopTree then
                                    local result = game:GetService("ReplicatedStorage").RemoteEvents.ToolDamageObject:InvokeServer(tree, weapon, 999, hrp.CFrame)
                                end
                            end
                        end 
                    end)
                    
                    -- Check trees in Landmarks
                    task.spawn(function()
                        for _, tree in pairs(workspace.Map.Landmarks:GetChildren()) do
                            if tree:IsA("Model") and (tree.Name == "Small Tree" or tree.Name == "TreeBig1" or tree.Name == "TreeBig2") and tree.PrimaryPart then
                                local distance = (tree.PrimaryPart.Position - hrp.Position).Magnitude
                                if distance <= DistanceForAutoChopTree then
                                    local result = game:GetService("ReplicatedStorage").RemoteEvents.ToolDamageObject:InvokeServer(tree, weapon, 999, hrp.CFrame)
                                end
                            end
                        end
                    end)
                    
                    task.wait(0.1)
                end
            end)
        end
    end
})

-- Kill Aura Distance Slider
Tabs.OpTab:Slider({
    Title = "Kill Aura Distance (Don't Change)",
    Value = {
        Min = 25,
        Max = 10000,
        Default = 2500
    },
    Callback = function(val)
        DistanceForKillAura = val
        print("Kill Aura distance set to:", val)
    end
})

-- Kill Aura Toggle
Tabs.OpTab:Toggle({
    Title = "Kill Aura", 
    Icon = "sword",
    Value = false,
    Callback = function(state)
        ActiveKillAura = state
        print("Kill Aura is now:", state and "ON" or "OFF")
        
        if ActiveKillAura then
            task.spawn(function()
                while ActiveKillAura do 
                    local character = Player.Character or Player.CharacterAdded:Wait()
                    local hrp = character:WaitForChild("HumanoidRootPart")
                    local weapon = (Player.Inventory:FindFirstChild("Old Axe") or 
                                   Player.Inventory:FindFirstChild("Good Axe") or 
                                   Player.Inventory:FindFirstChild("Strong Axe") or 
                                   Player.Inventory:FindFirstChild("Chainsaw"))
                    
                    task.spawn(function()
                        for _, enemy in pairs(workspace.Characters:GetChildren()) do
                            if enemy:IsA("Model") and enemy.PrimaryPart then
                                local distance = (enemy.PrimaryPart.Position - hrp.Position).Magnitude
                                if distance <= DistanceForKillAura then
                                    local result = game:GetService("ReplicatedStorage").RemoteEvents.ToolDamageObject:InvokeServer(enemy, weapon, 999, hrp.CFrame)
                                end
                            end
                        end
                    end)
                    
                    task.wait(0.1)
                end
            end)
        end
    end
})

-- Cleanup function for player leaving
local function cleanupSkyPlatform()
    if skyPlatform then
        skyPlatform:Destroy()
        skyPlatform = nil
    end
    if platformConnection then
        platformConnection:Disconnect()
        platformConnection = nil
    end
    isOnPlatform = false
end

-- Clean up when player resets
Player.CharacterRemoving:Connect(cleanupSkyPlatform)

-- Final initialization message
print("üöÄ Fryzer Hub loaded successfully!")
print("üìù All tabs initialized: Info, Player, Visual, Fun, Teleport, OverPowered")

-- Destroy cleanup
Window:OnDestroy(function()
    print("Window destroyed - cleaning up")
    cleanupSkyPlatform()
end)
