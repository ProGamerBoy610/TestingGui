-- Modern Fryzer Hub Script
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")

-- Player reference
local LocalPlayer = Players.LocalPlayer

-- Script configuration
local Config = {
    Title = "Fryzer Hub",
    Version = "v2.0",
    Author = "Grow a garden",
    AutoSave = true,
    Theme = "Dark"
}

-- Localization setup
WindUI:Localization({
    Enabled = true,
    Prefix = "fh:",
    DefaultLanguage = "en",
    Translations = {
        ["en"] = {
            ["TITLE"] = "Fryzer Hub",
            ["WELCOME"] = "Welcome to Fryzer Hub!",
            ["PLAYER"] = "Player",
            ["FARMING"] = "Auto Farm",
            ["FUNCTIONS"] = "Functions",
            ["SCRIPTS"] = "Scripts",
            ["SETTINGS"] = "Settings"
        }
    }
})

-- Utility functions
local Utils = {}

function Utils.gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / math.max(#text - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d, %d, %d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

function Utils.teleportTo(position, speed)
    speed = speed or 0.3
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local humanoidRootPart = character.HumanoidRootPart
    local tweenInfo = TweenInfo.new(speed, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
    
    tween:Play()
    tween.Completed:Wait()
    return true
end

function Utils.notify(title, content, duration)
    WindUI:Notify({
        Title = title,
        Content = content,
        Duration = duration or 3
    })
end

-- Game data
local GameData = {
    locations = {
        ["Event Area"] = Vector3.new(-119.69, 3.00, -14.97),
        ["Gear Shop"] = Vector3.new(-285.27, 3.00, -13.62),
        ["Pet Eggs Shop"] = Vector3.new(-287.34, 3.00, -0.91),
        ["Cosmetics Shop"] = Vector3.new(-286.11, 3.00, -24.29),
        ["Garden 1"] = Vector3.new(33.44, 3.00, 38.34),
        ["Garden 2"] = Vector3.new(-100.65, 3.00, 38.08),
        ["Garden 3"] = Vector3.new(-237.85, 3.00, 38.51),
        ["Garden 4"] = Vector3.new(34.44, 3.00, -65.85),
        ["Garden 5"] = Vector3.new(-98.96, 3.00, -65.37),
        ["Garden 6"] = Vector3.new(-235.72, 3.00, -70.17)
    },
    
    seeds = {
        "Apple", "Bamboo", "Beanstalk", "Blueberry", "Burning Bud",
        "Cacao", "Cactus", "Carrot", "Coconut", "Corn", "Daffodil",
        "Dragon Fruit", "Elder Strawberry", "Ember Lily", "Giant Pinecone",
        "Grape", "Mango", "Mushroom", "Orange Tulip", "Pepper",
        "Pumpkin", "Strawberry", "Sugar Apple", "Tomato", "Watermelon"
    },
    
    sellLocation = Vector3.new(86.59001922607422, 2.999999761581421, 0.426799476146698)
}

-- Main script variables
local ScriptState = {
    autoFarmEnabled = false,
    autoBuyEnabled = false,
    selectedLocation = "Event Area",
    selectedSeeds = {"ALL"},
    playerFarm = nil
}

-- Confirmation popup
local Confirmed = false
WindUI:Popup({
    Title = "Confirmation",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "Fryzer Hub " .. Utils.gradient("FH", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")),
    Buttons = {
        {
            Title = "Cancel",
            Variant = "Secondary",
        },
        {
            Title = "Continue",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})

repeat task.wait() until Confirmed

-- Create main window
local Window = WindUI:CreateWindow({
    Title = Config.Title,
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = Config.Author,
    Folder = "FryzerHub",
    Size = UDim2.fromOffset(700, 500),
    Transparent = true,
    Theme = Config.Theme,
    SideBarWidth = 220,
    ScrollBarEnabled = true,
    User = {
        Enabled = true,
        Anonymous = false,
        Username = LocalPlayer.DisplayName,
        UserId = LocalPlayer.UserId,
        Callback = function()
            Utils.notify("Profile", "User profile clicked!")
        end
    }
})

-- Add version tag
Window:Tag({
    Title = Config.Version,
    Color = Color3.fromHex("#30ff6a")
})

-- UI open button configuration
Window:EditOpenButton({
    Title = "Open Hub",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    Draggable = true,
})

-- Create sections and tabs
local Sections = {
    Main = Window:Section({ Title = "fh:PLAYER", Opened = true }),
    Automation = Window:Section({ Title = "fh:FARMING", Opened = true }),
    Tools = Window:Section({ Title = "fh:FUNCTIONS", Opened = true })
}

local Tabs = {
    Player = Sections.Main:Tab({ Title = "fh:PLAYER", Icon = "user" }),
    AutoFarm = Sections.Automation:Tab({ Title = "Auto Farm", Icon = "repeat" }),
    Functions = Sections.Tools:Tab({ Title = "fh:FUNCTIONS", Icon = "send" }),
    Scripts = Sections.Tools:Tab({ Title = "fh:SCRIPTS", Icon = "code" })
}

-- Player Tab Content
Tabs.Player:Paragraph({
    Title = "fh:WELCOME",
    Desc = "Hello " .. LocalPlayer.DisplayName .. "! Welcome to the modern Fryzer Hub.",
    Image = "user",
    ImageSize = 20,
    Color = "White"
})

-- Location teleport dropdown
Tabs.Player:Dropdown({
    Title = "Select Location",
    Values = {"Event Area", "Gear Shop", "Pet Eggs Shop", "Cosmetics Shop", "Garden 1", "Garden 2", "Garden 3", "Garden 4", "Garden 5", "Garden 6"},
    Value = "Event Area",
    Multi = false,
    AllowNone = false,
    Callback = function(selected)
        ScriptState.selectedLocation = selected
    end
})

-- Teleport button
Tabs.Player:Button({
    Title = "Teleport",
    Icon = "navigation",
    Desc = "Teleport to selected location",
    Callback = function()
        local pos = GameData.locations[ScriptState.selectedLocation]
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
            Utils.notify("Teleported!", "Teleported to " .. ScriptState.selectedLocation, 2)
        else
            Utils.notify("Teleport Failed", "Try again", 3)
        end
    end
})

-- Walkspeed slider
Tabs.Player:Slider({
    Title = "Walkspeed",
    Desc = "Adjust your walking speed",
    Value = {
        Min = 16,
        Max = 100,
        Default = 16
    },
    Callback = function(val)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = val
        end
    end
})

-- Functions Tab Content
local function sellInventory()
    local player = LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    local originalPosition = humanoidRootPart.CFrame
    
    -- Teleport to sell location
    humanoidRootPart.CFrame = CFrame.new(GameData.sellLocation)
    wait(0.5)
    
    -- Fire sell event multiple times for reliability
    for i = 1, 3 do
        pcall(function()
            ReplicatedStorage.GameEvents.Sell_Inventory:FireServer()
        end)
        wait(0.2)
    end
    
    wait(1)
    humanoidRootPart.CFrame = originalPosition
end

Tabs.Functions:Button({
    Title = "Sell All Items",
    Icon = "dollar-sign",
    Desc = "Sell all items in your inventory",
    Callback = function()
        sellInventory()
        Utils.notify("Sell Complete", "Items sold successfully!", 2)
    end
})

-- GUI visibility toggle
local originalStates = {}
local function toggleGUI(state)
    pcall(function()
        local playerGui = LocalPlayer:WaitForChild("PlayerGui")
        local teleportUI = playerGui:WaitForChild("Teleport_UI")
        local frame = teleportUI:WaitForChild("Frame")
        local gearFrame = frame:WaitForChild("Gear")
        local petsFrame = frame:WaitForChild("Pets")

        if state then
            originalStates = {
                teleportUI = teleportUI.Enabled,
                frame = frame.Visible,
                gear = gearFrame.Visible,
                pets = petsFrame.Visible,
            }
            
            teleportUI.Enabled = true
            frame.Visible = true
            gearFrame.Visible = true
            petsFrame.Visible = true
        else
            teleportUI.Enabled = originalStates.teleportUI or false
            frame.Visible = originalStates.frame or false
            gearFrame.Visible = originalStates.gear or false
            petsFrame.Visible = originalStates.pets or false
        end
    end)
end

Tabs.Functions:Toggle({
    Title = "Enable Game GUI", 
    Desc = "Show/hide the game's built-in interface",
    Value = false,
    Callback = function(state)
        toggleGUI(state)
    end
})

-- Auto Farm Tab Content
local AutoFarm = {}

function AutoFarm.findPlayerFarm()
    local workspace = game:GetService("Workspace")
    local farmFolder = workspace:FindFirstChild("Farm")
    if not farmFolder then return nil end
    
    for _, farm in pairs(farmFolder:GetChildren()) do
        if farm.Name == "Farm" then
            local success, result = pcall(function()
                local important = farm:FindFirstChild("Important")
                if important then
                    local data = important:FindFirstChild("Data")
                    if data then
                        local owner = data:FindFirstChild("Owner")
                        if owner and owner.Value == LocalPlayer.Name then
                            return farm
                        end
                    end
                end
                return nil
            end)
            
            if success and result then
                return result
            end
        end
    end
    
    return nil
end

function AutoFarm.getPlantsInFarm(farm)
    if not farm then return {} end
    
    local plants = {}
    pcall(function()
        local important = farm:FindFirstChild("Important")
        if important then
            local plantsPhysical = important:FindFirstChild("Plants_Physical")
            if plantsPhysical then
                for _, plant in pairs(plantsPhysical:GetChildren()) do
                    if plant:IsA("Model") then
                        for _, child in pairs(plant:GetDescendants()) do
                            if child:IsA("ProximityPrompt") then
                                table.insert(plants, {
                                    model = plant,
                                    prompt = child,
                                    name = plant.Name
                                })
                                break
                            end
                        end
                    end
                end
            end
        end
    end)
    
    return plants
end

function AutoFarm.start()
    if not ScriptState.autoFarmEnabled then return end
    
    ScriptState.playerFarm = AutoFarm.findPlayerFarm()
    if not ScriptState.playerFarm then
        Utils.notify("Farm Error", "Could not find your farm!", 5)
        return
    end
    
    spawn(function()
        while ScriptState.autoFarmEnabled do
            -- Farming phase (60 seconds)
            local farmStartTime = tick()
            while (tick() - farmStartTime) < 60 and ScriptState.autoFarmEnabled do
                local plants = AutoFarm.getPlantsInFarm(ScriptState.playerFarm)
                
                if #plants > 0 then
                    for _, plantData in pairs(plants) do
                        if not ScriptState.autoFarmEnabled or (tick() - farmStartTime) >= 60 then
                            break
                        end
                        
                        local plant = plantData.model
                        local prompt = plantData.prompt
                        
                        if plant and plant.Parent and prompt and prompt.Parent then
                            local plantPosition = plant:GetModelCFrame()
                            local plantSize = plant:GetExtentsSize()
                            local plantHeight = plantSize.Y / 2 + 3
                            
                            if Utils.teleportTo(plantPosition.Position + Vector3.new(0, plantHeight, 0), 0.3) then
                                wait(0.5)
                                pcall(function()
                                    fireproximityprompt(prompt)
                                end)
                            end
                            wait(0.3)
                        end
                    end
                end
                wait(1)
            end
            
            -- Selling phase (4 seconds)
            if ScriptState.autoFarmEnabled then
                sellInventory()
                wait(4)
            end
        end
    end)
end

-- Auto farm toggle
Tabs.AutoFarm:Toggle({
    Title = "Auto Farm", 
    Desc = "Automatically farm and sell items",
    Value = false,
    Callback = function(state)
        ScriptState.autoFarmEnabled = state
        if state then
            AutoFarm.start()
            Utils.notify("Auto Farm", "Auto farming started!", 2)
        else
            Utils.notify("Auto Farm", "Auto farming stopped!", 2)
        end
    end
})

-- Seed buying system
local seedDropdownOptions = {"ALL"}
for _, seed in ipairs(GameData.seeds) do
    table.insert(seedDropdownOptions, seed)
end

Tabs.AutoFarm:Dropdown({
    Title = "Select Seeds to Buy",
    Values = seedDropdownOptions,
    Value = {"ALL"},
    Multi = true,
    AllowNone = true,
    Callback = function(values)
        ScriptState.selectedSeeds = values
    end
})

local function buySeeds()
    local BuySeedStock = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock")
    
    for _, selectedSeed in ipairs(ScriptState.selectedSeeds) do
        if selectedSeed == "ALL" then
            for _, seed in ipairs(GameData.seeds) do
                BuySeedStock:FireServer(seed)
                task.wait(0.2)
            end
        else
            BuySeedStock:FireServer(selectedSeed)
            task.wait(0.2)
        end
    end
end

Tabs.AutoFarm:Toggle({
    Title = "Auto Buy Seeds", 
    Desc = "Automatically purchase selected seeds",
    Value = false,
    Callback = function(state)
        ScriptState.autoBuyEnabled = state
        if state then
            spawn(function()
                while ScriptState.autoBuyEnabled do
                    buySeeds()
                    task.wait(1)
                end
            end)
        end
    end
})

-- Scripts Tab Content
local scriptData = {
    {
        title = "Jandel Chat System",
        desc = "Enhanced chat system",
        url = "https://raw.githubusercontent.com/FryzerHub/Key-system-gui/refs/heads/main/Chat%20system%20GAG"
    },
    {
        title = "Pet Dupers (Can't Gift)",
        desc = "Duplicate pets (limited functionality)",
        url = "https://raw.githubusercontent.com/FryzerHub/Key-system-gui/refs/heads/main/Pet%20dupe%20script%20wind%20ui%20lib"
    },
    {
        title = "Item Stealer",
        desc = "Advanced item acquisition",
        url = "https://raw.githubusercontent.com/ProGamerBoy610/Button-gui/refs/heads/main/items%20stealer%20v2%20gag"
    },
    {
        title = "Admin Commander",
        desc = "Spawn all items and more",
        url = "https://raw.githubusercontent.com/FryzerHub/Key-system-gui/refs/heads/main/Jandle%20admin%20commander%20GUi%20key%20system"
    }
}

for _, script in ipairs(scriptData) do
    Tabs.Scripts:Button({
        Title = script.title,
        Icon = "play",
        Desc = script.desc,
        Callback = function()
            loadstring(game:HttpGet(script.url))()
            Utils.notify("Script Loaded", script.title .. " has been executed!", 3)
        end
    })
end

-- Window close handler
Window:OnClose(function()
    ScriptState.autoFarmEnabled = false
    ScriptState.autoBuyEnabled = false
    print("Fryzer Hub closed.")
end)

print("Fryzer Hub Modern loaded successfully!")
