-- Same initial services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- GUI setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DropdownGUI"
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 250, 0, 50)
mainFrame.Position = UDim2.new(0, 20, 0, 100)
mainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 12)
mainCorner.Parent = mainFrame

local headerFrame = Instance.new("Frame")
headerFrame.Name = "Header"
headerFrame.Size = UDim2.new(1, 0, 0, 50)
headerFrame.Position = UDim2.new(0, 0, 0, 0)
headerFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
headerFrame.BorderSizePixel = 0
headerFrame.Parent = mainFrame

local headerCorner = Instance.new("UICorner")
headerCorner.CornerRadius = UDim.new(0, 12)
headerCorner.Parent = headerFrame

local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "Title"
titleLabel.Size = UDim2.new(1, -50, 1, 0)
titleLabel.Position = UDim2.new(0, 10, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Fryzer Hub"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextScaled = true
titleLabel.Font = Enum.Font.GothamBold
titleLabel.Parent = headerFrame

local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0, 40, 0, 40)
toggleButton.Position = UDim2.new(1, -45, 0, 5)
toggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
toggleButton.BackgroundTransparency = 0
toggleButton.BorderSizePixel = 0
toggleButton.Text = "▼"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.TextScaled = true
toggleButton.Font = Enum.Font.GothamBold
toggleButton.Parent = headerFrame

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 8)
toggleCorner.Parent = toggleButton

local contentFrame = Instance.new("Frame")
contentFrame.Name = "Content"
contentFrame.Size = UDim2.new(1, 0, 0, 200)
contentFrame.Position = UDim2.new(0, 0, 0, 50)
contentFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
contentFrame.BorderSizePixel = 0
contentFrame.Parent = mainFrame

-- Walkspeed toggle
local walkspeedEnabled = false
local walkspeedConnection = nil
local defaultWalkspeed = 16
local boostedWalkspeed = 50

local function updateWalkspeed()
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		player.Character.Humanoid.WalkSpeed = walkspeedEnabled and boostedWalkspeed or defaultWalkspeed
	end
end

local function toggleWalkspeed()
	walkspeedEnabled = not walkspeedEnabled
	if walkspeedEnabled then
		walkspeedConnection = RunService.Heartbeat:Connect(function()
			updateWalkspeed()
		end)
	else
		if walkspeedConnection then walkspeedConnection:Disconnect() walkspeedConnection = nil end
		updateWalkspeed()
	end
	return walkspeedEnabled
end

-- ✅ FIXED Noclip toggle
local noclipEnabled = false
local noclipConnection = nil
local characterConnection = nil

local function applyNoclipToCharacter(char)
	for _, part in ipairs(char:GetDescendants()) do
		if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
			part.CanCollide = not noclipEnabled
		end
	end
end

local function startNoclip()
	if player.Character then applyNoclipToCharacter(player.Character) end
	noclipConnection = RunService.Stepped:Connect(function()
		if noclipEnabled and player.Character then
			applyNoclipToCharacter(player.Character)
		end
	end)
	characterConnection = player.CharacterAdded:Connect(function(char)
		char:WaitForChild("HumanoidRootPart")
		applyNoclipToCharacter(char)
	end)
end

local function stopNoclip()
	if noclipConnection then noclipConnection:Disconnect() noclipConnection = nil end
	if characterConnection then characterConnection:Disconnect() characterConnection = nil end
	if player.Character then
		for _, part in ipairs(player.Character:GetDescendants()) do
			if part:IsA("BasePart") then part.CanCollide = true end
		end
	end
end

local function toggleNoclip()
	noclipEnabled = not noclipEnabled
	if noclipEnabled then startNoclip() else stopNoclip() end
	return noclipEnabled
end

-- Button config (3 shown)
local buttonConfigs = {
	{name = "Speed Boost", color = Color3.fromRGB(50, 50, 50), isToggle = true, action = toggleWalkspeed},
	{name = "Noclip", color = Color3.fromRGB(45, 45, 45), isToggle = true, action = toggleNoclip},
	{name = "Button 3", color = Color3.fromRGB(35, 35, 35), action = function()
		print("Button 3 pressed")
	end}
}

-- Buttons loop (shortened to keep it focused)
for i, config in ipairs(buttonConfigs) do
	local button = Instance.new("TextButton")
	button.Name = "Button" .. i
	button.Size = UDim2.new(1, -20, 0, 35)
	button.Position = UDim2.new(0, 10, 0, (i - 1) * 40 + 5)
	button.BackgroundColor3 = config.color
	button.BorderSizePixel = 0
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.TextScaled = true
	button.Font = Enum.Font.Gotham
	button.Parent = contentFrame

	local buttonCorner = Instance.new("UICorner")
	buttonCorner.CornerRadius = UDim.new(0, 8)
	buttonCorner.Parent = button

	if config.isToggle then
		local checkboxIcon = Instance.new("TextLabel")
		checkboxIcon.Size = UDim2.new(0, 20, 0, 20)
		checkboxIcon.Position = UDim2.new(0, 8, 0.5, -10)
		checkboxIcon.BackgroundTransparency = 1
		checkboxIcon.Text = "☐"
		checkboxIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
		checkboxIcon.TextScaled = true
		checkboxIcon.Font = Enum.Font.GothamBold
		checkboxIcon.Parent = button

		local buttonText = Instance.new("TextLabel")
		buttonText.Size = UDim2.new(1, -35, 1, 0)
		buttonText.Position = UDim2.new(0, 35, 0, 0)
		buttonText.BackgroundTransparency = 1
		buttonText.Text = config.name
		buttonText.TextColor3 = Color3.fromRGB(255, 255, 255)
		buttonText.TextScaled = true
		buttonText.Font = Enum.Font.Gotham
		buttonText.TextXAlignment = Enum.TextXAlignment.Left
		buttonText.Parent = button

		button.Text = ""

		button.MouseButton1Click:Connect(function()
			local success, result = pcall(config.action)
			local toggleState = success and result or false
			if toggleState then
				checkboxIcon.Text = "✓"
				checkboxIcon.TextColor3 = Color3.fromRGB(255, 85, 85)
			else
				checkboxIcon.Text = "☐"
				checkboxIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
			end
		end)

	else
		button.Text = config.name
		button.MouseButton1Click:Connect(function()
			if config.action then
				pcall(config.action)
			end
		end)
	end
end

-- Dropdown toggle
local isOpen = false
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)

local function toggleDropdown()
	isOpen = not isOpen
	local targetSize = isOpen and UDim2.new(0, 250, 0, 210) or UDim2.new(0, 250, 0, 50)
	local targetRotation = isOpen and 180 or 0
	TweenService:Create(mainFrame, tweenInfo, {Size = targetSize}):Play()
	TweenService:Create(toggleButton, tweenInfo, {Rotation = targetRotation}):Play()
end

toggleButton.MouseButton1Click:Connect(toggleDropdown)

-- Drag support
local dragToggle = nil
local dragStart = nil
local startPos = nil

local function updateInput(input)
	local delta = input.Position - dragStart
	local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	TweenService:Create(mainFrame, TweenInfo.new(0.05), {Position = newPos}):Play()
end

headerFrame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragToggle = true
		dragStart = input.Position
		startPos = mainFrame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragToggle = false
			end
		end)
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement and dragToggle then
		updateInput(input)
	end
end)

-- Final log
print("✅ GUI with fixed Noclip loaded!")
