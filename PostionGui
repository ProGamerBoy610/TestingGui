local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- System variables
local isRunning = {}
local originalPlayerPosition
local originalCameraSubject
local searchConnections = {}
local childAddedConnections = {}
local moreSpeedEnabled = {}
local broughtItems = {}
local selectedItems = {Fuel = {}, FoodAndOthers = {}, Scrap = {}, Others = {}}
local itemCategories = {
    Fuel = {"Fuel Canister", "Log", "Oil Barrel"},
    FoodAndOthers = {"Bandage", "MedKit", "Water Bottle", "Apple", "Berry"},
    Scrap = {"Old Radio", "Old Car Engine", "Sheet Metal", "Tyre"},
    Others = {"Defense Blueprint", "Old Flashlight", "Chainsaw", "Rifle Ammo", "Rifle", "Binoculars", "Wolf Corpse", "Compass"}
}
local currentRunning = nil
local cameraPart = nil

-- Helper functions
local function disableInputs()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        humanoid.WalkSpeed = 0
        humanoid.JumpPower = 0
        humanoid.JumpHeight = 0
    end
end

local function enableInputs()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        humanoid.WalkSpeed = 16
        humanoid.JumpPower = 50
        humanoid.JumpHeight = 7.2
    end
end

local function getItemPosition(item)
    if item:IsA("Model") then
        return item.PrimaryPart and item.PrimaryPart.Position or 
               (item:FindFirstChildWhichIsA("BasePart") and item:FindFirstChildWhichIsA("BasePart").Position)
    elseif item:IsA("BasePart") then
        return item.Position
    end
    return nil
end

local function findItems(category)
    local foundItems = {}
    if workspace:FindFirstChild("Items") then
        for _, item in pairs(workspace.Items:GetChildren()) do
            if item.Parent and table.find(selectedItems[category], item.Name) then
                table.insert(foundItems, item)
            end
        end
    end
    return foundItems
end

local function findAllItems()
    local foundItems = {}
    if workspace:FindFirstChild("Items") then
        for _, item in pairs(workspace.Items:GetChildren()) do
            if item.Parent then
                table.insert(foundItems, item)
            end
        end
    end
    return foundItems
end

local function fastDragItem(item, category)
    if not originalPlayerPosition then return false end
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return false end
    if not item.Parent then return false end

    local remoteEvents = ReplicatedStorage:FindFirstChild("RemoteEvents")
    if not remoteEvents then return false end

    local dragEvent = remoteEvents:FindFirstChild("RequestStartDraggingItem")
    local stopDragEvent = remoteEvents:FindFirstChild("StopDraggingItem")
    if not dragEvent or not stopDragEvent then return false end

    local hrp = LocalPlayer.Character.HumanoidRootPart
    local itemPos = getItemPosition(item)
    if not itemPos then return false end

    local teleportHeight = moreSpeedEnabled[category] and 8 or 12
    local approachHeight = moreSpeedEnabled[category] and 0.5 or 1
    local moveHeight = moreSpeedEnabled[category] and 3 or 5
    local steps = moreSpeedEnabled[category] and 2 or 3
    local stepDelay = moreSpeedEnabled[category] and 0.02 or 0.04
    local waitTimes = moreSpeedEnabled[category] and 0.05 or 0.08

    hrp.CFrame = CFrame.new(itemPos + Vector3.new(0, teleportHeight, 0))
    task.wait(waitTimes)

    hrp.CFrame = CFrame.new(itemPos + Vector3.new(0, approachHeight, 0))
    task.wait(waitTimes * 0.5)

    local dragSuccess = pcall(function() 
        dragEvent:FireServer(item)
    end)
    if not dragSuccess then return false end

    task.wait(waitTimes * 0.7)

    local itemPart = item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) or item
    if itemPart then
        local offset = Vector3.new(math.random(-2,2), 10, math.random(-2,2))
        local targetPos = originalPlayerPosition.Position + offset

        for i = 1, steps do
            if not isRunning[category] then break end
            local alpha = i / steps
            local newPos = itemPos:Lerp(targetPos, alpha)
            hrp.CFrame = CFrame.new(newPos + Vector3.new(0, moveHeight, 0))
            pcall(function()
                if itemPart.Parent then
                    itemPart.CFrame = CFrame.new(newPos)
                end
            end)
            task.wait(stepDelay)
        end

        hrp.CFrame = CFrame.new(targetPos + Vector3.new(0, moveHeight, 0))
        pcall(function()
            if itemPart.Parent then
                itemPart.CFrame = CFrame.new(targetPos)
            end
        end)
        task.wait(waitTimes * 0.5)
    end

    local stopSuccess = pcall(function() 
        stopDragEvent:FireServer(item)
    end)
    return stopSuccess
end

local function bringNewItem(item, category)
    if category ~= "All" and not table.find(selectedItems[category], item.Name) then return end
    if not isRunning[category] then return end
    local itemPos = getItemPosition(item)
    if itemPos and originalPlayerPosition then
        local distance = (itemPos - originalPlayerPosition.Position).Magnitude
        local minDistance = moreSpeedEnabled[category] and 10 or 15
        if not broughtItems[item] and distance > minDistance then
            local ok, result = pcall(fastDragItem, item, category)
            if ok and result then
                broughtItems[item] = true
            end
        end
    end
end

local function createCategoryUI(Tab, Rayfield, category)
    local SpeedToggle = Tab:CreateToggle({
        Name = "More Speed Mode",
        Info = "Enable for faster item bringing with optimized timings",
        CurrentValue = false,
        Flag = category .. "SpeedModeToggle",
        Callback = function(Value)
            moreSpeedEnabled[category] = Value
            Rayfield:Notify({
                Title = Value and "More Speed ON" or "Normal Mode",
                Content = Value and "Bringing will be faster!" or "Bringing will be more stable.",
                Duration = 3,
                Image = 4483362458
            })
        end,
    })

    local ItemDropdown = Tab:CreateDropdown({
        Name = "Select Items",
        Options = itemCategories[category],
        CurrentOption = {},
        MultipleOptions = true,
        Flag = category .. "ItemDropdown",
        Callback = function(Selected)
            selectedItems[category] = Selected
        end,
    })

    local BringToggle = Tab:CreateToggle({
        Name = "Bring " .. category .. " Items",
        Info = "Automatically bring selected items from workspace.Items. Do not run multiple categories at once.",
        CurrentValue = false,
        Flag = category .. "BringToggle",
        Callback = function(Value)
            isRunning[category] = Value
            if Value then
                if currentRunning then
                    Rayfield:Notify({
                        Title = "System Busy",
                        Content = "Another category is running. Stop it first.",
                        Duration = 5,
                        Image = 4483362458
                    })
                    isRunning[category] = false
                    return
                end
                currentRunning = category

                if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    Rayfield:Notify({
                        Title = "Character Error",
                        Content = "Character not found! Please respawn and try again.",
                        Duration = 5,
                        Image = 4483362458
                    })
                    isRunning[category] = false
                    currentRunning = nil
                    return
                end

                originalPlayerPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
                broughtItems = {}

                local camera = workspace.CurrentCamera
                originalCameraSubject = camera.CameraSubject

                cameraPart = Instance.new("Part")
                cameraPart.Name = category .. "CameraPart"
                cameraPart.Anchored = true
                cameraPart.CanCollide = false
                cameraPart.Transparency = 1
                cameraPart.CFrame = originalPlayerPosition + Vector3.new(0, 10, 10)
                cameraPart.Parent = workspace
                camera.CameraSubject = cameraPart

                disableInputs()

                local foundItems = findItems(category)
                if #foundItems > 0 then
                    spawn(function()
                        for _, item in pairs(foundItems) do
                            if not isRunning[category] then break end
                            bringNewItem(item, category)
                            task.wait(moreSpeedEnabled[category] and 0.2 or 0.5)
                        end
                    end)
                end

                if workspace:FindFirstChild("Items") then
                    childAddedConnections[category] = workspace.Items.ChildAdded:Connect(function(newItem)
                        if isRunning[category] and table.find(selectedItems[category], newItem.Name) then
                            task.delay(0.1, bringNewItem, newItem, category)
                        end
                    end)
                end

                searchConnections[category] = RunService.Heartbeat:Connect(function()
                    if not isRunning[category] then return end
                    if tick() % 10 < 0.1 then
                        local foundItems = findItems(category)
                        if #foundItems > 0 then
                            spawn(function()
                                for _, item in pairs(foundItems) do
                                    if not isRunning[category] then break end
                                    bringNewItem(item, category)
                                end
                            end)
                        end
                    end
                end)

                Rayfield:Notify({
                    Title = category .. " Bring Active",
                    Content = "Bringing selected " .. category .. " items",
                    Duration = 5,
                    Image = 4483362458
                })
            else
                if searchConnections[category] then
                    searchConnections[category]:Disconnect()
                    searchConnections[category] = nil
                end
                if childAddedConnections[category] then
                    childAddedConnections[category]:Disconnect()
                    childAddedConnections[category] = nil
                end

                local camera = workspace.CurrentCamera
                if originalCameraSubject then
                    camera.CameraSubject = originalCameraSubject
                end
                if cameraPart then
                    cameraPart:Destroy()
                    cameraPart = nil
                end

                enableInputs()

                if originalPlayerPosition and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = originalPlayerPosition
                    Rayfield:Notify({
                        Title = category .. " Position Restored",
                        Content = "Teleported back to starting location",
                        Duration = 3,
                        Image = 4483362458
                    })
                end

                Rayfield:Notify({
                    Title = category .. " Stopped",
                    Content = category .. " bringing deactivated.",
                    Duration = 3,
                    Image = 4483362458
                })
                currentRunning = nil
            end
        end,
    })
end

local function createAllUI(Tab, Rayfield)
    local category = "All"
    local SpeedToggle = Tab:CreateToggle({
        Name = "More Speed Mode",
        Info = "Enable for much faster bringing with optimized timings and reduced steps",
        CurrentValue = false,
        Flag = "SpeedModeToggle",
        Callback = function(Value)
            moreSpeedEnabled[category] = Value
            Rayfield:Notify({
                Title = Value and "More Speed ON" or "Normal Mode",
                Content = Value and "Bringing will be much faster!" or "Bringing will be more stable.",
                Duration = 3,
                Image = 4483362458
            })
        end,
    })

    local BringAllToggle = Tab:CreateToggle({
        Name = "Bring All Items",
        Info = "Automatically bring all items from workspace.Items (real-time detection). Do not run multiple categories at once.",
        CurrentValue = false,
        Flag = "BringAllToggle",
        Callback = function(Value)
            isRunning[category] = Value
            if Value then
                if currentRunning then
                    Rayfield:Notify({
                        Title = "System Busy",
                        Content = "Another category is running. Stop it first.",
                        Duration = 5,
                        Image = 4483362458
                    })
                    isRunning[category] = false
                    return
                end
                currentRunning = category

                if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    Rayfield:Notify({
                        Title = "Character Error",
                        Content = "Character not found! Please respawn and try again.",
                        Duration = 5,
                        Image = 4483362458
                    })
                    isRunning[category] = false
                    currentRunning = nil
                    return
                end

                originalPlayerPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
                broughtItems = {}

                local camera = workspace.CurrentCamera
                originalCameraSubject = camera.CameraSubject

                cameraPart = Instance.new("Part")
                cameraPart.Name = category .. "CameraPart"
                cameraPart.Anchored = true
                cameraPart.CanCollide = false
                cameraPart.Transparency = 1
                cameraPart.CFrame = originalPlayerPosition + Vector3.new(0, 10, 10)
                cameraPart.Parent = workspace
                camera.CameraSubject = cameraPart

                disableInputs()

                local foundItems = findAllItems()
                if #foundItems > 0 then
                    spawn(function()
                        for _, item in pairs(foundItems) do
                            if not isRunning[category] then break end
                            bringNewItem(item, category)
                            task.wait(moreSpeedEnabled[category] and 0.2 or 0.5)
                        end
                    end)
                end

                if workspace:FindFirstChild("Items") then
                    childAddedConnections[category] = workspace.Items.ChildAdded:Connect(function(newItem)
                        if isRunning[category] then
                            task.delay(0.1, bringNewItem, newItem, category)
                        end
                    end)
                end

                searchConnections[category] = RunService.Heartbeat:Connect(function()
                    if not isRunning[category] then return end
                    if tick() % 10 < 0.1 then
                        local foundItems = findAllItems()
                        if #foundItems > 0 then
                            spawn(function()
                                for _, item in pairs(foundItems) do
                                    if not isRunning[category] then break end
                                    bringNewItem(item, category)
                                end
                            end)
                        end
                    end
                end)

                Rayfield:Notify({
                    Title = "Bring All Active",
                    Content = "Real-time bringing of all items",
                    Duration = 5,
                    Image = 4483362458
                })
            else
                if searchConnections[category] then
                    searchConnections[category]:Disconnect()
                    searchConnections[category] = nil
                end
                if childAddedConnections[category] then
                    childAddedConnections[category]:Disconnect()
                    childAddedConnections[category] = nil
                end

                local camera = workspace.CurrentCamera
                if originalCameraSubject then
                    camera.CameraSubject = originalCameraSubject
                end
                if cameraPart then
                    cameraPart:Destroy()
                    cameraPart = nil
                end

                enableInputs()

                if originalPlayerPosition and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = originalPlayerPosition
                    Rayfield:Notify({
                        Title = "Position Restored",
                        Content = "Teleported back to starting location",
                        Duration = 3,
                        Image = 4483362458
                    })
                end

                Rayfield:Notify({
                    Title = "Bring All Stopped",
                    Content = "Bring all system deactivated.",
                    Duration = 3,
                    Image = 4483362458
                })
                currentRunning = nil
            end
        end,
    })

    local EmergencyStopButton = Tab:CreateButton({
        Name = "Emergency Stop",
        Info = "Force stop and return to original position",
        Callback = function()
            if isRunning[category] then
                isRunning[category] = false
                
                if searchConnections[category] then
                    searchConnections[category]:Disconnect()
                    searchConnections[category] = nil
                end
                if childAddedConnections[category] then
                    childAddedConnections[category]:Disconnect()
                    childAddedConnections[category] = nil
                end
                
                local camera = workspace.CurrentCamera
                if originalCameraSubject then
                    camera.CameraSubject = originalCameraSubject
                end
                if cameraPart then
                    cameraPart:Destroy()
                    cameraPart = nil
                end
                
                enableInputs()
                
                if originalPlayerPosition and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = originalPlayerPosition
                end
                
                Rayfield:Notify({
                    Title = "Emergency Stop",
                    Content = "System force stopped and position restored!",
                    Duration = 3,
                    Image = 4483362458
                })
                currentRunning = nil
            else
                Rayfield:Notify({
                    Title = "System Idle",
                    Content = "System is not currently running.",
                    Duration = 3,
                    Image = 4483362458
                })
            end
        end,
    })
end

local function createInfoUI(Tab, Rayfield)
    Tab:CreateLabel("Fryzer Hub Item Bringer")
    Tab:CreateLabel("Join our Discord for updates and support!")

    local DiscordButton = Tab:CreateButton({
        Name = "Join Discord",
        Callback = function()
            local link = "https://discord.gg/SYHphHCq9a"
            if setclipboard then
                setclipboard(link)
                Rayfield:Notify({
                    Title = "Discord Link Copied",
                    Content = "The invite link has been copied to your clipboard!",
                    Duration = 5,
                    Image = 4483362458
                })
            else
                Rayfield:Notify({
                    Title = "Clipboard Not Supported",
                    Content = "Your executor does not support setclipboard. Link: " .. link,
                    Duration = 5,
                    Image = 4483362458
                })
            end
        end,
    })
end

-- Load Rayfield and set up UI
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)
if not success then
    warn("❌ Failed to load Rayfield")
    return
end

local Window = Rayfield:CreateWindow({
    Name = "Item Bringer",
    LoadingTitle = "Loading Item Bringer...",
    LoadingSubtitle = "Fryzer Hub",
})

local tabs = {
    Fuel = Window:CreateTab("Fuel", 4483362458),
    FoodAndOthers = Window:CreateTab("Food & Others", 4483362458),
    Scrap = Window:CreateTab("Scrap", 4483362458),
    Others = Window:CreateTab("Others", 4483362458),
    All = Window:CreateTab("All Items", 4483362458),
    Info = Window:CreateTab("Info", 4483362458)
}

for category, tab in pairs(tabs) do
    if category == "All" then
        createAllUI(tab, Rayfield)
    elseif category == "Info" then
        createInfoUI(tab, Rayfield)
    else
        createCategoryUI(tab, Rayfield, category)
    end
end
