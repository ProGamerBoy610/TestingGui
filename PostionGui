-- Example Usage - Create tabs and components with NEW COMPONENTS
local infoTab = Library:CreateTab("INFO") -- New INFO tab without emoji
local homeTab = Library:CreateTab("HOME")
local specialTab = Library:CreateTab("SPECIAL")
local mainTab = Library:CreateTab("MAIN")
local spawnerTab = Library:CreateTab("SPAWNER")
local destroyTab = Library:CreateTab("DESTROY")
local settingsTab = Library:CreateTab("SETTINGS")

-- Timer variables
local scriptStartTime = tick()
local timerLabel = nil

-- Function to format time
local function FormatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = math.floor(seconds % 60)
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

-- INFO Tab Components (First tab)
Library:CreateTextLabel(infoTab, "Welcome to Fryzer Hub", Config.Colors.Accent)
Library:CreateTextLabel(infoTab, "Player: " .. LocalPlayer.Name, Config.Colors.Text)
timerLabel = Library:CreateTextLabel(infoTab, "Time Used: 00:00:00", Config.Colors.Success)

-- Update timer every second
spawn(function()
    while ScreenGui.Parent do
        wait(1)
        local timeUsed = tick() - scriptStartTime
        if timerLabel and timerLabel.SetText then
            timerLabel.SetText("Time Used: " .. FormatTime(timeUsed))
        end
    end
end)

-- HOME Tab Components with NEW COMPONENTS
Library:CreateLabel(homeTab, "Welcome to Modern Hub!", Config.Colors.Text)
Library:CreateButton(homeTab, "Test Button", function()
    print("Button clicked!")
end)
Library:CreateToggle(homeTab, "Enable Feature", false, function(value)
    print("Toggle:", value)
end)
Library:CreateSlider(homeTab, "Speed", 1, 100, 50, function(value)
    print("Speed set to:", value)
end)
Library:CreateDropdown(homeTab, "Mode", {"Easy", "Normal", "Hard", "Expert"}, "Normal", function(value)
    print("Mode selected:", value)
end)
Library:CreateTextBox(homeTab, "Username", "Enter your username", function(text, enterPressed)
    print("Username:", text, "Enter pressed:", enterPressed)
end)
Library:CreateTextLabel(homeTab, "This is a text label - no click action", Config.Colors.TextSecondary)

-- SPECIAL Tab Components
Library:CreateButton(specialTab, "Special Function", function()
    print("Special function executed!")
end)
Library:CreateToggle(specialTab, "Special Toggle", true, function(value)
    print("Special toggle:", value)
end)
Library:CreateSlider(specialTab, "Power", 0, 200, 100, function(value)
    print("Power:", value)
end)
Library:CreateDropdown(specialTab, "Special Mode", {"Fire", "Water", "Earth", "Air"}, "Fire", function(value)
    print("Special mode:", value)
end)
Library:CreateTextLabel(specialTab, "Special Info: Read-only text display", Config.Colors.Accent)

-- MAIN Tab Components
Library:CreateButton(mainTab, "Main Feature 1", function()
    print("Main feature 1 activated!")
end)
Library:CreateButton(mainTab, "Main Feature 2", function()
    print("Main feature 2 activated!")
end)
Library:CreateToggle(mainTab, "Main Toggle", false, function(value)
    print("Main toggle:", value)
end)
Library:CreateSlider(mainTab, "Volume", 0, 10, 5, function(value)
    print("Volume:", value)
end)
Library:CreateTextBox(mainTab, "Command", "/help", function(text, enterPressed)
    if enterPressed then
        print("Command executed:", text)
    end
end)
Library:CreateTextLabel(mainTab, "Status: All systems operational", Config.Colors.Success)

-- SPAWNER Tab Components
Library:CreateLabel(spawnerTab, "SPAWNER SCRIPT", Config.Colors.Text)
Library:CreateButton(spawnerTab, "Dark Spawner [ Mobile Only ]", function()
    print("Dark Spawner executed!")
end)
Library:CreateToggle(spawnerTab, "ReModified v3.8 || Dark Spawner", true, function(value)
    print("ReModified:", value)
end)
Library:CreateToggle(spawnerTab, "Pet Placer v1.0 [ Not Animated ]", false, function(value)
    print("Pet Placer:", value)
end)
Library:CreateDropdown(spawnerTab, "Pet Type", {"Dog", "Cat", "Bird", "Fish", "Dragon"}, "Dog", function(value)
    print("Pet type:", value)
end)
Library:CreateSlider(spawnerTab, "Spawn Rate", 1, 10, 3, function(value)
    print("Spawn rate:", value)
end)
Library:CreateLabel(spawnerTab, "ALLOW GIFT PET [NEW]", Config.Colors.Primary)
Library:CreateToggle(spawnerTab, "Allow Gift Spawned Pets ^.^", false, function(value)
    print("Allow Gift Pets:", value)
end)
Library:CreateTextLabel(spawnerTab, "Note: Mobile optimized spawner tools", Config.Colors.TextSecondary)

-- DESTROY Tab Components
Library:CreateButton(destroyTab, "Destroy Function 1", function()
    print("Destroy function 1!")
end)
Library:CreateButton(destroyTab, "Destroy Function 2", function()
    print("Destroy function 2!")
end)
Library:CreateToggle(destroyTab, "Auto Destroy", false, function(value)
    print("Auto Destroy:", value)
end)
Library:CreateSlider(destroyTab, "Destroy Range", 10, 500, 100, function(value)
    print("Destroy Range:", value)
end)
Library:CreateDropdown(destroyTab, "Target Type", {"All", "Players", "NPCs", "Objects"}, "All", function(value)
    print("Target type:", value)
end)
Library:CreateTextBox(destroyTab, "Exclude Name", "Enter name to exclude", function(text)
    print("Exclude:", text)
end)
Library:CreateTextLabel(destroyTab, "Warning: Use destroy functions carefully", Config.Colors.Warning)

-- SETTINGS Tab Components
Library:CreateToggle(settingsTab, "Sound Effects", true, function(value)
    print("Sound Effects:", value)
end)
Library:CreateToggle(settingsTab, "Auto Save", false, function(value)
    print("Auto Save:", value)
end)
Library:CreateSlider(settingsTab, "GUI Scale", 0.5, 2.0, 1.0, function(value)
    print("GUI Scale:", value)
    -- You could implement GUI scaling here
end)
Library:CreateDropdown(settingsTab, "Theme", {"Dark", "Light", "Blue", "Green"}, "Dark", function(value)
    print("Theme:", value)
    -- You could implement theme switching here
end)
Library:CreateTextBox(settingsTab, "Save Name", "MyConfig", function(text)
    print("Save name:", text)
end)
Library:CreateButton(settingsTab, "Reset Settings", function()
    print("Settings reset!")
end)
Library:CreateButton(settingsTab, "Export Config", function()
    print("Config exported!")
end)
Library:CreateTextLabel(settingsTab, "Version: 1.0.0 | Build: 2024.1", Config.Colors.TextSecondary)

print("ðŸŽ‰ Modern Hub GUI loaded successfully!")
print("ðŸ“± Use the circle toggle to show/hide the GUI")
print("ðŸ†• New components: Slider, Dropdown, TextBox added!")

return Library-- Modern Hub GUI for Roblox Executor (Updated with Text Labels and New Components)
-- Compatible with Fryzer Circle Toggle - FIXED VERSION

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Remove existing GUI if it exists
if PlayerGui:FindFirstChild("ModernHubGUI") then
    PlayerGui:FindFirstChild("ModernHubGUI"):Destroy()
end

-- Configuration
local Config = {
    Colors = {
        Primary = Color3.fromRGB(15, 15, 20),
        Secondary = Color3.fromRGB(25, 25, 35),
        Accent = Color3.fromRGB(88, 101, 242),
        AccentHover = Color3.fromRGB(104, 117, 255),
        Success = Color3.fromRGB(67, 181, 129),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 190),
        Border = Color3.fromRGB(45, 45, 55),
        Shadow = Color3.fromRGB(0, 0, 0),
        TabActive = Color3.fromRGB(70, 85, 220),
        Warning = Color3.fromRGB(255, 140, 66),
        Error = Color3.fromRGB(237, 66, 69),
        StrokeGreen = Color3.fromRGB(0, 255, 0)
    },
    Animations = {
        Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quad),
        Normal = TweenInfo.new(0.3, Enum.EasingStyle.Quad),
        Slow = TweenInfo.new(0.5, Enum.EasingStyle.Quad),
        Bounce = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    }
}

-- Create Library
local Library = {}
Library.Tabs = {}
Library.CurrentTab = nil
Library.IsMinimized = false -- Track minimize state

-- Create Main ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ModernHubGUI"
ScreenGui.Parent = PlayerGui
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.DisplayOrder = 100
ScreenGui.Enabled = true

-- Create Main Frame (Much Smaller)
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Config.Colors.Primary
MainFrame.BorderSizePixel = 0
MainFrame.Size = UDim2.new(0, 450, 0, 300) -- Much smaller size
MainFrame.Position = UDim2.new(0.5, -225, 0.5, -150)
MainFrame.Active = true
MainFrame.Draggable = true

-- Add corner rounding (REMOVED UICorner for cleaner look)
local MainStroke = Instance.new("UIStroke")
MainStroke.Color = Config.Colors.StrokeGreen
MainStroke.Thickness = 2
MainStroke.Parent = MainFrame

-- Header Frame
local HeaderFrame = Instance.new("Frame")
HeaderFrame.Name = "Header"
HeaderFrame.Parent = MainFrame
HeaderFrame.BackgroundColor3 = Config.Colors.Secondary
HeaderFrame.BorderSizePixel = 0
HeaderFrame.Size = UDim2.new(1, 0, 0, 40) -- Smaller header
HeaderFrame.Position = UDim2.new(0, 0, 0, 0)

local HeaderCorner = Instance.new("UICorner")
HeaderCorner.CornerRadius = UDim.new(0, 0) -- Removed corner rounding
HeaderCorner.Parent = HeaderFrame

-- Fix header corners (only top corners rounded)
local HeaderFix = Instance.new("Frame")
HeaderFix.Parent = HeaderFrame
HeaderFix.BackgroundColor3 = Config.Colors.Secondary
HeaderFix.BorderSizePixel = 0
HeaderFix.Size = UDim2.new(1, 0, 0, 10)
HeaderFix.Position = UDim2.new(0, 0, 1, -10)

-- Title Label
local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "Title"
TitleLabel.Parent = HeaderFrame
TitleLabel.BackgroundTransparency = 1
TitleLabel.Size = UDim2.new(1, -80, 0, 20)
TitleLabel.Position = UDim2.new(0, 10, 0, 2)
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.Text = "MODERN HUB"
TitleLabel.TextColor3 = Config.Colors.Text
TitleLabel.TextSize = 14
TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Subtitle Label
local SubtitleLabel = Instance.new("TextLabel")
SubtitleLabel.Name = "Subtitle"
SubtitleLabel.Parent = HeaderFrame
SubtitleLabel.BackgroundTransparency = 1
SubtitleLabel.Size = UDim2.new(1, -80, 0, 12)
SubtitleLabel.Position = UDim2.new(0, 10, 0, 22)
SubtitleLabel.Font = Enum.Font.Gotham
SubtitleLabel.Text = "Advanced Script Hub"
SubtitleLabel.TextColor3 = Config.Colors.TextSecondary
SubtitleLabel.TextSize = 10
SubtitleLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Control Buttons Container
local ControlsFrame = Instance.new("Frame")
ControlsFrame.Name = "Controls"
ControlsFrame.Parent = HeaderFrame
ControlsFrame.BackgroundTransparency = 1
ControlsFrame.Size = UDim2.new(0, 60, 1, 0)
ControlsFrame.Position = UDim2.new(1, -65, 0, 0)

-- Minimize Button
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = ControlsFrame
MinimizeButton.BackgroundTransparency = 1
MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
MinimizeButton.Position = UDim2.new(0, 0, 0.5, -12.5)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Text = "âˆ’"
MinimizeButton.TextColor3 = Config.Colors.Text
MinimizeButton.TextSize = 16

-- Close Button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = ControlsFrame
CloseButton.BackgroundTransparency = 1
CloseButton.Size = UDim2.new(0, 25, 0, 25)
CloseButton.Position = UDim2.new(0, 30, 0.5, -12.5)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "Ã—"
CloseButton.TextColor3 = Config.Colors.Text
CloseButton.TextSize = 16

-- Content Container
local ContentFrame = Instance.new("Frame")
ContentFrame.Name = "Content"
ContentFrame.Parent = MainFrame
ContentFrame.BackgroundTransparency = 1
ContentFrame.Size = UDim2.new(1, 0, 1, -40)
ContentFrame.Position = UDim2.new(0, 0, 0, 40)

-- Left Sidebar for Tabs (Smaller)
local SidebarFrame = Instance.new("Frame")
SidebarFrame.Name = "Sidebar"
SidebarFrame.Parent = ContentFrame
SidebarFrame.BackgroundColor3 = Config.Colors.Secondary
SidebarFrame.BorderSizePixel = 0
SidebarFrame.Size = UDim2.new(0, 120, 1, 0) -- Smaller sidebar
SidebarFrame.Position = UDim2.new(0, 0, 0, 0)

-- Add green stroke to sidebar
local SidebarStroke = Instance.new("UIStroke")
SidebarStroke.Color = Config.Colors.StrokeGreen
SidebarStroke.Thickness = 1
SidebarStroke.Parent = SidebarFrame

-- Sidebar ScrollingFrame
local TabScrollFrame = Instance.new("ScrollingFrame")
TabScrollFrame.Name = "TabScroll"
TabScrollFrame.Parent = SidebarFrame
TabScrollFrame.BackgroundTransparency = 1
TabScrollFrame.Size = UDim2.new(1, -8, 1, -8)
TabScrollFrame.Position = UDim2.new(0, 4, 0, 4)
TabScrollFrame.ScrollBarThickness = 3
TabScrollFrame.ScrollBarImageColor3 = Config.Colors.StrokeGreen
TabScrollFrame.BorderSizePixel = 0
TabScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

-- Tab Layout
local TabLayout = Instance.new("UIListLayout")
TabLayout.Parent = TabScrollFrame
TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabLayout.Padding = UDim.new(0, 3)

-- Right Content Area
local ContentContainer = Instance.new("Frame")
ContentContainer.Name = "ContentContainer"
ContentContainer.Parent = ContentFrame
ContentContainer.BackgroundColor3 = Config.Colors.Primary
ContentContainer.BorderSizePixel = 0
ContentContainer.Size = UDim2.new(1, -120, 1, 0)
ContentContainer.Position = UDim2.new(0, 120, 0, 0)

-- Add green stroke to content area
local ContentStroke = Instance.new("UIStroke")
ContentStroke.Color = Config.Colors.StrokeGreen
ContentStroke.Thickness = 1
ContentStroke.Parent = ContentContainer

-- Content ScrollingFrame
local ContentScrollFrame = Instance.new("ScrollingFrame")
ContentScrollFrame.Name = "ContentScroll"
ContentScrollFrame.Parent = ContentContainer
ContentScrollFrame.BackgroundTransparency = 1
ContentScrollFrame.Size = UDim2.new(1, -16, 1, -16)
ContentScrollFrame.Position = UDim2.new(0, 8, 0, 8)
ContentScrollFrame.ScrollBarThickness = 3
ContentScrollFrame.ScrollBarImageColor3 = Config.Colors.StrokeGreen
ContentScrollFrame.BorderSizePixel = 0
ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

-- Content Layout
local ContentLayout = Instance.new("UIListLayout")
ContentLayout.Parent = ContentScrollFrame
ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
ContentLayout.Padding = UDim.new(0, 6)

-- FUNCTION: Update Circle Toggle State (TO BE CALLED FROM CIRCLE TOGGLE)
function Library:UpdateCircleToggleState(isVisible)
    -- This function should be called from your circle toggle script
    -- when the hub visibility changes
    -- You need to add this call in your circle toggle code
end

-- Functions
function Library:CreateTab(name, icon)
    local Tab = {}
    Tab.Name = name
    Tab.Components = {}
    
    -- Create Tab Button
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name
    TabButton.Parent = TabScrollFrame
    TabButton.BackgroundColor3 = Config.Colors.Primary
    TabButton.BorderSizePixel = 0
    TabButton.Size = UDim2.new(1, 0, 0, 30) -- Smaller tab buttons
    TabButton.Font = Enum.Font.Gotham
    TabButton.Text = (icon and icon .. " " or "") .. name
    TabButton.TextColor3 = Config.Colors.TextSecondary
    TabButton.TextSize = 11
    TabButton.TextXAlignment = Enum.TextXAlignment.Center
    
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 6)
    TabCorner.Parent = TabButton
    
    -- Create Tab Content Frame
    local TabContent = Instance.new("Frame")
    TabContent.Name = name .. "Content"
    TabContent.Parent = ContentScrollFrame
    TabContent.BackgroundTransparency = 1
    TabContent.Size = UDim2.new(1, 0, 0, 0)
    TabContent.Visible = false
    TabContent.LayoutOrder = #Library.Tabs + 1
    
    local TabContentLayout = Instance.new("UIListLayout")
    TabContentLayout.Parent = TabContent
    TabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabContentLayout.Padding = UDim.new(0, 5)
    
    -- Update tab content size when items are added
    TabContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabContent.Size = UDim2.new(1, 0, 0, TabContentLayout.AbsoluteContentSize.Y)
        ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y)
    end)
    
    -- Tab Selection Logic
    TabButton.MouseButton1Click:Connect(function()
        Library:SelectTab(Tab)
    end)
    
    -- Hover Effects
    TabButton.MouseEnter:Connect(function()
        if Library.CurrentTab ~= Tab then
            TweenService:Create(TabButton, Config.Animations.Fast, {
                BackgroundColor3 = Config.Colors.Border,
                TextColor3 = Config.Colors.Text
            }):Play()
        end
    end)
    
    TabButton.MouseLeave:Connect(function()
        if Library.CurrentTab ~= Tab then
            TweenService:Create(TabButton, Config.Animations.Fast, {
                BackgroundColor3 = Config.Colors.Primary,
                TextColor3 = Config.Colors.TextSecondary
            }):Play()
        end
    end)
    
    Tab.Button = TabButton
    Tab.Content = TabContent
    Tab.Layout = TabContentLayout
    
    table.insert(Library.Tabs, Tab)
    
    -- Auto-select first tab
    if #Library.Tabs == 1 then
        Library:SelectTab(Tab)
    end
    
    -- Update canvas size
    TabScrollFrame.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
    TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabScrollFrame.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
    end)
    
    return Tab
end

function Library:SelectTab(tab)
    -- Deselect current tab
    if Library.CurrentTab then
        TweenService:Create(Library.CurrentTab.Button, Config.Animations.Normal, {
            BackgroundColor3 = Config.Colors.Primary,
            TextColor3 = Config.Colors.TextSecondary
        }):Play()
        Library.CurrentTab.Content.Visible = false
    end
    
    -- Select new tab
    Library.CurrentTab = tab
    TweenService:Create(tab.Button, Config.Animations.Normal, {
        BackgroundColor3 = Config.Colors.TabActive,
        TextColor3 = Config.Colors.Text
    }):Play()
    tab.Content.Visible = true
    
    -- Update content canvas size
    ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y)
end

-- Component Creation Functions
function Library:CreateButton(tab, text, callback)
    local Button = Instance.new("TextButton")
    Button.Name = text
    Button.Parent = tab.Content
    Button.BackgroundColor3 = Config.Colors.Secondary
    Button.BorderSizePixel = 0
    Button.Size = UDim2.new(1, 0, 0, 28) -- Smaller buttons
    Button.Font = Enum.Font.Gotham
    Button.Text = text
    Button.TextColor3 = Config.Colors.Text
    Button.TextSize = 11
    Button.LayoutOrder = #tab.Components + 1
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 4)
    ButtonCorner.Parent = Button
    
    -- Add green stroke
    local ButtonStroke = Instance.new("UIStroke")
    ButtonStroke.Color = Config.Colors.StrokeGreen
    ButtonStroke.Thickness = 1
    ButtonStroke.Parent = Button
    
    -- Status indicator
    local StatusBox = Instance.new("Frame")
    StatusBox.Name = "StatusBox"
    StatusBox.Parent = Button
    StatusBox.BackgroundColor3 = Config.Colors.Border
    StatusBox.BorderSizePixel = 0
    StatusBox.Size = UDim2.new(0, 16, 0, 16)
    StatusBox.Position = UDim2.new(1, -20, 0.5, -8)
    
    local StatusCorner = Instance.new("UICorner")
    StatusCorner.CornerRadius = UDim.new(0, 3)
    StatusCorner.Parent = StatusBox
    
    -- Button functionality
    Button.MouseButton1Click:Connect(function()
        -- Green flash effect
        TweenService:Create(StatusBox, Config.Animations.Fast, {
            BackgroundColor3 = Config.Colors.Success
        }):Play()
        
        -- Call callback if provided
        if callback then
            callback()
        end
        
        -- Return to normal after 1 second
        spawn(function()
            wait(1)
            TweenService:Create(StatusBox, Config.Animations.Normal, {
                BackgroundColor3 = Config.Colors.Border
            }):Play()
        end)
    end)
    
    -- Hover effects
    Button.MouseEnter:Connect(function()
        TweenService:Create(Button, Config.Animations.Fast, {
            BackgroundColor3 = Config.Colors.Border
        }):Play()
    end)
    
    Button.MouseLeave:Connect(function()
        TweenService:Create(Button, Config.Animations.Fast, {
            BackgroundColor3 = Config.Colors.Secondary
        }):Play()
    end)
    
    table.insert(tab.Components, Button)
    
    -- Update tab content size
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Content.Size = UDim2.new(1, 0, 0, tab.Layout.AbsoluteContentSize.Y)
        ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y)
    end)
    
    return Button
end

function Library:CreateToggle(tab, text, default, callback)
    local Toggle = Instance.new("Frame")
    Toggle.Name = text
    Toggle.Parent = tab.Content
    Toggle.BackgroundColor3 = Config.Colors.Secondary
    Toggle.BorderSizePixel = 0
    Toggle.Size = UDim2.new(1, 0, 0, 28) -- Smaller toggles
    Toggle.LayoutOrder = #tab.Components + 1
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 4)
    ToggleCorner.Parent = Toggle
    
    -- Add green stroke
    local ToggleStroke = Instance.new("UIStroke")
    ToggleStroke.Color = Config.Colors.StrokeGreen
    ToggleStroke.Thickness = 1
    ToggleStroke.Parent = Toggle
    
    local ToggleLabel = Instance.new("TextLabel")
    ToggleLabel.Parent = Toggle
    ToggleLabel.BackgroundTransparency = 1
    ToggleLabel.Size = UDim2.new(1, -45, 1, 0)
    ToggleLabel.Position = UDim2.new(0, 8, 0, 0)
    ToggleLabel.Font = Enum.Font.Gotham
    ToggleLabel.Text = text
    ToggleLabel.TextColor3 = Config.Colors.Text
    ToggleLabel.TextSize = 11
    ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Parent = Toggle
    ToggleButton.BackgroundTransparency = 1
    ToggleButton.Size = UDim2.new(1, 0, 1, 0)
    ToggleButton.Text = ""
    
    local StatusBox = Instance.new("Frame")
    StatusBox.Name = "StatusBox"
    StatusBox.Parent = Toggle
    StatusBox.BackgroundColor3 = default and Config.Colors.Success or Config.Colors.Border
    StatusBox.BorderSizePixel = 0
    StatusBox.Size = UDim2.new(0, 16, 0, 16)
    StatusBox.Position = UDim2.new(1, -20, 0.5, -8)
    
    local StatusCorner = Instance.new("UICorner")
    StatusCorner.CornerRadius = UDim.new(0, 3)
    StatusCorner.Parent = StatusBox
    
    local isToggled = default or false
    
    ToggleButton.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        
        TweenService:Create(StatusBox, Config.Animations.Normal, {
            BackgroundColor3 = isToggled and Config.Colors.Success or Config.Colors.Border
        }):Play()
        
        if callback then
            callback(isToggled)
        end
    end)
    
    -- Hover effects
    ToggleButton.MouseEnter:Connect(function()
        TweenService:Create(Toggle, Config.Animations.Fast, {
            BackgroundColor3 = Config.Colors.Border
        }):Play()
    end)
    
    ToggleButton.MouseLeave:Connect(function()
        TweenService:Create(Toggle, Config.Animations.Fast, {
            BackgroundColor3 = Config.Colors.Secondary
        }):Play()
    end)
    
    table.insert(tab.Components, Toggle)
    
    -- Update tab content size
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Content.Size = UDim2.new(1, 0, 0, tab.Layout.AbsoluteContentSize.Y)
        ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y)
    end)
    
    return {Toggle = Toggle, SetValue = function(value) isToggled = value StatusBox.BackgroundColor3 = value and Config.Colors.Success or Config.Colors.Border end}
end

-- NEW COMPONENT: Slider
function Library:CreateSlider(tab, text, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Name = text
    SliderFrame.Parent = tab.Content
    SliderFrame.BackgroundColor3 = Config.Colors.Secondary
    SliderFrame.BorderSizePixel = 0
    SliderFrame.Size = UDim2.new(1, 0, 0, 45)
    SliderFrame.LayoutOrder = #tab.Components + 1
    
    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 4)
    SliderCorner.Parent = SliderFrame
    
    local SliderStroke = Instance.new("UIStroke")
    SliderStroke.Color = Config.Colors.StrokeGreen
    SliderStroke.Thickness = 1
    SliderStroke.Parent = SliderFrame
    
    -- Label
    local SliderLabel = Instance.new("TextLabel")
    SliderLabel.Parent = SliderFrame
    SliderLabel.BackgroundTransparency = 1
    SliderLabel.Size = UDim2.new(1, -60, 0, 15)
    SliderLabel.Position = UDim2.new(0, 8, 0, 5)
    SliderLabel.Font = Enum.Font.Gotham
    SliderLabel.Text = text
    SliderLabel.TextColor3 = Config.Colors.Text
    SliderLabel.TextSize = 10
    SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Value Label
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Parent = SliderFrame
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Size = UDim2.new(0, 50, 0, 15)
    ValueLabel.Position = UDim2.new(1, -55, 0, 5)
    ValueLabel.Font = Enum.Font.GothamBold
    ValueLabel.Text = tostring(default or min)
    ValueLabel.TextColor3 = Config.Colors.Accent
    ValueLabel.TextSize = 10
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    
    -- Slider Track
    local SliderTrack = Instance.new("Frame")
    SliderTrack.Parent = SliderFrame
    SliderTrack.BackgroundColor3 = Config.Colors.Border
    SliderTrack.BorderSizePixel = 0
    SliderTrack.Size = UDim2.new(1, -16, 0, 4)
    SliderTrack.Position = UDim2.new(0, 8, 1, -12)
    
    local TrackCorner = Instance.new("UICorner")
    TrackCorner.CornerRadius = UDim.new(0, 2)
    TrackCorner.Parent = SliderTrack
    
    -- Slider Fill
    local SliderFill = Instance.new("Frame")
    SliderFill.Parent = SliderTrack
    SliderFill.BackgroundColor3 = Config.Colors.Accent
    SliderFill.BorderSizePixel = 0
    SliderFill.Size = UDim2.new(0, 0, 1, 0)
    
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 2)
    FillCorner.Parent = SliderFill
    
    -- Slider Handle
    local SliderHandle = Instance.new("Frame")
    SliderHandle.Parent = SliderTrack
    SliderHandle.BackgroundColor3 = Config.Colors.Text
    SliderHandle.BorderSizePixel = 0
    SliderHandle.Size = UDim2.new(0, 12, 0, 12)
    SliderHandle.Position = UDim2.new(0, -4, 0.5, -6)
    
    local HandleCorner = Instance.new("UICorner")
    HandleCorner.CornerRadius = UDim.new(0, 6)
    HandleCorner.Parent = SliderHandle
    
    -- Slider Logic
    local currentValue = default or min
    local dragging = false
    
    local function UpdateSlider(value)
        currentValue = math.clamp(value, min, max)
        local percentage = (currentValue - min) / (max - min)
        
        SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
        SliderHandle.Position = UDim2.new(percentage, -6, 0.5, -6)
        ValueLabel.Text = tostring(math.floor(currentValue * 100) / 100)
        
        if callback then
            callback(currentValue)
        end
    end
    
    local function GetMousePosition()
        local mouse = UserInputService:GetMouseLocation()
        return mouse.X
    end
    
    SliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            local mouseX = GetMousePosition()
            local relativeX = mouseX - SliderTrack.AbsolutePosition.X
            local percentage = math.clamp(relativeX / SliderTrack.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percentage
            UpdateSlider(value)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local mouseX = GetMousePosition()
            local relativeX = mouseX - SliderTrack.AbsolutePosition.X
            local percentage = math.clamp(relativeX / SliderTrack.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percentage
            UpdateSlider(value)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    -- Initialize
    UpdateSlider(currentValue)
    
    table.insert(tab.Components, SliderFrame)
    
    -- Update tab content size
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Content.Size = UDim2.new(1, 0, 0, tab.Layout.AbsoluteContentSize.Y)
        ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y)
    end)
    
    return {Slider = SliderFrame, SetValue = UpdateSlider, GetValue = function() return currentValue end}
end

-- NEW COMPONENT: Dropdown
function Library:CreateDropdown(tab, text, options, default, callback)
    local DropdownFrame = Instance.new("Frame")
    DropdownFrame.Name = text
    DropdownFrame.Parent = tab.Content
    DropdownFrame.BackgroundColor3 = Config.Colors.Secondary
    DropdownFrame.BorderSizePixel = 0
    DropdownFrame.Size = UDim2.new(1, 0, 0, 28)
    DropdownFrame.LayoutOrder = #tab.Components + 1
    
    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = UDim.new(0, 4)
    DropdownCorner.Parent = DropdownFrame
    
    local DropdownStroke = Instance.new("UIStroke")
    DropdownStroke.Color = Config.Colors.StrokeGreen
    DropdownStroke.Thickness = 1
    DropdownStroke.Parent = DropdownFrame
    
    -- Main Button
    local DropdownButton = Instance.new("TextButton")
    DropdownButton.Parent = DropdownFrame
    DropdownButton.BackgroundTransparency = 1
    DropdownButton.Size = UDim2.new(1, 0, 1, 0)
    DropdownButton.Font = Enum.Font.Gotham
    DropdownButton.Text = text .. ": " .. (default or options[1] or "None")
    DropdownButton.TextColor3 = Config.Colors.Text
    DropdownButton.TextSize = 11
    DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    DropdownButton.TextTruncate = Enum.TextTruncate.AtEnd
    
    -- Arrow Icon
    local ArrowIcon = Instance.new("TextLabel")
    ArrowIcon.Parent = DropdownFrame
    ArrowIcon.BackgroundTransparency = 1
    ArrowIcon.Size = UDim2.new(0, 20, 1, 0)
    ArrowIcon.Position = UDim2.new(1, -25, 0, 0)
    ArrowIcon.Font = Enum.Font.GothamBold
    ArrowIcon.Text = "â–¼"
    ArrowIcon.TextColor3 = Config.Colors.TextSecondary
    ArrowIcon.TextSize = 10
    ArrowIcon.TextXAlignment = Enum.TextXAlignment.Center
    
    -- Options Container (Initially hidden)
    local OptionsContainer = Instance.new("Frame")
    OptionsContainer.Name = "OptionsContainer"
    OptionsContainer.Parent = DropdownFrame
    OptionsContainer.BackgroundColor3 = Config.Colors.Primary
    OptionsContainer.BorderSizePixel = 0
    OptionsContainer.Size = UDim2.new(1, 0, 0, 0)
    OptionsContainer.Position = UDim2.new(0, 0, 1, 2)
    OptionsContainer.Visible = false
    OptionsContainer.ZIndex = 10
    
    local OptionsCorner = Instance.new("UICorner")
    OptionsCorner.CornerRadius = UDim.new(0, 4)
    OptionsCorner.Parent = OptionsContainer
    
    local OptionsStroke = Instance.new("UIStroke")
    OptionsStroke.Color = Config.Colors.StrokeGreen
    OptionsStroke.Thickness = 1
    OptionsStroke.Parent = OptionsContainer
    
    -- Options ScrollFrame
    local OptionsScroll = Instance.new("ScrollingFrame")
    OptionsScroll.Parent = OptionsContainer
    OptionsScroll.BackgroundTransparency = 1
    OptionsScroll.Size = UDim2.new(1, -4, 1, -4)
    OptionsScroll.Position = UDim2.new(0, 2, 0, 2)
    OptionsScroll.ScrollBarThickness = 2
    OptionsScroll.ScrollBarImageColor3 = Config.Colors.StrokeGreen
    OptionsScroll.BorderSizePixel = 0
    OptionsScroll.CanvasSize = UDim2.new(0, 0, 0, #options * 25)
    
    local OptionsLayout = Instance.new("UIListLayout")
    OptionsLayout.Parent = OptionsScroll
    OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    OptionsLayout.Padding = UDim.new(0, 1)
    
    local currentValue = default or options[1] or "None"
    local isOpen = false
    
    -- Create option buttons
    for i, option in ipairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Parent = OptionsScroll
        OptionButton.BackgroundColor3 = Config.Colors.Secondary
        OptionButton.BorderSizePixel = 0
        OptionButton.Size = UDim2.new(1, 0, 0, 24)
        OptionButton.Font = Enum.Font.Gotham
        OptionButton.Text = option
        OptionButton.TextColor3 = Config.Colors.Text
        OptionButton.TextSize = 10
        OptionButton.TextXAlignment = Enum.TextXAlignment.Left
        OptionButton.LayoutOrder = i
        
        local OptionCorner = Instance.new("UICorner")
        OptionCorner.CornerRadius = UDim.new(0, 3)
        OptionCorner.Parent = OptionButton
        
        -- Highlight current selection
        if option == currentValue then
            OptionButton.BackgroundColor3 = Config.Colors.Accent
        end
        
        -- Option button functionality
        OptionButton.MouseButton1Click:Connect(function()
            currentValue = option
            DropdownButton.Text = text .. ": " .. option
            
            -- Update all option buttons
            for _, child in ipairs(OptionsScroll:GetChildren()) do
                if child:IsA("TextButton") then
                    child.BackgroundColor3 = Config.Colors.Secondary
                end
            end
            OptionButton.BackgroundColor3 = Config.Colors.Accent
            
            -- Close dropdown
            isOpen = false
            TweenService:Create(OptionsContainer, Config.Animations.Fast, {
                Size = UDim2.new(1, 0, 0, 0)
            }):Play()
            TweenService:Create(ArrowIcon, Config.Animations.Fast, {
                Rotation = 0
            }):Play()
            
            wait(0.15)
            OptionsContainer.Visible = false
            
            if callback then
                callback(option)
            end
        end)
        
        -- Hover effects
        OptionButton.MouseEnter:Connect(function()
            if option ~= currentValue then
                TweenService:Create(OptionButton, Config.Animations.Fast, {
                    BackgroundColor3 = Config.Colors.Border
                }):Play()
            end
        end)
        
        OptionButton.MouseLeave:Connect(function()
            if option ~= currentValue then
                TweenService:Create(OptionButton, Config.Animations.Fast, {
                    BackgroundColor3 = Config.Colors.Secondary
                }):Play()
            end
        end)
    end
    
    -- Dropdown toggle functionality
    DropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        
        if isOpen then
            OptionsContainer.Visible = true
            OptionsContainer.Size = UDim2.new(1, 0, 0, 0)
            TweenService:Create(OptionsContainer, Config.Animations.Normal, {
                Size = UDim2.new(1, 0, 0, math.min(#options * 25 + 4, 100))
            }):Play()
            TweenService:Create(ArrowIcon, Config.Animations.Fast, {
                Rotation = 180
            }):Play()
        else
            TweenService:Create(OptionsContainer, Config.Animations.Fast, {
                Size = UDim2.new(1, 0, 0, 0)
            }):Play()
            TweenService:Create(ArrowIcon, Config.Animations.Fast, {
                Rotation = 0
            }):Play()
            
            wait(0.15)
            OptionsContainer.Visible = false
        end
    end)
    
    -- Hover effects for main button
    DropdownButton.MouseEnter:Connect(function()
        TweenService:Create(DropdownFrame, Config.Animations.Fast, {
            BackgroundColor3 = Config.Colors.Border
        }):Play()
    end)
    
    DropdownButton.MouseLeave:Connect(function()
        TweenService:Create(DropdownFrame, Config.Animations.Fast, {
            BackgroundColor3 = Config.Colors.Secondary
        }):Play()
    end)
    
    table.insert(tab.Components, DropdownFrame)
    
    -- Update tab content size
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Content.Size = UDim2.new(1, 0, 0, tab.Layout.AbsoluteContentSize.Y)
        ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y)
    end)
    
    return {
        Dropdown = DropdownFrame, 
        SetValue = function(value) 
            currentValue = value 
            DropdownButton.Text = text .. ": " .. value
            -- Update option buttons
            for _, child in ipairs(OptionsScroll:GetChildren()) do
                if child:IsA("TextButton") then
                    child.BackgroundColor3 = child.Text == value and Config.Colors.Accent or Config.Colors.Secondary
                end
            end
        end,
        GetValue = function() return currentValue end
    }
end

-- NEW COMPONENT: TextBox
function Library:CreateTextBox(tab, text, placeholder, callback)
    local TextBoxFrame = Instance.new("Frame")
    TextBoxFrame.Name = text
    TextBoxFrame.Parent = tab.Content
    TextBoxFrame.BackgroundColor3 = Config.Colors.Secondary
    TextBoxFrame.BorderSizePixel = 0
    TextBoxFrame.Size = UDim2.new(1, 0, 0, 45)
    TextBoxFrame.LayoutOrder = #tab.Components + 1
    
    local TextBoxCorner = Instance.new("UICorner")
    TextBoxCorner.CornerRadius = UDim.new(0, 4)
    TextBoxCorner.Parent = TextBoxFrame
    
    local TextBoxStroke = Instance.new("UIStroke")
    TextBoxStroke.Color = Config.Colors.StrokeGreen
    TextBoxStroke.Thickness = 1
    TextBoxStroke.Parent = TextBoxFrame
    
    -- Label
    local TextBoxLabel = Instance.new("TextLabel")
    TextBoxLabel.Parent = TextBoxFrame
    TextBoxLabel.BackgroundTransparency = 1
    TextBoxLabel.Size = UDim2.new(1, -16, 0, 15)
    TextBoxLabel.Position = UDim2.new(0, 8, 0, 5)
    TextBoxLabel.Font = Enum.Font.Gotham
    TextBoxLabel.Text = text
    TextBoxLabel.TextColor3 = Config.Colors.Text
    TextBoxLabel.TextSize = 10
    TextBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- TextBox Input
    local TextBoxInput = Instance.new("TextBox")
    TextBoxInput.Parent = TextBoxFrame
    TextBoxInput.BackgroundColor3 = Config.Colors.Primary
    TextBoxInput.BorderSizePixel = 0
    TextBoxInput.Size = UDim2.new(1, -16, 0, 20)
    TextBoxInput.Position = UDim2.new(0, 8, 1, -25)
    TextBoxInput.Font = Enum.Font.Gotham
    TextBoxInput.PlaceholderText = placeholder or "Enter text..."
    TextBoxInput.PlaceholderColor3 = Config.Colors.TextSecondary
    TextBoxInput.Text = ""
    TextBoxInput.TextColor3 = Config.Colors.Text
    TextBoxInput.TextSize = 10
    TextBoxInput.TextXAlignment = Enum.TextXAlignment.Left
    TextBoxInput.ClearButtonOnFocus = false
    
    local InputCorner = Instance.new("UICorner")
    InputCorner.CornerRadius = UDim.new(0, 3)
    InputCorner.Parent = TextBoxInput
    
    local InputStroke = Instance.new("UIStroke")
    InputStroke.Color = Config.Colors.Border
    InputStroke.Thickness = 1
    InputStroke.Parent = TextBoxInput
    
    -- TextBox functionality
    TextBoxInput.FocusLost:Connect(function(enterPressed)
        if callback then
            callback(TextBoxInput.Text, enterPressed)
        end
        
        -- Visual feedback
        TweenService:Create(InputStroke, Config.Animations.Fast, {
            Color = Config.Colors.Border
        }):Play()
    end)
    
    TextBoxInput.Focused:Connect(function()
        TweenService:Create(InputStroke, Config.Animations.Fast, {
            Color = Config.Colors.Accent
        }):Play()
    end)
    
    -- Hover effects
    TextBoxInput.MouseEnter:Connect(function()
        if not TextBoxInput:IsFocused() then
            TweenService:Create(InputStroke, Config.Animations.Fast, {
                Color = Config.Colors.StrokeGreen
            }):Play()
        end
    end)
    
    TextBoxInput.MouseLeave:Connect(function()
        if not TextBoxInput:IsFocused() then
            TweenService:Create(InputStroke, Config.Animations.Fast, {
                Color = Config.Colors.Border
            }):Play()
        end
    end)
    
    table.insert(tab.Components, TextBoxFrame)
    
    -- Update tab content size
    tab.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.Content.Size = UDim2.new(1, 0, 0, tab.Layout.AbsoluteContentSize.Y)
        ContentScrollFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y)
    end)
    
    return {
        TextBox = TextBoxFrame, 
        SetText = function(newText) TextBoxInput.Text = newText end,
        GetText = function() return TextBoxInput.Text end,
        Input = TextBoxInput
    }
end
