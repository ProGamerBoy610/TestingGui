<document filename="Rayfiled.lua">
--[[
<p>Rayfield Interface Suite
by Sirius</p>
<p>shlex  | Designing + Programming
iRay   | Programming
Max    | Programming
Damian | Programming</p>
<p>]]</p>
<p>if debugX then
warn('Initialising Rayfield')
end</p>
<p>local function getService(name)
local service = game:GetService(name)
return if cloneref then cloneref(service) else service
end</p>
<p>-- Loads and executes a function hosted on a remote URL. Cancels the request if the requested URL takes too long to respond.
-- Errors with the function are caught and logged to the output
local function loadWithTimeout(url: string, timeout: number?): ...any
assert(type(url) == "string", "Expected string, got " .. type(url))
timeout = timeout or 5
local requestCompleted = false
local success, result = false, nil</p>
<p>local requestThread = task.spawn(function()
local fetchSuccess, fetchResult = pcall(game.HttpGet, game, url) -- game:HttpGet(url)
-- If the request fails the content can be empty, even if fetchSuccess is true
if not fetchSuccess or #fetchResult == 0 then
if #fetchResult == 0 then
fetchResult = "Empty response" -- Set the error message
end
success, result = false, fetchResult
requestCompleted = true
return
end
local content = fetchResult -- Fetched content
local execSuccess, execResult = pcall(function()
return loadstring(content)()
end)
success, result = execSuccess, execResult
requestCompleted = true
end)</p>
<p>local timeoutThread = task.delay(timeout, function()
if not requestCompleted then
warn(<code>Request for {url} timed out after {timeout} seconds</code>)
task.cancel(requestThread)
result = "Request timed out"
requestCompleted = true
end
end)</p>
<p>-- Wait for completion or timeout
while not requestCompleted do
task.wait()
end
-- Cancel timeout thread if still running when request completes
if coroutine.status(timeoutThread) ~= "dead" then
task.cancel(timeoutThread)
end
if not success then
warn(<code>Failed to process {url}: {result}</code>)
end
return if success then result else nil
end</p>
<p>local requestsDisabled = true --getgenv and getgenv().DISABLE_RAYFIELD_REQUESTS
local InterfaceBuild = '3K3W'
local Release = "Build 1.68"
local RayfieldFolder = "Rayfield"
local ConfigurationFolder = RayfieldFolder.."/Configurations"
local ConfigurationExtension = ".rfld"
local settingsTable = {
General = {
-- if needs be in order just make getSetting(name)
rayfieldOpen = {Type = 'bind', Value = 'K', Name = 'Rayfield Keybind'},
-- buildwarnings
-- rayfieldprompts</p>
<p>},
System = {
usageAnalytics = {Type = 'toggle', Value = true, Name = 'Anonymised Analytics'},
}
}</p>
<p>-- Settings that have been overridden by the developer. These will not be saved to the user's configuration file
-- Overridden settings always take precedence over settings in the configuration file, and are cleared if the user changes the setting in the UI
local overriddenSettings: { [string]: any } = {} -- For example, overriddenSettings["System.rayfieldOpen"] = "J"
local function overrideSetting(category: string, name: string, value: any)
overriddenSettings[<code>{category}.{name}</code>] = value
end</p>
<p>local function getSetting(category: string, name: string): any
if overriddenSettings[<code>{category}.{name}</code>] ~= nil then
return overriddenSettings[<code>{category}.{name}</code>]
elseif settingsTable[category][name] ~= nil then
return settingsTable[category][name].Value
end
end</p>
<p>-- If requests/analytics have been disabled by developer, set the user-facing setting to false as well
if requestsDisabled then
overrideSetting("System", "usageAnalytics", false)
end</p>
<p>local HttpService = getService('HttpService')
local RunService = getService('RunService')</p>
<p>-- Environment Check
local useStudio = RunService:IsStudio() or false</p>
<p>local settingsCreated = false
local settingsInitialized = false -- Whether the UI elements in the settings page have been set to the proper values
local cachedSettings
local prompt = useStudio and require(script.Parent.prompt) or loadWithTimeout('<a href="https://raw.githubusercontent.com/SiriusSoftwareLtd/Sirius/refs/heads/request/prompt.lua">https://raw.githubusercontent.com/SiriusSoftwareLtd/Sirius/refs/heads/request/prompt.lua</a>')
local requestFunc = (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request) or http_request or request</p>
<p>-- Validate prompt loaded correctly
if not prompt and not useStudio then
warn("Failed to load prompt library, using fallback")
prompt = {
create = function() end -- No-op fallback
}
end</p>
<p>local function loadSettings()
local file = nil</p>
<p>local success, result =	pcall(function()
task.spawn(function()
if isfolder and isfolder(RayfieldFolder) then
if isfile and isfile(RayfieldFolder..'/settings'..ConfigurationExtension) then
file = readfile(RayfieldFolder..'/settings'..ConfigurationExtension)
end
end</p>
<p>-- for debug in studio
if useStudio then
file = [[
{"General":{"rayfieldOpen":{"Value":"K","Type":"bind","Name":"Rayfield Keybind","Element":{"HoldToInteract":false,"Ext":true,"Name":"Rayfield Keybind","Set":null,"CallOnChange":true,"Callback":null,"CurrentKeybind":"K"}}},"System":{"usageAnalytics":{"Value":false,"Type":"toggle","Name":"Anonymised Analytics","Element":{"Ext":true,"Name":"Anonymised Analytics","Set":null,"CurrentValue":false,"Callback":null}}}}
]]
end</p>
<p>if file then
local success, decodedFile = pcall(function() return HttpService:JSONDecode(file) end)
if success then
file = decodedFile
else
file = {}
end
else
file = {}
end</p>
<p>if not settingsCreated then
cachedSettings = file
return
end</p>
<p>if file ~= {} then
for categoryName, settingCategory in pairs(settingsTable) do
if file[categoryName] then
for settingName, setting in pairs(settingCategory) do
if file[categoryName][settingName] then
setting.Value = file[categoryName][settingName].Value
setting.Element:Set(getSetting(categoryName, settingName))
end
end
end
end
end
settingsInitialized = true
end)
end)</p>
<p>if not success then
if writefile then
warn('Rayfield had an issue accessing configuration saving capability.')
end
end
end</p>
<p>if debugX then
warn('Now Loading Settings Configuration')
end</p>
<p>loadSettings()</p>
<p>if debugX then
warn('Settings Loaded')
end</p>
<p>local analyticsLib
local sendReport = function(ev_n, sc_n) warn("Failed to load report function") end
if not requestsDisabled then
if debugX then
warn('Querying Settings for Reporter Information')
end
analyticsLib = loadWithTimeout("<a href="https://analytics.sirius.menu/script">https://analytics.sirius.menu/script</a>")
if not analyticsLib then
warn("Failed to load analytics reporter")
analyticsLib = nil
elseif analyticsLib and type(analyticsLib.load) == "function" then
analyticsLib:load()
else
warn("Analytics library loaded but missing load function")
analyticsLib = nil
end
sendReport = function(ev_n, sc_n)
if not (type(analyticsLib) == "table" and type(analyticsLib.isLoaded) == "function" and analyticsLib:isLoaded()) then
warn("Analytics library not loaded")
return
end
if useStudio then
print('Sending Analytics')
else
if debugX then warn('Reporting Analytics') end
analyticsLib:report(
{
["name"] = ev_n,
["script"] = {["name"] = sc_n, ["version"] = Release}
},
{
["version"] = InterfaceBuild
}
)
if debugX then warn('Finished Report') end
end
end
if cachedSettings and (#cachedSettings == 0 or (cachedSettings.System and cachedSettings.System.usageAnalytics and cachedSettings.System.usageAnalytics.Value)) then
sendReport("execution", "Rayfield")
elseif not cachedSettings then
sendReport("execution", "Rayfield")
end
end</p>
<p>local promptUser = 2</p>
<p>if promptUser == 1 and prompt and type(prompt.create) == "function" then
prompt.create(
'Be cautious when running scripts',
[[Please be careful when running scripts from unknown developers. This script has already been ran.</p>
<p><font transparency="0.3">Some scripts may steal your items or in-game goods.</font>]],
'Okay',
'',
function()</p>
<p>end
)
end</p>
<p>if debugX then
warn('Moving on to continue initialisation')
end</p>
<p>local RayfieldLibrary = {
Flags = {},
Theme = {
Default = {
TextColor = Color3.fromRGB(255, 255, 255),</p>
<p>Background = Color3.fromRGB(30, 30, 30),
Topbar = Color3.fromRGB(40, 40, 40),
Shadow = Color3.fromRGB(25, 25, 25),</p>
<p>NotificationBackground = Color3.fromRGB(25, 25, 25),
NotificationActionsBackground = Color3.fromRGB(240, 240, 240),</p>
<p>TabBackground = Color3.fromRGB(90, 90, 90),
TabStroke = Color3.fromRGB(95, 95, 95),
TabBackgroundSelected = Color3.fromRGB(220, 220, 220),
TabTextColor = Color3.fromRGB(255, 255, 255),
SelectedTabTextColor = Color3.fromRGB(60, 60, 60),</p>
<p>ElementBackground = Color3.fromRGB(40, 40, 40),
ElementBackgroundHover = Color3.fromRGB(50, 50, 50),
SecondaryElementBackground = Color3.fromRGB(30, 30, 30),
ElementStroke = Color3.fromRGB(60, 60, 60),
SecondaryElementStroke = Color3.fromRGB(50, 50, 50),</p>
<p>SliderBackground = Color3.fromRGB(60, 148, 230),
SliderProgress = Color3.fromRGB(60, 148, 230),
SliderStroke = Color3.fromRGB(68, 173, 255),</p>
<p>ToggleBackground = Color3.fromRGB(35, 35, 35),
ToggleEnabled = Color3.fromRGB(10, 156, 224),
ToggleDisabled = Color3.fromRGB(110, 110, 110),
ToggleEnabledStroke = Color3.fromRGB(10, 180, 255),
ToggleDisabledStroke = Color3.fromRGB(135, 135, 135),
ToggleEnabledOuterStroke = Color3.fromRGB(110, 110, 110),
ToggleDisabledOuterStroke = Color3.fromRGB(75, 75, 75),</p>
<p>DropdownSelected = Color3.fromRGB(50, 50, 50),
DropdownUnselected = Color3.fromRGB(40, 40, 40),</p>
<p>InputBackground = Color3.fromRGB(35, 35, 35),
InputStroke = Color3.fromRGB(75, 75, 75),
PlaceholderColor = Color3.fromRGB(188, 188, 188)
},</p>
<p>Ocean = {
TextColor = Color3.fromRGB(230, 240, 240),</p>
<p>Background = Color3.fromRGB(20, 30, 30),
Topbar = Color3.fromRGB(25, 40, 40),
Shadow = Color3.fromRGB(15, 20, 20),</p>
<p>NotificationBackground = Color3.fromRGB(25, 35, 35),
NotificationActionsBackground = Color3.fromRGB(230, 240, 240),</p>
<p>TabBackground = Color3.fromRGB(40, 60, 60),
TabStroke = Color3.fromRGB(50, 70, 70),
TabBackgroundSelected = Color3.fromRGB(100, 180, 180),
TabTextColor = Color3.fromRGB(210, 230, 230),
SelectedTabTextColor = Color3.fromRGB(20, 50, 50),</p>
<p>ElementBackground = Color3.fromRGB(30, 50, 50),
ElementBackgroundHover = Color3.fromRGB(40, 60, 60),
SecondaryElementBackground = Color3.fromRGB(30, 45, 45),
ElementStroke = Color3.fromRGB(45, 70, 70),
SecondaryElementStroke = Color3.fromRGB(40, 65, 65),</p>
<p>SliderBackground = Color3.fromRGB(0, 110, 110),
SliderProgress = Color3.fromRGB(0, 140, 140),
SliderStroke = Color3.fromRGB(0, 160, 160),</p>
<p>ToggleBackground = Color3.fromRGB(30, 50, 50),
ToggleEnabled = Color3.fromRGB(0, 130, 130),
ToggleDisabled = Color3.fromRGB(70, 90, 90),
ToggleEnabledStroke = Color3.fromRGB(0, 160, 160),
ToggleDisabledStroke = Color3.fromRGB(85, 105, 105),
ToggleEnabledOuterStroke = Color3.fromRGB(50, 100, 100),
ToggleDisabledOuterStroke = Color3.fromRGB(45, 65, 65),</p>
<p>DropdownSelected = Color3.fromRGB(30, 60, 60),
DropdownUnselected = Color3.fromRGB(25, 40, 40),</p>
<p>InputBackground = Color3.fromRGB(30, 50, 50),
InputStroke = Color3.fromRGB(50, 70, 70),
PlaceholderColor = Color3.fromRGB(140, 160, 160)
},</p>
<p>AmberGlow = {
TextColor = Color3.fromRGB(255, 245, 230),</p>
<p>Background = Color3.fromRGB(45, 30, 20),
Topbar = Color3.fromRGB(55, 40, 25),
Shadow = Color3.fromRGB(35, 25, 15),</p>
<p>NotificationBackground = Color3.fromRGB(50, 35, 25),
NotificationActionsBackground = Color3.fromRGB(245, 230, 215),</p>
<p>TabBackground = Color3.fromRGB(75, 50, 35),
TabStroke = Color3.fromRGB(90, 60, 45),
TabBackgroundSelected = Color3.fromRGB(230, 180, 100),
TabTextColor = Color3.fromRGB(250, 220, 200),
SelectedTabTextColor = Color3.fromRGB(50, 30, 10),</p>
<p>ElementBackground = Color3.fromRGB(60, 45, 35),
ElementBackgroundHover = Color3.fromRGB(70, 50, 40),
SecondaryElementBackground = Color3.fromRGB(55, 40, 30),
ElementStroke = Color3.fromRGB(85, 60, 45),
SecondaryElementStroke = Color3.fromRGB(75, 50, 35),</p>
<p>SliderBackground = Color3.fromRGB(220, 130, 60),
SliderProgress = Color3.fromRGB(250, 150, 75),
SliderStroke = Color3.fromRGB(255, 170, 85),</p>
<p>ToggleBackground = Color3.fromRGB(55, 40, 30),
ToggleEnabled = Color3.fromRGB(240, 130, 30),
ToggleDisabled = Color3.fromRGB(90, 70, 60),
ToggleEnabledStroke = Color3.fromRGB(255, 160, 50),
ToggleDisabledStroke = Color3.fromRGB(110, 85, 75),
ToggleEnabledOuterStroke = Color3.fromRGB(200, 100, 50),
ToggleDisabledOuterStroke = Color3.fromRGB(75, 60, 55),</p>
<p>DropdownSelected = Color3.fromRGB(70, 50, 40),
DropdownUnselected = Color3.fromRGB(55, 40, 30),</p>
<p>InputBackground = Color3.fromRGB(60, 45, 35),
InputStroke = Color3.fromRGB(90, 65, 50),
PlaceholderColor = Color3.fromRGB(190, 150, 130)
},</p>
<p>Light = {
TextColor = Color3.fromRGB(40, 40, 40),</p>
<p>Background = Color3.fromRGB(245, 245, 245),
Topbar = Color3.fromRGB(230, 230, 230),
Shadow = Color3.fromRGB(200, 200, 200),</p>
<p>NotificationBackground = Color3.fromRGB(250, 250, 250),
NotificationActionsBackground = Color3.fromRGB(240, 240, 240),</p>
<p>TabBackground = Color3.fromRGB(235, 235, 235),
TabStroke = Color3.fromRGB(215, 215, 215),
TabBackgroundSelected = Color3.fromRGB(255, 255, 255),
TabTextColor = Color3.fromRGB(80, 80, 80),
SelectedTabTextColor = Color3.fromRGB(0, 0, 0),</p>
<p>ElementBackground = Color3.fromRGB(240, 240, 240),
ElementBackgroundHover = Color3.fromRGB(225, 225, 225),
SecondaryElementBackground = Color3.fromRGB(235, 235, 235),
ElementStroke = Color3.fromRGB(210, 210, 210),
SecondaryElementStroke = Color3.fromRGB(210, 210, 210),</p>
<p>SliderBackground = Color3.fromRGB(150, 180, 220),
SliderProgress = Color3.fromRGB(100, 150, 200),
SliderStroke = Color3.fromRGB(120, 170, 220),</p>
<p>ToggleBackground = Color3.fromRGB(220, 220, 220),
ToggleEnabled = Color3.fromRGB(0, 146, 214),
ToggleDisabled = Color3.fromRGB(150, 150, 150),
ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
ToggleDisabledStroke = Color3.fromRGB(170, 170, 170),
ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
ToggleDisabledOuterStroke = Color3.fromRGB(180, 180, 180),</p>
<p>DropdownSelected = Color3.fromRGB(230, 230, 230),
DropdownUnselected = Color3.fromRGB(220, 220, 220),</p>
<p>InputBackground = Color3.fromRGB(240, 240, 240),
InputStroke = Color3.fromRGB(180, 180, 180),
PlaceholderColor = Color3.fromRGB(140, 140, 140)
},</p>
<p>Amethyst = {
TextColor = Color3.fromRGB(240, 240, 240),</p>
<p>Background = Color3.fromRGB(30, 20, 40),
Topbar = Color3.fromRGB(40, 25, 50),
Shadow = Color3.fromRGB(20, 15, 30),</p>
<p>NotificationBackground = Color3.fromRGB(35, 20, 40),
NotificationActionsBackground = Color3.fromRGB(240, 240, 250),</p>
<p>TabBackground = Color3.fromRGB(60, 40, 80),
TabStroke = Color3.fromRGB(70, 45, 90),
TabBackgroundSelected = Color3.fromRGB(180, 140, 200),
TabTextColor = Color3.fromRGB(230, 230, 240),
SelectedTabTextColor = Color3.fromRGB(50, 20, 50),</p>
<p>ElementBackground = Color3.fromRGB(45, 30, 60),
ElementBackgroundHover = Color3.fromRGB(50, 35, 70),
SecondaryElementBackground = Color3.fromRGB(40, 30, 55),
ElementStroke = Color3.fromRGB(70, 50, 85),
SecondaryElementStroke = Color3.fromRGB(65, 45, 80),</p>
<p>SliderBackground = Color3.fromRGB(100, 60, 150),
SliderProgress = Color3.fromRGB(130, 80, 180),
SliderStroke = Color3.fromRGB(150, 100, 200),</p>
<p>ToggleBackground = Color3.fromRGB(45, 30, 55),
ToggleEnabled = Color3.fromRGB(120, 60, 150),
ToggleDisabled = Color3.fromRGB(94, 47, 117),
ToggleEnabledStroke = Color3.fromRGB(140, 80, 170),
ToggleDisabledStroke = Color3.fromRGB(124, 71, 150),
ToggleEnabledOuterStroke = Color3.fromRGB(90, 40, 120),
ToggleDisabledOuterStroke = Color3.fromRGB(80, 50, 110),</p>
<p>DropdownSelected = Color3.fromRGB(50, 35, 70),
DropdownUnselected = Color3.fromRGB(35, 25, 50),</p>
<p>InputBackground = Color3.fromRGB(45, 30, 60),
InputStroke = Color3.fromRGB(80, 50, 110),
PlaceholderColor = Color3.fromRGB(178, 150, 200)
},</p>
<p>Green = {
TextColor = Color3.fromRGB(30, 60, 30),</p>
<p>Background = Color3.fromRGB(235, 245, 235),
Topbar = Color3.fromRGB(210, 230, 210),
Shadow = Color3.fromRGB(200, 220, 200),</p>
<p>NotificationBackground = Color3.fromRGB(240, 250, 240),
NotificationActionsBackground = Color3.fromRGB(220, 235, 220),</p>
<p>TabBackground = Color3.fromRGB(215, 235, 215),
TabStroke = Color3.fromRGB(190, 210, 190),
TabBackgroundSelected = Color3.fromRGB(245, 255, 245),
TabTextColor = Color3.fromRGB(50, 80, 50),
SelectedTabTextColor = Color3.fromRGB(20, 60, 20),</p>
<p>ElementBackground = Color3.fromRGB(225, 240, 225),
ElementBackgroundHover = Color3.fromRGB(210, 225, 210),
SecondaryElementBackground = Color3.fromRGB(235, 245, 235),
ElementStroke = Color3.fromRGB(180, 200, 180),
SecondaryElementStroke = Color3.fromRGB(180, 200, 180),</p>
<p>SliderBackground = Color3.fromRGB(90, 160, 90),
SliderProgress = Color3.fromRGB(70, 130, 70),
SliderStroke = Color3.fromRGB(100, 180, 100),</p>
<p>ToggleBackground = Color3.fromRGB(215, 235, 215),
ToggleEnabled = Color3.fromRGB(60, 130, 60),
ToggleDisabled = Color3.fromRGB(150, 175, 150),
ToggleEnabledStroke = Color3.fromRGB(80, 150, 80),
ToggleDisabledStroke = Color3.fromRGB(130, 150, 130),
ToggleEnabledOuterStroke = Color3.fromRGB(100, 160, 100),
ToggleDisabledOuterStroke = Color3.fromRGB(160, 180, 160),</p>
<p>DropdownSelected = Color3.fromRGB(225, 240, 225),
DropdownUnselected = Color3.fromRGB(210, 225, 210),</p>
<p>InputBackground = Color3.fromRGB(235, 245, 235),
InputStroke = Color3.fromRGB(180, 200, 180),
PlaceholderColor = Color3.fromRGB(120, 140, 120)
},</p>
<p>Bloom = {
TextColor = Color3.fromRGB(60, 40, 50),</p>
<p>Background = Color3.fromRGB(255, 240, 245),
Topbar = Color3.fromRGB(250, 220, 225),
Shadow = Color3.fromRGB(230, 190, 195),</p>
<p>NotificationBackground = Color3.fromRGB(255, 235, 240),
NotificationActionsBackground = Color3.fromRGB(245, 215, 225),</p>
<p>TabBackground = Color3.fromRGB(240, 210, 220),
TabStroke = Color3.fromRGB(230, 200, 210),
TabBackgroundSelected = Color3.fromRGB(255, 225, 235),
TabTextColor = Color3.fromRGB(80, 40, 60),
SelectedTabTextColor = Color3.fromRGB(50, 30, 50),</p>
<p>ElementBackground = Color3.fromRGB(255, 235, 240),
ElementBackgroundHover = Color3.fromRGB(245, 220, 230),
SecondaryElementBackground = Color3.fromRGB(255, 235, 240),
ElementStroke = Color3.fromRGB(230, 200, 210),
SecondaryElementStroke = Color3.fromRGB(230, 200, 210),</p>
<p>SliderBackground = Color3.fromRGB(240, 130, 160),
SliderProgress = Color3.fromRGB(250, 160, 180),
SliderStroke = Color3.fromRGB(255, 180, 200),</p>
<p>ToggleBackground = Color3.fromRGB(240, 210, 220),
ToggleEnabled = Color3.fromRGB(255, 140, 170),
ToggleDisabled = Color3.fromRGB(200, 180, 185),
ToggleEnabledStroke = Color3.fromRGB(250, 160, 190),
ToggleDisabledStroke = Color3.fromRGB(210, 180, 190),
ToggleEnabledOuterStroke = Color3.fromRGB(220, 160, 180),
ToggleDisabledOuterStroke = Color3.fromRGB(190, 170, 180),</p>
<p>DropdownSelected = Color3.fromRGB(250, 220, 225),
DropdownUnselected = Color3.fromRGB(240, 210, 220),</p>
<p>InputBackground = Color3.fromRGB(255, 235, 240),
InputStroke = Color3.fromRGB(220, 190, 200),
PlaceholderColor = Color3.fromRGB(170, 130, 140)
},</p>
<p>DarkBlue = {
TextColor = Color3.fromRGB(230, 230, 230),</p>
<p>Background = Color3.fromRGB(20, 25, 30),
Topbar = Color3.fromRGB(30, 35, 40),
Shadow = Color3.fromRGB(15, 20, 25),</p>
<p>NotificationBackground = Color3.fromRGB(25, 30, 35),
NotificationActionsBackground = Color3.fromRGB(45, 50, 55),</p>
<p>TabBackground = Color3.fromRGB(35, 40, 45),
TabStroke = Color3.fromRGB(45, 50, 60),
TabBackgroundSelected = Color3.fromRGB(40, 70, 100),
TabTextColor = Color3.fromRGB(200, 200, 200),
SelectedTabTextColor = Color3.fromRGB(255, 255, 255),</p>
<p>ElementBackground = Color3.fromRGB(30, 35, 40),
ElementBackgroundHover = Color3.fromRGB(40, 45, 50),
SecondaryElementBackground = Color3.fromRGB(35, 40, 45),
ElementStroke = Color3.fromRGB(45, 50, 60),
SecondaryElementStroke = Color3.fromRGB(40, 45, 55),</p>
<p>SliderBackground = Color3.fromRGB(0, 90, 180),
SliderProgress = Color3.fromRGB(0, 120, 210),
SliderStroke = Color3.fromRGB(0, 150, 240),</p>
<p>ToggleBackground = Color3.fromRGB(35, 40, 45),
ToggleEnabled = Color3.fromRGB(0, 120, 210),
ToggleDisabled = Color3.fromRGB(70, 70, 80),
ToggleEnabledStroke = Color3.fromRGB(0, 150, 240),
ToggleDisabledStroke = Color3.fromRGB(75, 75, 85),
ToggleEnabledOuterStroke = Color3.fromRGB(20, 100, 180),
ToggleDisabledOuterStroke = Color3.fromRGB(55, 55, 65),</p>
<p>DropdownSelected = Color3.fromRGB(30, 70, 90),
DropdownUnselected = Color3.fromRGB(25, 30, 35),</p>
<p>InputBackground = Color3.fromRGB(25, 30, 35),
InputStroke = Color3.fromRGB(45, 50, 60),
PlaceholderColor = Color3.fromRGB(150, 150, 160)
},</p>
<p>Serenity = {
TextColor = Color3.fromRGB(50, 55, 60),
Background = Color3.fromRGB(240, 245, 250),
Topbar = Color3.fromRGB(215, 225, 235),
Shadow = Color3.fromRGB(200, 210, 220),</p>
<p>NotificationBackground = Color3.fromRGB(210, 220, 230),
NotificationActionsBackground = Color3.fromRGB(225, 230, 240),</p>
<p>TabBackground = Color3.fromRGB(200, 210, 220),
TabStroke = Color3.fromRGB(180, 190, 200),
TabBackgroundSelected = Color3.fromRGB(175, 185, 200),
TabTextColor = Color3.fromRGB(50, 55, 60),
SelectedTabTextColor = Color3.fromRGB(30, 35, 40),</p>
<p>ElementBackground = Color3.fromRGB(210, 220, 230),
ElementBackgroundHover = Color3.fromRGB(220, 230, 240),
SecondaryElementBackground = Color3.fromRGB(200, 210, 220),
ElementStroke = Color3.fromRGB(190, 200, 210),
SecondaryElementStroke = Color3.fromRGB(180, 190, 200),</p>
<p>SliderBackground = Color3.fromRGB(200, 220, 235),  -- Lighter shade
SliderProgress = Color3.fromRGB(70, 130, 180),
SliderStroke = Color3.fromRGB(150, 180, 220),</p>
<p>ToggleBackground = Color3.fromRGB(210, 220, 230),
ToggleEnabled = Color3.fromRGB(70, 160, 210),
ToggleDisabled = Color3.fromRGB(180, 180, 180),
ToggleEnabledStroke = Color3.fromRGB(60, 150, 200),
ToggleDisabledStroke = Color3.fromRGB(140, 140, 140),
ToggleEnabledOuterStroke = Color3.fromRGB(100, 120, 140),
ToggleDisabledOuterStroke = Color3.fromRGB(120, 120, 130),</p>
<p>DropdownSelected = Color3.fromRGB(220, 230, 240),
DropdownUnselected = Color3.fromRGB(200, 210, 220),</p>
<p>InputBackground = Color3.fromRGB(220, 230, 240),
InputStroke = Color3.fromRGB(180, 190, 200),
PlaceholderColor = Color3.fromRGB(150, 150, 150)
},
}
}</p>
<p>-- Services
local UserInputService = getService("UserInputService")
local TweenService = getService("TweenService")
local Players = getService("Players")
local CoreGui = getService("CoreGui")</p>
<p>-- Interface Management</p>
<p>local Rayfield = useStudio and script.Parent:FindFirstChild('Rayfield') or game:GetObjects("rbxassetid://10804731440")[1]
local buildAttempts = 0
local correctBuild = false
local warned
local globalLoaded
local rayfieldDestroyed = false -- True when RayfieldLibrary:Destroy() is called</p>
<p>repeat
if Rayfield:FindFirstChild('Build') and Rayfield.Build.Value == InterfaceBuild then
correctBuild = true
break
end</p>
<p>correctBuild = false</p>
<p>if not warned then
warn('Rayfield | Build Mismatch')
print('Rayfield may encounter issues as you are running an incompatible interface version ('.. ((Rayfield:FindFirstChild('Build') and Rayfield.Build.Value) or 'No Build') ..').\n\nThis version of Rayfield is intended for interface build '..InterfaceBuild..'.')
warned = true
end</p>
<p>toDestroy, Rayfield = Rayfield, useStudio and script.Parent:FindFirstChild('Rayfield') or game:GetObjects("rbxassetid://10804731440")[1]
if toDestroy and not useStudio then toDestroy:Destroy() end</p>
<p>buildAttempts = buildAttempts + 1
until buildAttempts >= 2</p>
<p>Rayfield.Enabled = false</p>
<p>if gethui then
Rayfield.Parent = gethui()
elseif syn and syn.protect_gui then
syn.protect_gui(Rayfield)
Rayfield.Parent = CoreGui
elseif not useStudio and CoreGui:FindFirstChild("RobloxGui") then
Rayfield.Parent = CoreGui:FindFirstChild("RobloxGui")
elseif not useStudio then
Rayfield.Parent = CoreGui
end</p>
<p>if gethui then
for _, Interface in ipairs(gethui():GetChildren()) do
if Interface.Name == Rayfield.Name and Interface ~= Rayfield then
Interface.Enabled = false
Interface.Name = "Rayfield-Old"
end
end
elseif not useStudio then
for _, Interface in ipairs(CoreGui:GetChildren()) do
if Interface.Name == Rayfield.Name and Interface ~= Rayfield then
Interface.Enabled = false
Interface.Name = "Rayfield-Old"
end
end
end</p>
<p>local minSize = Vector2.new(1024, 768)
local useMobileSizing</p>
<p>if Rayfield.AbsoluteSize.X &#x3C; minSize.X and Rayfield.AbsoluteSize.Y &#x3C; minSize.Y then
useMobileSizing = true
end</p>
<p>if UserInputService.TouchEnabled then
useMobilePrompt = true
end</p>
<p>-- Object Variables</p>
<p>local Main = Rayfield.Main
local MPrompt = Rayfield:FindFirstChild('Prompt')
local Topbar = Main.Topbar
local Elements = Main.Elements
local LoadingFrame = Main.LoadingFrame
local TabList = Main.TabList
local dragBar = Rayfield:FindFirstChild('Drag')
local dragInteract = dragBar and dragBar.Interact or nil
local dragBarCosmetic = dragBar and dragBar.Drag or nil</p>
<p>local dragOffset = 255
local dragOffsetMobile = 150</p>
<p>Rayfield.DisplayOrder = 100
LoadingFrame.Version.Text = Release</p>
<p>-- Thanks to Latte Softworks for the Lucide integration for Roblox
local Icons = useStudio and require(script.Parent.icons) or loadWithTimeout('<a href="https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/refs/heads/main/icons.lua">https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/refs/heads/main/icons.lua</a>')
-- Variables</p>
<p>local CFileName = nil
local CEnabled = false
local Minimised = false
local Hidden = false
local Debounce = false
local searchOpen = false
local Notifications = Rayfield.Notifications</p>
<p>local SelectedTheme = RayfieldLibrary.Theme.Default</p>
<p>local function ChangeTheme(Theme)
if typeof(Theme) == 'string' then
SelectedTheme = RayfieldLibrary.Theme[Theme]
elseif typeof(Theme) == 'table' then
SelectedTheme = Theme
end</p>
<p>Rayfield.Main.BackgroundColor3 = SelectedTheme.Background
Rayfield.Main.Topbar.BackgroundColor3 = SelectedTheme.Topbar
Rayfield.Main.Topbar.CornerRepair.BackgroundColor3 = SelectedTheme.Topbar
Rayfield.Main.Shadow.Image.ImageColor3 = SelectedTheme.Shadow</p>
<p>Rayfield.Main.Topbar.ChangeSize.ImageColor3 = SelectedTheme.TextColor
Rayfield.Main.Topbar.Hide.ImageColor3 = SelectedTheme.TextColor
Rayfield.Main.Topbar.Search.ImageColor3 = SelectedTheme.TextColor
if Topbar:FindFirstChild('Settings') then
Rayfield.Main.Topbar.Settings.ImageColor3 = SelectedTheme.TextColor
Rayfield.Main.Topbar.Divider.BackgroundColor3 = SelectedTheme.ElementStroke
end</p>
<p>Main.Search.BackgroundColor3 = SelectedTheme.TextColor
Main.Search.Shadow.ImageColor3 = SelectedTheme.TextColor
Main.Search.Search.ImageColor3 = SelectedTheme.TextColor
Main.Search.Input.PlaceholderColor3 = SelectedTheme.TextColor
Main.Search.UIStroke.Color = SelectedTheme.SecondaryElementStroke</p>
<p>if Main:FindFirstChild('Notice') then
Main.Notice.BackgroundColor3 = SelectedTheme.Background
end</p>
<p>for _, text in ipairs(Rayfield:GetDescendants()) do
if text.Parent.Parent ~= Notifications then
if text:IsA('TextLabel') or text:IsA('TextBox') then text.TextColor3 = SelectedTheme.TextColor end
end
end</p>
<p>for _, TabPage in ipairs(Elements:GetChildren()) do
for _, Element in ipairs(TabPage:GetChildren()) do
if Element.ClassName == "Frame" and Element.Name ~= "Placeholder" and Element.Name ~= "SectionSpacing" and Element.Name ~= "Divider" and Element.Name ~= "SectionTitle" and Element.Name ~= "SearchTitle-fsefsefesfsefesfesfThanks" then
Element.BackgroundColor3 = SelectedTheme.ElementBackground
Element.UIStroke.Color = SelectedTheme.ElementStroke
end
end
end
end</p>
<p>local function getIcon(name : string): {id: number, imageRectSize: Vector2, imageRectOffset: Vector2}
if not Icons then
warn("Lucide Icons: Cannot use icons as icons library is not loaded")
return
end
name = string.match(string.lower(name), "^%s*(.<em>)%s</em>$") :: string
local sizedicons = Icons['48px']
local r = sizedicons[name]
if not r then
error(<code>Lucide Icons: Failed to find icon by the name of "{name}"</code>, 2)
end</p>
<p>local rirs = r[2]
local riro = r[3]</p>
<p>if type(r[1]) ~= "number" or type(rirs) ~= "table" or type(riro) ~= "table" then
error("Lucide Icons: Internal error: Invalid auto-generated asset entry")
end</p>
<p>local irs = Vector2.new(rirs[1], rirs[2])
local iro = Vector2.new(riro[1], riro[2])</p>
<p>local asset = {
id = r[1],
imageRectSize = irs,
imageRectOffset = iro,
}</p>
<p>return asset
end
-- Converts ID to asset URI. Returns rbxassetid://0 if ID is not a number
local function getAssetUri(id: any): string
local assetUri = "rbxassetid://0" -- Default to empty image
if type(id) == "number" then
assetUri = "rbxassetid://" .. id
elseif type(id) == "string" and not Icons then
warn("Rayfield | Cannot use Lucide icons as icons library is not loaded")
else
warn("Rayfield | The icon argument must either be an icon ID (number) or a Lucide icon name (string)")
end
return assetUri
end</p>
<p>local function makeDraggable(object, dragObject, enableTaptic, tapticOffset)
local dragging = false
local relative = nil</p>
<p>local offset = Vector2.zero
local screenGui = object:FindFirstAncestorWhichIsA("ScreenGui")
if screenGui and screenGui.IgnoreGuiInset then
offset += getService('GuiService'):GetGuiInset()
end</p>
<p>local function connectFunctions()
if dragBar and enableTaptic then
dragBar.MouseEnter:Connect(function()
if not dragging and not Hidden then
TweenService:Create(dragBarCosmetic, TweenInfo.new(0.25, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {BackgroundTransparency = 0.5, Size = UDim2.new(0, 120, 0, 4)}):Play()
end
end)</p>
<p>dragBar.MouseLeave:Connect(function()
if not dragging and not Hidden then
TweenService:Create(dragBarCosmetic, TweenInfo.new(0.25, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {BackgroundTransparency = 0.7, Size = UDim2.new(0, 100, 0, 4)}):Play()
end
end)
end
end</p>
<p>connectFunctions()</p>
<p>dragObject.InputBegan:Connect(function(input, processed)
if processed then return end</p>
<p>local inputType = input.UserInputType.Name
if inputType == "MouseButton1" or inputType == "Touch" then
dragging = true</p>
<p>relative = object.AbsolutePosition + object.AbsoluteSize * object.AnchorPoint - UserInputService:GetMouseLocation()
if enableTaptic and not Hidden then
TweenService:Create(dragBarCosmetic, TweenInfo.new(0.35, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0, 110, 0, 4), BackgroundTransparency = 0}):Play()
end
end
end)</p>
<p>local inputEnded = UserInputService.InputEnded:Connect(function(input)
if not dragging then return end</p>
<p>local inputType = input.UserInputType.Name
if inputType == "MouseButton1" or inputType == "Touch" then
dragging = false</p>
<p>connectFunctions()</p>
<p>if enableTaptic and not Hidden then
TweenService:Create(dragBarCosmetic, TweenInfo.new(0.35, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0, 100, 0, 4), BackgroundTransparency = 0.7}):Play()
end
end
end)</p>
<p>local renderStepped = RunService.RenderStepped:Connect(function()
if dragging and not Hidden then
local position = UserInputService:GetMouseLocation() + relative + offset
if enableTaptic and tapticOffset then
TweenService:Create(object, TweenInfo.new(0.4, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Position = UDim2.fromOffset(position.X, position.Y)}):Play()
TweenService:Create(dragObject.Parent, TweenInfo.new(0.05, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Position = UDim2.fromOffset(position.X, position.Y + ((useMobileSizing and tapticOffset[2]) or tapticOffset[1]))}):Play()
else
if dragBar and tapticOffset then
dragBar.Position = UDim2.fromOffset(position.X, position.Y + ((useMobileSizing and tapticOffset[2]) or tapticOffset[1]))
end
object.Position = UDim2.fromOffset(position.X, position.Y)
end
end
end)</p>
<p>object.Destroying:Connect(function()
if inputEnded then inputEnded:Disconnect() end
if renderStepped then renderStepped:Disconnect() end
end)
end</p>
<p>local function PackColor(Color)
return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end</p>
<p>local function UnpackColor(Color)
return Color3.fromRGB(Color.R, Color.G, Color.B)
end</p>
<p>local function LoadConfiguration(Configuration)
local success, Data = pcall(function() return HttpService:JSONDecode(Configuration) end)
local changed</p>
<p>if not success then warn('Rayfield had an issue decoding the configuration file, please try delete the file and reopen Rayfield.') return end</p>
<p>-- Iterate through current UI elements' flags
for FlagName, Flag in pairs(RayfieldLibrary.Flags) do
local FlagValue = Data[FlagName]</p>
<p>if (typeof(FlagValue) == 'boolean' and FlagValue == false) or FlagValue then
task.spawn(function()
if Flag.Type == "ColorPicker" then
changed = true
Flag:Set(UnpackColor(FlagValue))
else
if (Flag.CurrentValue or Flag.CurrentKeybind or Flag.CurrentOption or Flag.Color) ~= FlagValue then
changed = true
Flag:Set(FlagValue)
end
end
end)
else
warn("Rayfield | Unable to find '"..FlagName.. "' in the save file.")
print("The error above may not be an issue if new elements have been added or not been set values.")
--RayfieldLibrary:Notify({Title = "Rayfield Flags", Content = "Rayfield was unable to find '"..FlagName.. "' in the save file. Check sirius.menu/discord for help.", Image = 3944688398})
end
end</p>
<p>return changed
end</p>
<p>local function SaveConfiguration()
if not CEnabled or not globalLoaded then return end</p>
<p>if debugX then
print('Saving')
end</p>
<p>local Data = {}
for i, v in pairs(RayfieldLibrary.Flags) do
if v.Type == "ColorPicker" then
Data[i] = PackColor(v.Color)
else
if typeof(v.CurrentValue) == 'boolean' then
if v.CurrentValue == false then
Data[i] = false
else
Data[i] = v.CurrentValue or v.CurrentKeybind or v.CurrentOption or v.Color
end
else
Data[i] = v.CurrentValue or v.CurrentKeybind or v.CurrentOption or v.Color
end
end
end</p>
<p>if useStudio then
if script.Parent:FindFirstChild('configuration') then script.Parent.configuration:Destroy() end</p>
<p>local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = script.Parent
ScreenGui.Name = 'configuration'</p>
<p>local TextBox = Instance.new("TextBox")
TextBox.Parent = ScreenGui
TextBox.Size = UDim2.new(0, 800, 0, 50)
TextBox.AnchorPoint = Vector2.new(0.5, 0)
TextBox.Position = UDim2.new(0.5, 0, 0, 30)
TextBox.Text = HttpService:JSONEncode(Data)
TextBox.ClearTextOnFocus = false
end</p>
<p>if debugX then
warn(HttpService:JSONEncode(Data))
end</p>
<p>if writefile then
writefile(ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension, tostring(HttpService:JSONEncode(Data)))
end
end</p>
<p>function RayfieldLibrary:Notify(data) -- action e.g open messages
task.spawn(function()</p>
<p>-- Notification Object Creation
local newNotification = Notifications.Template:Clone()
newNotification.Name = data.Title or 'No Title Provided'
newNotification.Parent = Notifications
newNotification.LayoutOrder = #Notifications:GetChildren()
newNotification.Visible = false</p>
<p>-- Set Data
newNotification.Title.Text = data.Title or "Unknown Title"
newNotification.Description.Text = data.Content or "Unknown Content"</p>
<p>if data.Image then
if typeof(data.Image) == 'string' and Icons then
local asset = getIcon(data.Image)</p>
<p>newNotification.Icon.Image = 'rbxassetid://'..asset.id
newNotification.Icon.ImageRectOffset = asset.imageRectOffset
newNotification.Icon.ImageRectSize = asset.imageRectSize
else
newNotification.Icon.Image = getAssetUri(data.Image)
end
else
newNotification.Icon.Image = "rbxassetid://" .. 0
end</p>
<p>-- Set initial transparency values</p>
<p>newNotification.Title.TextColor3 = SelectedTheme.TextColor
newNotification.Description.TextColor3 = SelectedTheme.TextColor
newNotification.BackgroundColor3 = SelectedTheme.Background
newNotification.UIStroke.Color = SelectedTheme.TextColor
newNotification.Icon.ImageColor3 = SelectedTheme.TextColor</p>
<p>newNotification.BackgroundTransparency = 1
newNotification.Title.TextTransparency = 1
newNotification.Description.TextTransparency = 1
newNotification.UIStroke.Transparency = 1
newNotification.Shadow.ImageTransparency = 1
newNotification.Size = UDim2.new(1, 0, 0, 800)
newNotification.Icon.ImageTransparency = 1
newNotification.Icon.BackgroundTransparency = 1</p>
<p>task.wait()</p>
<p>newNotification.Visible = true</p>
<p>if data.Actions then
warn('Rayfield | Not seeing your actions in notifications?')
print("Notification Actions are being sunset for now, keep up to date on when they're back in the discord. (sirius.menu/discord)")
end</p>
<p>-- Calculate textbounds and set initial values
local bounds = {newNotification.Title.TextBounds.Y, newNotification.Description.TextBounds.Y}
newNotification.Size = UDim2.new(1, -60, 0, -Notifications:FindFirstChild("UIListLayout").Padding.Offset)</p>
<p>newNotification.Icon.Size = UDim2.new(0, 32, 0, 32)
newNotification.Icon.Position = UDim2.new(0, 20, 0.5, 0)</p>
<p>TweenService:Create(newNotification, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, 0, 0, math.max(bounds[1] + bounds[2] + 31, 60))}):Play()</p>
<p>task.wait(0.15)
TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.45}):Play()
TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()</p>
<p>task.wait(0.05)</p>
<p>TweenService:Create(newNotification.Icon, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()</p>
<p>task.wait(0.05)
TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.35}):Play()
TweenService:Create(newNotification.UIStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 0.95}):Play()
TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.82}):Play()</p>
<p>local waitDuration = math.min(math.max((#newNotification.Description.Text * 0.1) + 2.5, 3), 10)
task.wait(data.Duration or waitDuration)</p>
<p>newNotification.Icon.Visible = false
TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
TweenService:Create(newNotification.UIStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()</p>
<p>TweenService:Create(newNotification, TweenInfo.new(1, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -90, 0, 0)}):Play()</p>
<p>task.wait(1)</p>
<p>TweenService:Create(newNotification, TweenInfo.new(1, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -90, 0, -Notifications:FindFirstChild("UIListLayout").Padding.Offset)}):Play()</p>
<p>newNotification.Visible = false
newNotification:Destroy()
end)
end</p>
<p>local function openSearch()
searchOpen = true</p>
<p>Main.Search.BackgroundTransparency = 1
Main.Search.Shadow.ImageTransparency = 1
Main.Search.Input.TextTransparency = 1
Main.Search.Search.ImageTransparency = 1
Main.Search.UIStroke.Transparency = 1
Main.Search.Size = UDim2.new(1, 0, 0, 80)
Main.Search.Position = UDim2.new(0.5, 0, 0, 70)</p>
<p>Main.Search.Input.Interactable = true</p>
<p>Main.Search.Visible = true</p>
<p>for _, tabbtn in ipairs(TabList:GetChildren()) do
if tabbtn.ClassName == "Frame" and tabbtn.Name ~= "Placeholder" then
tabbtn.Interact.Visible = false
TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
TweenService:Create(tabbtn.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
TweenService:Create(tabbtn.Image, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
TweenService:Create(tabbtn.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
end
end</p>
<p>Main.Search.Input:CaptureFocus()
TweenService:Create(Main.Search.Shadow, TweenInfo.new(0.05, Enum.EasingStyle.Quint), {ImageTransparency = 0.95}):Play()
TweenService:Create(Main.Search, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Position = UDim2.new(0.5, 0, 0, 57), BackgroundTransparency = 0.9}):Play()
TweenService:Create(Main.Search.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 0.8}):Play()
TweenService:Create(Main.Search.Input, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.2}):Play()
TweenService:Create(Main.Search.Search, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.5}):Play()
TweenService:Create(Main.Search, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -35, 0, 35)}):Play()
end</p>
<p>local function closeSearch()
searchOpen = false</p>
<p>TweenService:Create(Main.Search, TweenInfo.new(0.35, Enum.EasingStyle.Quint), {BackgroundTransparency = 1, Size = UDim2.new(1, -55, 0, 30)}):Play()
TweenService:Create(Main.Search.Search, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
TweenService:Create(Main.Search.Shadow, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
TweenService:Create(Main.Search.UIStroke, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
TweenService:Create(Main.Search.Input, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()</p>
<p>for _, tabbtn in ipairs(TabList:GetChildren()) do
if tabbtn.ClassName == "Frame" and tabbtn.Name ~= "Placeholder" then
tabbtn.Interact.Visible = true
if tostring(Elements.UIPageLayout.CurrentPage) == tabbtn.Title.Text then
TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
TweenService:Create(tabbtn.Image, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
TweenService:Create(tabbtn.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
TweenService:Create(tabbtn.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
else
TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.7}):Play()
TweenService:Create(tabbtn.Imag...(truncated 89877 characters)....Changed:Connect(function(prop)
if prop == "UserInputState" then
Connection:Disconnect()
Held = false
end
end)</p>
<p>if not KeybindSettings.HoldToInteract then
local Success, Response = pcall(KeybindSettings.Callback)
if not Success then
TweenService:Create(Keybind, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(85, 0, 0)}):Play()
TweenService:Create(Keybind.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
Keybind.Title.Text = "Callback Error"
print("Rayfield | "..KeybindSettings.Name.." Callback Error " ..tostring(Response))
warn('Check docs.sirius.menu for help with Rayfield specific development.')
task.wait(0.5)
Keybind.Title.Text = KeybindSettings.Name
TweenService:Create(Keybind, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Keybind.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
end
else
task.wait(0.25)
if Held then
local Loop; Loop = RunService.Stepped:Connect(function()
if not Held then
KeybindSettings.Callback(false) -- maybe pcall this
Loop:Disconnect()
else
KeybindSettings.Callback(true) -- maybe pcall this
end
end)
end
end
end
end)</p>
<p>Keybind.KeybindFrame.KeybindBox:GetPropertyChangedSignal("Text"):Connect(function()
TweenService:Create(Keybind.KeybindFrame, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = UDim2.new(0, Keybind.KeybindFrame.KeybindBox.TextBounds.X + 24, 0, 30)}):Play()
end)</p>
<p>function KeybindSettings:Set(NewKeybind)
Keybind.KeybindFrame.KeybindBox.Text = tostring(NewKeybind)
KeybindSettings.CurrentKeybind = tostring(NewKeybind)
Keybind.KeybindFrame.KeybindBox:ReleaseFocus()
if not KeybindSettings.Ext then
SaveConfiguration()
end</p>
<p>if KeybindSettings.CallOnChange then
KeybindSettings.Callback(tostring(NewKeybind))
end
end</p>
<p>if Settings.ConfigurationSaving then
if Settings.ConfigurationSaving.Enabled and KeybindSettings.Flag then
RayfieldLibrary.Flags[KeybindSettings.Flag] = KeybindSettings
end
end</p>
<p>Rayfield.Main:GetPropertyChangedSignal('BackgroundColor3'):Connect(function()
Keybind.KeybindFrame.BackgroundColor3 = SelectedTheme.InputBackground
Keybind.KeybindFrame.UIStroke.Color = SelectedTheme.InputStroke
end)</p>
<p>return KeybindSettings
end</p>
<p>-- Toggle
function Tab:CreateToggle(ToggleSettings)
local ToggleValue = {}</p>
<p>local Toggle = Elements.Template.Toggle:Clone()
Toggle.Name = ToggleSettings.Name
Toggle.Title.Text = ToggleSettings.Name
Toggle.Visible = true
Toggle.Parent = TabPage</p>
<p>Toggle.BackgroundTransparency = 1
Toggle.UIStroke.Transparency = 1
Toggle.Title.TextTransparency = 1
Toggle.Switch.BackgroundColor3 = SelectedTheme.ToggleBackground</p>
<p>if SelectedTheme ~= RayfieldLibrary.Theme.Default then
Toggle.Switch.Shadow.Visible = false
end</p>
<p>TweenService:Create(Toggle, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
TweenService:Create(Toggle.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()</p>
<p>if ToggleSettings.CurrentValue == true then
Toggle.Switch.Indicator.Position = UDim2.new(1, -20, 0.5, 0)
Toggle.Switch.Indicator.UIStroke.Color = SelectedTheme.ToggleEnabledStroke
Toggle.Switch.Indicator.BackgroundColor3 = SelectedTheme.ToggleEnabled
Toggle.Switch.UIStroke.Color = SelectedTheme.ToggleEnabledOuterStroke
else
Toggle.Switch.Indicator.Position = UDim2.new(1, -40, 0.5, 0)
Toggle.Switch.Indicator.UIStroke.Color = SelectedTheme.ToggleDisabledStroke
Toggle.Switch.Indicator.BackgroundColor3 = SelectedTheme.ToggleDisabled
Toggle.Switch.UIStroke.Color = SelectedTheme.ToggleDisabledOuterStroke
end</p>
<p>Toggle.MouseEnter:Connect(function()
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
end)</p>
<p>Toggle.MouseLeave:Connect(function()
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
end)</p>
<p>Toggle.Interact.MouseButton1Click:Connect(function()
if ToggleSettings.CurrentValue == true then
ToggleSettings.CurrentValue = false
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.45, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -40, 0.5, 0)}):Play()
TweenService:Create(Toggle.Switch.Indicator.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleDisabledStroke}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.8, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.ToggleDisabled}):Play()
TweenService:Create(Toggle.Switch.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleDisabledOuterStroke}):Play()
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
else
ToggleSettings.CurrentValue = true
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -20, 0.5, 0)}):Play()
TweenService:Create(Toggle.Switch.Indicator.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleEnabledStroke}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.8, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.ToggleEnabled}):Play()
TweenService:Create(Toggle.Switch.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleEnabledOuterStroke}):Play()
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
end</p>
<p>local Success, Response = pcall(function()
if debugX then warn('Running toggle ''..ToggleSettings.Name..'' (Interact)') end</p>
<p>ToggleSettings.Callback(ToggleSettings.CurrentValue)
end)</p>
<p>if not Success then
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(85, 0, 0)}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
Toggle.Title.Text = "Callback Error"
print("Rayfield | "..ToggleSettings.Name.." Callback Error " ..tostring(Response))
warn('Check docs.sirius.menu for help with Rayfield specific development.')
task.wait(0.5)
Toggle.Title.Text = ToggleSettings.Name
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
end</p>
<p>if not ToggleSettings.Ext then
SaveConfiguration()
end
end)</p>
<p>function ToggleSettings:Set(NewToggleValue)
if NewToggleValue == true then
ToggleSettings.CurrentValue = true
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -20, 0.5, 0)}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Size = UDim2.new(0,12,0,12)}):Play()
TweenService:Create(Toggle.Switch.Indicator.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleEnabledStroke}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.8, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.ToggleEnabled}):Play()
TweenService:Create(Toggle.Switch.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleEnabledOuterStroke}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.45, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Size = UDim2.new(0,17,0,17)}):Play()
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
else
ToggleSettings.CurrentValue = false
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.45, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -40, 0.5, 0)}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Size = UDim2.new(0,12,0,12)}):Play()
TweenService:Create(Toggle.Switch.Indicator.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleDisabledStroke}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.8, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {BackgroundColor3 = SelectedTheme.ToggleDisabled}):Play()
TweenService:Create(Toggle.Switch.UIStroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Color = SelectedTheme.ToggleDisabledOuterStroke}):Play()
TweenService:Create(Toggle.Switch.Indicator, TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Size = UDim2.new(0,17,0,17)}):Play()
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
end</p>
<p>local Success, Response = pcall(function()
if debugX then warn('Running toggle ''..ToggleSettings.Name..'' (:Set)') end</p>
<p>ToggleSettings.Callback(ToggleSettings.CurrentValue)
end)</p>
<p>if not Success then
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(85, 0, 0)}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
Toggle.Title.Text = "Callback Error"
print("Rayfield | "..ToggleSettings.Name.." Callback Error " ..tostring(Response))
warn('Check docs.sirius.menu for help with Rayfield specific development.')
task.wait(0.5)
Toggle.Title.Text = ToggleSettings.Name
TweenService:Create(Toggle, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Toggle.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
end</p>
<p>if not ToggleSettings.Ext then
SaveConfiguration()
end
end</p>
<p>if not ToggleSettings.Ext then
if Settings.ConfigurationSaving then
if Settings.ConfigurationSaving.Enabled and ToggleSettings.Flag then
RayfieldLibrary.Flags[ToggleSettings.Flag] = ToggleSettings
end
end
end</p>
<p>Rayfield.Main:GetPropertyChangedSignal('BackgroundColor3'):Connect(function()
Toggle.Switch.BackgroundColor3 = SelectedTheme.ToggleBackground</p>
<p>if SelectedTheme ~= RayfieldLibrary.Theme.Default then
Toggle.Switch.Shadow.Visible = false
end</p>
<p>task.wait()</p>
<p>if not ToggleSettings.CurrentValue then
Toggle.Switch.Indicator.UIStroke.Color = SelectedTheme.ToggleDisabledStroke
Toggle.Switch.Indicator.BackgroundColor3 = SelectedTheme.ToggleDisabled
Toggle.Switch.UIStroke.Color = SelectedTheme.ToggleDisabledOuterStroke
else
Toggle.Switch.Indicator.UIStroke.Color = SelectedTheme.ToggleEnabledStroke
Toggle.Switch.Indicator.BackgroundColor3 = SelectedTheme.ToggleEnabled
Toggle.Switch.UIStroke.Color = SelectedTheme.ToggleEnabledOuterStroke
end
end)</p>
<p>return ToggleSettings
end</p>
<p>-- Slider
function Tab:CreateSlider(SliderSettings)
local SLDragging = false
local Slider = Elements.Template.Slider:Clone()
Slider.Name = SliderSettings.Name
Slider.Title.Text = SliderSettings.Name
Slider.Visible = true
Slider.Parent = TabPage</p>
<p>Slider.BackgroundTransparency = 1
Slider.UIStroke.Transparency = 1
Slider.Title.TextTransparency = 1</p>
<p>if SelectedTheme ~= RayfieldLibrary.Theme.Default then
Slider.Main.Shadow.Visible = false
end</p>
<p>Slider.Main.BackgroundColor3 = SelectedTheme.SliderBackground
Slider.Main.UIStroke.Color = SelectedTheme.SliderStroke
Slider.Main.Progress.UIStroke.Color = SelectedTheme.SliderStroke
Slider.Main.Progress.BackgroundColor3 = SelectedTheme.SliderProgress</p>
<p>TweenService:Create(Slider, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
TweenService:Create(Slider.UIStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
TweenService:Create(Slider.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()</p>
<p>Slider.Main.Progress.Size =	UDim2.new(0, Slider.Main.AbsoluteSize.X * ((SliderSettings.CurrentValue + SliderSettings.Range[1]) / (SliderSettings.Range[2] - SliderSettings.Range[1])) > 5 and Slider.Main.AbsoluteSize.X * (SliderSettings.CurrentValue / (SliderSettings.Range[2] - SliderSettings.Range[1])) or 5, 1, 0)</p>
<p>if not SliderSettings.Suffix then
Slider.Main.Information.Text = tostring(SliderSettings.CurrentValue)
else
Slider.Main.Information.Text = tostring(SliderSettings.CurrentValue) .. " " .. SliderSettings.Suffix
end</p>
<p>Slider.MouseEnter:Connect(function()
TweenService:Create(Slider, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
end)</p>
<p>Slider.MouseLeave:Connect(function()
TweenService:Create(Slider, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
end)</p>
<p>Slider.Main.Interact.InputBegan:Connect(function(Input)
if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
TweenService:Create(Slider.Main.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
TweenService:Create(Slider.Main.Progress.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
SLDragging = true
end
end)</p>
<p>Slider.Main.Interact.InputEnded:Connect(function(Input)
if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
TweenService:Create(Slider.Main.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0.4}):Play()
TweenService:Create(Slider.Main.Progress.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0.3}):Play()
SLDragging = false
end
end)</p>
<p>Slider.Main.Interact.MouseButton1Down:Connect(function(X)
local Current = Slider.Main.Progress.AbsolutePosition.X + Slider.Main.Progress.AbsoluteSize.X
local Start = Current
local Location = X
local Loop; Loop = RunService.Stepped:Connect(function()
if SLDragging then
Location = UserInputService:GetMouseLocation().X
Current = Current + 0.025 * (Location - Start)</p>
<p>if Location &#x3C; Slider.Main.AbsolutePosition.X then
Location = Slider.Main.AbsolutePosition.X
elseif Location > Slider.Main.AbsolutePosition.X + Slider.Main.AbsoluteSize.X then
Location = Slider.Main.AbsolutePosition.X + Slider.Main.AbsoluteSize.X
end</p>
<p>if Current &#x3C; Slider.Main.AbsolutePosition.X + 5 then
Current = Slider.Main.AbsolutePosition.X + 5
elseif Current > Slider.Main.AbsolutePosition.X + Slider.Main.AbsoluteSize.X then
Current = Slider.Main.AbsolutePosition.X + Slider.Main.AbsoluteSize.X
end</p>
<p>if Current &#x3C;= Location and (Location - Start) &#x3C; 0 then
Start = Location
elseif Current >= Location and (Location - Start) > 0 then
Start = Location
end
TweenService:Create(Slider.Main.Progress, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = UDim2.new(0, Current - Slider.Main.AbsolutePosition.X, 1, 0)}):Play()
local NewValue = SliderSettings.Range[1] + (Location - Slider.Main.AbsolutePosition.X) / Slider.Main.AbsoluteSize.X * (SliderSettings.Range[2] - SliderSettings.Range[1])</p>
<p>NewValue = math.floor(NewValue / SliderSettings.Increment + 0.5) * (SliderSettings.Increment * 10000000) / 10000000
NewValue = math.clamp(NewValue, SliderSettings.Range[1], SliderSettings.Range[2])</p>
<p>if not SliderSettings.Suffix then
Slider.Main.Information.Text = tostring(NewValue)
else
Slider.Main.Information.Text = tostring(NewValue) .. " " .. SliderSettings.Suffix
end</p>
<p>if SliderSettings.CurrentValue ~= NewValue then
local Success, Response = pcall(function()
SliderSettings.Callback(NewValue)
end)
if not Success then
TweenService:Create(Slider, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(85, 0, 0)}):Play()
TweenService:Create(Slider.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
Slider.Title.Text = "Callback Error"
print("Rayfield | "..SliderSettings.Name.." Callback Error " ..tostring(Response))
warn('Check docs.sirius.menu for help with Rayfield specific development.')
task.wait(0.5)
Slider.Title.Text = SliderSettings.Name
TweenService:Create(Slider, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Slider.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
end</p>
<p>SliderSettings.CurrentValue = NewValue
if not SliderSettings.Ext then
SaveConfiguration()
end
end
else
TweenService:Create(Slider.Main.Progress, TweenInfo.new(0.3, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = UDim2.new(0, Location - Slider.Main.AbsolutePosition.X > 5 and Location - Slider.Main.AbsolutePosition.X or 5, 1, 0)}):Play()
Loop:Disconnect()
end
end)
end)</p>
<p>function SliderSettings:Set(NewVal)
local NewVal = math.clamp(NewVal, SliderSettings.Range[1], SliderSettings.Range[2])</p>
<p>TweenService:Create(Slider.Main.Progress, TweenInfo.new(0.45, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = UDim2.new(0, Slider.Main.AbsoluteSize.X * ((NewVal + SliderSettings.Range[1]) / (SliderSettings.Range[2] - SliderSettings.Range[1])) > 5 and Slider.Main.AbsoluteSize.X * (NewVal / (SliderSettings.Range[2] - SliderSettings.Range[1])) or 5, 1, 0)}):Play()
Slider.Main.Information.Text = tostring(NewVal) .. " " .. (SliderSettings.Suffix or "")</p>
<p>local Success, Response = pcall(function()
SliderSettings.Callback(NewVal)
end)</p>
<p>if not Success then
TweenService:Create(Slider, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(85, 0, 0)}):Play()
TweenService:Create(Slider.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
Slider.Title.Text = "Callback Error"
print("Rayfield | "..SliderSettings.Name.." Callback Error " ..tostring(Response))
warn('Check docs.sirius.menu for help with Rayfield specific development.')
task.wait(0.5)
Slider.Title.Text = SliderSettings.Name
TweenService:Create(Slider, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
TweenService:Create(Slider.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
end</p>
<p>SliderSettings.CurrentValue = NewVal
if not SliderSettings.Ext then
SaveConfiguration()
end
end</p>
<p>if Settings.ConfigurationSaving then
if Settings.ConfigurationSaving.Enabled and SliderSettings.Flag then
RayfieldLibrary.Flags[SliderSettings.Flag] = SliderSettings
end
end</p>
<p>Rayfield.Main:GetPropertyChangedSignal('BackgroundColor3'):Connect(function()
if SelectedTheme ~= RayfieldLibrary.Theme.Default then
Slider.Main.Shadow.Visible = false
end</p>
<p>Slider.Main.BackgroundColor3 = SelectedTheme.SliderBackground
Slider.Main.UIStroke.Color = SelectedTheme.SliderStroke
Slider.Main.Progress.UIStroke.Color = SelectedTheme.SliderStroke
Slider.Main.Progress.BackgroundColor3 = SelectedTheme.SliderProgress
end)</p>
<p>return SliderSettings
end</p>
<p>Rayfield.Main:GetPropertyChangedSignal('BackgroundColor3'):Connect(function()
TabButton.UIStroke.Color = SelectedTheme.TabStroke</p>
<p>if Elements.UIPageLayout.CurrentPage == TabPage then
TabButton.BackgroundColor3 = SelectedTheme.TabBackgroundSelected
TabButton.Image.ImageColor3 = SelectedTheme.SelectedTabTextColor
TabButton.Title.TextColor3 = SelectedTheme.SelectedTabTextColor
else
TabButton.BackgroundColor3 = SelectedTheme.TabBackground
TabButton.Image.ImageColor3 = SelectedTheme.TabTextColor
TabButton.Title.TextColor3 = SelectedTheme.TabTextColor
end
end)</p>
<p>return Tab
end</p>
<p>Elements.Visible = true</p>
<p>task.wait(1.1)
TweenService:Create(Main, TweenInfo.new(0.7, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 390, 0, 90)}):Play()
task.wait(0.3)
TweenService:Create(LoadingFrame.Title, TweenInfo.new(0.2, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
TweenService:Create(LoadingFrame.Subtitle, TweenInfo.new(0.2, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
TweenService:Create(LoadingFrame.Version, TweenInfo.new(0.2, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
task.wait(0.1)
TweenService:Create(Main, TweenInfo.new(0.6, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = useMobileSizing and UDim2.new(0, 500, 0, 275) or UDim2.new(0, 500, 0, 475)}):Play()
TweenService:Create(Main.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 0.6}):Play()</p>
<p>Topbar.BackgroundTransparency = 1
Topbar.Divider.Size = UDim2.new(0, 0, 0, 1)
Topbar.Divider.BackgroundColor3 = SelectedTheme.ElementStroke
Topbar.CornerRepair.BackgroundTransparency = 1
Topbar.Title.TextTransparency = 1
Topbar.Search.ImageTransparency = 1
if Topbar:FindFirstChild('Settings') then
Topbar.Settings.ImageTransparency = 1
end
Topbar.ChangeSize.ImageTransparency = 1
Topbar.Hide.ImageTransparency = 1</p>
<p>task.wait(0.5)
Topbar.Visible = true
TweenService:Create(Topbar, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
TweenService:Create(Topbar.CornerRepair, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
task.wait(0.1)
TweenService:Create(Topbar.Divider, TweenInfo.new(1, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, 0, 0, 1)}):Play()
TweenService:Create(Topbar.Title, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
task.wait(0.05)
TweenService:Create(Topbar.Search, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
task.wait(0.05)
if Topbar:FindFirstChild('Settings') then
TweenService:Create(Topbar.Settings, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
task.wait(0.05)
end
TweenService:Create(Topbar.ChangeSize, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
task.wait(0.05)
TweenService:Create(Topbar.Hide, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
task.wait(0.3)</p>
<p>if dragBar then
TweenService:Create(dragBarCosmetic, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.7}):Play()
end</p>
<p>function Window.ModifyTheme(NewTheme)
local success = pcall(ChangeTheme, NewTheme)
if not success then
RayfieldLibrary:Notify({Title = 'Unable to Change Theme', Content = 'We are unable find a theme on file.', Image = 4400704299})
else
RayfieldLibrary:Notify({Title = 'Theme Changed', Content = 'Successfully changed theme to '..(typeof(NewTheme) == 'string' and NewTheme or 'Custom Theme')..'.', Image = 4483362748})
end
end</p>
<p>local success, result = pcall(function()
createSettings(Window)
end)</p>
<p>if not success then warn('Rayfield had an issue creating settings.') end</p>
<p>return Window
end</p>
<p>local function setVisibility(visibility: boolean, notify: boolean?)
if Debounce then return end
if visibility then
Hidden = false
Unhide()
else
Hidden = true
Hide(notify)
end
end</p>
<p>function RayfieldLibrary:SetVisibility(visibility: boolean)
setVisibility(visibility, false)
end</p>
<p>function RayfieldLibrary:IsVisible(): boolean
return not Hidden
end</p>
<p>local hideHotkeyConnection -- Has to be initialized here since the connection is made later in the script
function RayfieldLibrary:Destroy()
rayfieldDestroyed = true
hideHotkeyConnection:Disconnect()
Rayfield:Destroy()
end</p>
<p>Topbar.ChangeSize.MouseButton1Click:Connect(function()
if Debounce then return end
if Minimised then
Minimised = false
Maximise()
else
Minimised = true
Minimise()
end
end)</p>
<p>Main.Search.Input:GetPropertyChangedSignal('Text'):Connect(function()
if #Main.Search.Input.Text > 0 then
if not Elements.UIPageLayout.CurrentPage:FindFirstChild('SearchTitle-fsefsefesfsefesfesfThanks') then
local searchTitle = Elements.Template.SectionTitle:Clone()
searchTitle.Parent = Elements.UIPageLayout.CurrentPage
searchTitle.Name = 'SearchTitle-fsefsefesfsefesfesfThanks'
searchTitle.LayoutOrder = -100
searchTitle.Title.Text = "Results from '"..Elements.UIPageLayout.CurrentPage.Name.."'"
searchTitle.Visible = true
end
else
local searchTitle = Elements.UIPageLayout.CurrentPage:FindFirstChild('SearchTitle-fsefsefesfsefesfesfThanks')</p>
<p>if searchTitle then
searchTitle:Destroy()
end
end</p>
<p>for _, element in ipairs(Elements.UIPageLayout.CurrentPage:GetChildren()) do
if element.ClassName ~= 'UIListLayout' and element.Name ~= 'Placeholder' and element.Name ~= 'SearchTitle-fsefsefesfsefesfesfThanks' then
if element.Name == 'SectionTitle' then
if #Main.Search.Input.Text == 0 then
element.Visible = true
else
element.Visible = false
end
else
if string.lower(element.Name):find(string.lower(Main.Search.Input.Text), 1, true) then
element.Visible = true
else
element.Visible = false
end
end
end
end
end)</p>
<p>Main.Search.Input.FocusLost:Connect(function(enterPressed)
if #Main.Search.Input.Text == 0 and searchOpen then
task.wait(0.12)
closeSearch()
end
end)</p>
<p>Topbar.Search.MouseButton1Click:Connect(function()
task.spawn(function()
if searchOpen then
closeSearch()
else
openSearch()
end
end)
end)</p>
<p>if Topbar:FindFirstChild('Settings') then
Topbar.Settings.MouseButton1Click:Connect(function()
task.spawn(function()
for _, OtherTabButton in ipairs(TabList:GetChildren()) do
if OtherTabButton.Name ~= "Template" and OtherTabButton.ClassName == "Frame" and OtherTabButton ~= TabButton and OtherTabButton.Name ~= "Placeholder" then
TweenService:Create(OtherTabButton, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.TabBackground}):Play()
TweenService:Create(OtherTabButton.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextColor3 = SelectedTheme.TabTextColor}):Play()
TweenService:Create(OtherTabButton.Image, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {ImageColor3 = SelectedTheme.TabTextColor}):Play()
TweenService:Create(OtherTabButton, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.7}):Play()
TweenService:Create(OtherTabButton.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0.2}):Play()
TweenService:Create(OtherTabButton.Image, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {ImageTransparency = 0.2}):Play()
TweenService:Create(OtherTabButton.UIStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = 0.5}):Play()
end
end</p>
<p>Elements.UIPageLayout:JumpTo(Elements['Rayfield Settings'])
end)
end)</p>
<p>end</p>
<p>Topbar.Hide.MouseButton1Click:Connect(function()
setVisibility(Hidden, not useMobileSizing)
end)</p>
<p>hideHotkeyConnection = UserInputService.InputBegan:Connect(function(input, processed)
if (input.KeyCode == Enum.KeyCode[getSetting("General", "rayfieldOpen")]) and not processed then
if Debounce then return end
if Hidden then
Hidden = false
Unhide()
else
Hidden = true
Hide()
end
end
end)</p>
<p>if MPrompt then
MPrompt.Interact.MouseButton1Click:Connect(function()
if Debounce then return end
if Hidden then
Hidden = false
Unhide()
end
end)
end</p>
<p>for _, TopbarButton in ipairs(Topbar:GetChildren()) do
if TopbarButton.ClassName == "ImageButton" and TopbarButton.Name ~= 'Icon' then
TopbarButton.MouseEnter:Connect(function()
TweenService:Create(TopbarButton, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
end)</p>
<p>TopbarButton.MouseLeave:Connect(function()
TweenService:Create(TopbarButton, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {ImageTransparency = 0.8}):Play()
end)
end
end</p>
<p>function RayfieldLibrary:LoadConfiguration()
local config</p>
<p>if debugX then
warn('Loading Configuration')
end</p>
<p>if useStudio then
config = [[{"Toggle1adwawd":true,"ColorPicker1awd":{"B":255,"G":255,"R":255},"Slider1dawd":100,"ColorPicfsefker1":{"B":255,"G":255,"R":255},"Slidefefsr1":80,"dawdawd":"","Input1":"hh","Keybind1":"B","Dropdown1":["Ocean"]}]]
end</p>
<p>if CEnabled then
local notified
local loaded</p>
<p>local success, result = pcall(function()
if useStudio and config then
loaded = LoadConfiguration(config)
return
end</p>
<p>if isfile then
if isfile(ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension) then
loaded = LoadConfiguration(readfile(ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension))
end
else
notified = true
RayfieldLibrary:Notify({Title = "Rayfield Configurations", Content = "We couldn't enable Configuration Saving as you are not using software with filesystem support.", Image = 4384402990})
end
end)</p>
<p>if success and loaded and not notified then
RayfieldLibrary:Notify({Title = "Rayfield Configurations", Content = "The configuration file for this script has been loaded from a previous session.", Image = 4384403532})
elseif not success and not notified then
warn('Rayfield Configurations Error | '..tostring(result))
RayfieldLibrary:Notify({Title = "Rayfield Configurations", Content = "We've encountered an issue loading your configuration correctly.\n\nCheck the Developer Console for more information.", Image = 4384402990})
end
end</p>
<p>globalLoaded = true
end</p>
<p>if useStudio then
-- run w/ studio
-- Feel free to place your own script here to see how it'd work in Roblox Studio before running it on your execution software.</p>
<p>--local Window = RayfieldLibrary:CreateWindow({
--	Name = "Rayfield Example Window",
--	LoadingTitle = "Rayfield Interface Suite",
--	Theme = 'Default',
--	Icon = 0,
--	LoadingSubtitle = "by Sirius",
--	ConfigurationSaving = {
--		Enabled = true,
--		FolderName = nil, -- Create a custom folder for your hub/game
--		FileName = "Big Hub52"
--	},
--	Discord = {
--		Enabled = false,
--		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
--		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
--	},
--	KeySystem = false, -- Set this to true to use our key system
--	KeySettings = {
--		Title = "Untitled",
--		Subtitle = "Key System",
--		Note = "No method of obtaining the key is provided",
--		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
--		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
--		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
--		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
--	}
--})</p>
<p>--local Tab = Window:CreateTab("Tab Example", 'key-round') -- Title, Image
--local Tab2 = Window:CreateTab("Tab Example 2", 4483362458) -- Title, Image</p>
<p>--local Section = Tab2:CreateSection("Section")</p>
<p>--local ColorPicker = Tab2:CreateColorPicker({
--	Name = "Color Picker",
--	Color = Color3.fromRGB(255,255,255),
--	Flag = "ColorPicfsefker1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
--	Callback = function(Value)
--		-- The function that takes place every time the color picker is moved/changed
--		-- The variable (Value) is a Color3fromRGB value based on which color is selected
--	end
--})</p>
<p>--local Slider = Tab2:CreateSlider({
--	Name = "Slider Example",
--	Range = {0, 100},
--	Increment = 10,
--	Suffix = "Bananas",
--	CurrentValue = 40,
--	Flag = "Slidefefsr1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
--	Callback = function(Value)
--		-- The function that takes place when the slider changes
--		-- The variable (Value) is a number which correlates to the value the slider is currently at
--	end,
--})</p>
<p>--local Input = Tab2:CreateInput({
--	Name = "Input Example",
--	CurrentValue = '',
--	PlaceholderText = "Input Placeholder",
--	Flag = 'dawdawd',
--	RemoveTextAfterFocusLost = false,
--	Callback = function(Text)
--		-- The function that takes place when the input is changed
--		-- The variable (Text) is a string for the value in the text box
--	end,
--})</p>
<p>----RayfieldLibrary:Notify({Title = "Rayfield Interface", Content = "Welcome to Rayfield. These - are the brand new notification design for Rayfield, with custom sizing and Rayfield calculated wait times.", Image = 4483362458})</p>
<p>--local Section = Tab:CreateSection("Section Example")</p>
<p>--local Button = Tab:CreateButton({
--	Name = "Change Theme",
--	Callback = function()
--		-- The function that takes place when the button is pressed
--		Window.ModifyTheme('DarkBlue')
--	end,
--})</p>
<p>--local Toggle = Tab:CreateToggle({
--	Name = "Toggle Example",
--	CurrentValue = false,
--	Flag = "Toggle1adwawd", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
--	Callback = function(Value)
--		-- The function that takes place when the toggle is pressed
--		-- The variable (Value) is a boolean on whether the toggle is true or false
--	end,
--})</p>
<p>--local ColorPicker = Tab:CreateColorPicker({
--	Name = "Color Picker",
--	Color = Color3.fromRGB(255,255,255),
--	Flag = "ColorPicker1awd", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
--	Callback = function(Value)
--		-- The function that takes place every time the color picker is moved/changed
--		-- The variable (Value) is a Color3fromRGB value based on which color is selected
--	end
--})</p>
<p>--local Slider = Tab:CreateSlider({
--	Name = "Slider Example",
--	Range = {0, 100},
--	Increment = 10,
--	Suffix = "Bananas",
--	CurrentValue = 40,
--	Flag = "Slider1dawd", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
--	Callback = function(Value)
--		-- The function that takes place when the slider changes
--		-- The variable (Value) is a number which correlates to the value the slider is currently at
--	end,
--})</p>
<p>--local Input = Tab:CreateInput({
--	Name = "Input Example",
--	CurrentValue = "Helo",
--	PlaceholderText = "Adaptive Input",
--	RemoveTextAfterFocusLost = false,
--	Flag = 'Input1',
--	Callback = function(Text)
--		-- The function that takes place when the input is changed
--		-- The variable (Text) is a string for the value in the text box
--	end,
--})</p>
<p>--local thoptions = {}
--for themename, theme in pairs(RayfieldLibrary.Theme) do
--	table.insert(thoptions, themename)
--end</p>
<p>--local Dropdown = Tab:CreateDropdown({
--	Name = "Theme",
--	Options = thoptions,
--	CurrentOption = {"Default"},
--	MultipleOptions = false,
--	Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
--	Callback = function(Options)
--		--Window.ModifyTheme(Options[1])
--		-- The function that takes place when the selected option is changed
--		-- The variable (Options) is a table of strings for the current selected options
--	end,
--})</p>
<p>--Window.ModifyTheme({
--	TextColor = Color3.fromRGB(50, 55, 60),
--	Background = Color3.fromRGB(240, 245, 250),
--	Topbar = Color3.fromRGB(215, 225, 235),
--	Shadow = Color3.fromRGB(200, 210, 220),</p>
<p>--	NotificationBackground = Color3.fromRGB(210, 220, 230),
--	NotificationActionsBackground = Color3.fromRGB(225, 230, 240),</p>
<p>--	TabBackground = Color3.fromRGB(200, 210, 220),
--	TabStroke = Color3.fromRGB(180, 190, 200),
--	TabBackgroundSelected = Color3.fromRGB(175, 185, 200),
--	TabTextColor = Color3.fromRGB(50, 55, 60),
--	SelectedTabTextColor = Color3.fromRGB(30, 35, 40),</p>
<p>--	ElementBackground = Color3.fromRGB(210, 220, 230),
--	ElementBackgroundHover = Color3.fromRGB(220, 230, 240),
--	SecondaryElementBackground = Color3.fromRGB(200, 210, 220),
--	ElementStroke = Color3.fromRGB(190, 200, 210),
--	SecondaryElementStroke = Color3.fromRGB(180, 190, 200),</p>
<p>--	SliderBackground = Color3.fromRGB(200, 220, 235),  -- Lighter shade
--	SliderProgress = Color3.fromRGB(70, 130, 180),
--	SliderStroke = Color3.fromRGB(150, 180, 220),</p>
<p>--	ToggleBackground = Color3.fromRGB(210, 220, 230),
--	ToggleEnabled = Color3.fromRGB(70, 160, 210),
--	ToggleDisabled = Color3.fromRGB(180, 180, 180),
--	ToggleEnabledStroke = Color3.fromRGB(60, 150, 200),
--	ToggleDisabledStroke = Color3.fromRGB(140, 140, 140),
--	ToggleEnabledOuterStroke = Color3.fromRGB(100, 120, 140),
--	ToggleDisabledOuterStroke = Color3.fromRGB(120, 120, 130),</p>
<p>--	DropdownSelected = Color3.fromRGB(220, 230, 240),
--	DropdownUnselected = Color3.fromRGB(200, 210, 220),</p>
<p>--	InputBackground = Color3.fromRGB(220, 230, 240),
--	InputStroke = Color3.fromRGB(180, 190, 200),
--	PlaceholderColor = Color3.fromRGB(150, 150, 150)
--})</p>
<p>--local Keybind = Tab:CreateKeybind({
--	Name = "Keybind Example",
--	CurrentKeybind = "Q",
--	HoldToInteract = false,
--	Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
--	Callback = function(Keybind)
--		-- The function that takes place when the keybind is pressed
--		-- The variable (Keybind) is a boolean for whether the keybind is being held or not (HoldToInteract needs to be true)
--	end,
--})</p>
<p>--local Label = Tab:CreateLabel("Label Example")</p>
<p>--local Label2 = Tab:CreateLabel("Warning", 4483362458, Color3.fromRGB(255, 159, 49),  true)</p>
<p>--local Paragraph = Tab:CreateParagraph({Title = "Paragraph Example", Content = "Paragraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph ExampleParagraph Example"})
end</p>
<p>if CEnabled and Main:FindFirstChild('Notice') then
Main.Notice.BackgroundTransparency = 1
Main.Notice.Title.TextTransparency = 1
Main.Notice.Size = UDim2.new(0, 0, 0, 0)
Main.Notice.Position = UDim2.new(0.5, 0, 0, -100)
Main.Notice.Visible = true</p>
<p>TweenService:Create(Main.Notice, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 280, 0, 35), Position = UDim2.new(0.5, 0, 0, -50), BackgroundTransparency = 0.5}):Play()
TweenService:Create(Main.Notice.Title, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 0.1}):Play()
end
-- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA why :(
--if not useStudio then
--	task.spawn(loadWithTimeout, "<a href="https://raw.githubusercontent.com/SiriusSoftwareLtd/Sirius/refs/heads/request/boost.lua">https://raw.githubusercontent.com/SiriusSoftwareLtd/Sirius/refs/heads/request/boost.lua</a>")
--end</p>
<p>task.delay(4, function()
RayfieldLibrary.LoadConfiguration()
if Main:FindFirstChild('Notice') and Main.Notice.Visible then
TweenService:Create(Main.Notice, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 100, 0, 25), Position = UDim2.new(0.5, 0, 0, -100), BackgroundTransparency = 1}):Play()
TweenService:Create(Main.Notice.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()</p>
<p>task.wait(0.5)
Main.Notice.Visible = false
end
end)</p>
<p>return RayfieldLibrary</p>
</document>
