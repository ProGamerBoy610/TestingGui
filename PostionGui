local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DropdownGUI"
screenGui.ResetOnSpawn = false -- Prevent GUI from being destroyed on respawn
screenGui.Parent = playerGui

-- Main Frame (Container)
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 250, 0, 50)
mainFrame.Position = UDim2.new(0, 20, 0, 100)
mainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

-- Add corner radius
local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 12)
mainCorner.Parent = mainFrame

-- Header Frame
local headerFrame = Instance.new("Frame")
headerFrame.Name = "Header"
headerFrame.Size = UDim2.new(1, 0, 0, 50)
headerFrame.Position = UDim2.new(0, 0, 0, 0)
headerFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
headerFrame.BorderSizePixel = 0
headerFrame.Parent = mainFrame

local headerCorner = Instance.new("UICorner")
headerCorner.CornerRadius = UDim.new(0, 12)
headerCorner.Parent = headerFrame

-- Title Label
local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "Title"
titleLabel.Size = UDim2.new(1, -50, 1, 0)
titleLabel.Position = UDim2.new(0, 10, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Fryzer Hub"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextScaled = true
titleLabel.Font = Enum.Font.GothamBold
titleLabel.Parent = headerFrame

-- Toggle Button
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0, 40, 0, 40)
toggleButton.Position = UDim2.new(1, -45, 0, 5)
toggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
toggleButton.BackgroundTransparency = 0
toggleButton.BorderSizePixel = 0
toggleButton.Text = "▼"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.TextScaled = true
toggleButton.Font = Enum.Font.GothamBold
toggleButton.Parent = headerFrame

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 8)
toggleCorner.Parent = toggleButton

-- Content Frame (for buttons)
local contentFrame = Instance.new("Frame")
contentFrame.Name = "Content"
contentFrame.Size = UDim2.new(1, 0, 0, 200)
contentFrame.Position = UDim2.new(0, 0, 0, 50)
contentFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
contentFrame.BorderSizePixel = 0
contentFrame.Parent = mainFrame

-- Credit Label
local creditLabel = Instance.new("TextLabel")
creditLabel.Name = "Credit"
creditLabel.Size = UDim2.new(0, 100, 0, 20)
creditLabel.Position = UDim2.new(0, 5, 1, -25)
creditLabel.BackgroundTransparency = 1
creditLabel.Text = "By: @P_G_B"
creditLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
creditLabel.TextScaled = true
creditLabel.Font = Enum.Font.Gotham
creditLabel.TextXAlignment = Enum.TextXAlignment.Left
creditLabel.Parent = contentFrame

-- Walkspeed functionality
local walkspeedEnabled = false
local walkspeedConnection = nil
local defaultWalkspeed = 16
local boostedWalkspeed = 80

local function updateWalkspeed()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        if walkspeedEnabled then
            player.Character.Humanoid.WalkSpeed = boostedWalkspeed
        else
            player.Character.Humanoid.WalkSpeed = defaultWalkspeed
        end
    end
end

local function toggleWalkspeed()
    walkspeedEnabled = not walkspeedEnabled
    
    if walkspeedEnabled then
        -- Start the walkspeed update loop
        walkspeedConnection = RunService.Heartbeat:Connect(function()
            wait(0.1)
            updateWalkspeed()
        end)
    else
        -- Stop the walkspeed update loop
        if walkspeedConnection then
            walkspeedConnection:Disconnect()
            walkspeedConnection = nil
        end
        updateWalkspeed() -- Reset to default
    end
    
    return walkspeedEnabled
end

-- Custom Script functionality
local customScriptEnabled = false
local customScriptInstance = nil

local function toggleCustomScript()
    customScriptEnabled = not customScriptEnabled
    
    if customScriptEnabled then
        -- Execute the custom script
        local success, result = pcall(function()
            -- AWP.GG NOCLIP SCRIPT
            local player = game.Players.LocalPlayer
            local userInputService = game:GetService("UserInputService")
            local starterGui = game:GetService("StarterGui")
             
            local noClip = false
            local dragging = false
            local dragStart = nil
            local startPos = nil
            local guiVisible = true
            local screenGui, gearButton, menuGui, noClipButton, speedButton, speedGui
            local speedInputBox, applySpeedButton, resetSpeedButton, clickTPButton
            local clickTPEnabled = false
             
            -- Function to create a Roblox-style notification
            local function createNotification(message)
                starterGui:SetCore("SendNotification", {
                    Title = "No-Clip";
                    Text = message;
                    Duration = 2; -- Duration of the notification
                })
            end
             
            -- Function to apply No-Clip to the character
            local function applyNoClip(character)
                if not character then return end
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        part.CanCollide = not noClip
                    end
                end
                if character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CanCollide = not noClip
                end
            end
             
            -- Function to enable/disable No-Clip mode
            local function setNoClip(enabled)
                noClip = enabled
                applyNoClip(player.Character)
                if noClipButton then
                    noClipButton.Text = "No-Clip: " .. (noClip and "Enabled" or "Disabled")
                    noClipButton.BackgroundColor3 = noClip and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(150, 0, 0)
                end
                print("No-Clip " .. (noClip and "Enabled" or "Disabled"))
            end
             
            -- Function to toggle No-Clip mode
            function toggleNoClip()
                setNoClip(not noClip)
            end
             
            -- Function to start dragging
            local function startDragging(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Target.Parent == menuGui then
                    dragging = true
                    dragStart = input.Position
                    startPos = menuGui.Position
                end
            end
             
            -- Function to stop dragging
            local function stopDragging()
                dragging = false
            end
             
            -- Function to update dragging position
            local function updateDragging(input)
                if dragging then
                    local delta = input.Position - dragStart
                    menuGui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                end
            end
             
            -- GUI Setup
            local function createGui()
                if screenGui then screenGui:Destroy() end
                screenGui = Instance.new("ScreenGui")
                screenGui.Name = "NoClipGUI"
                screenGui.ResetOnSpawn = false -- Prevent GUI from being destroyed on respawn
                screenGui.Parent = player:WaitForChild("PlayerGui")
             
                -- Gear Button Setup
                gearButton = Instance.new("ImageButton")
                gearButton.Size = UDim2.new(0, 30, 0, 30)
                gearButton.Position = UDim2.new(0, 10, 0, 10)
                gearButton.Image = "rbxassetid://6031091005"
                gearButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                gearButton.BorderSizePixel = 2
                gearButton.BorderColor3 = Color3.fromRGB(255, 255, 0)
                gearButton.Parent = screenGui
                gearButton.MouseButton1Click:Connect(function()
                    menuGui.Visible = not menuGui.Visible
                    if speedGui then
                        speedGui.Visible = false -- Close Speed GUI when the gear button is clicked
                    end
                end)
             
                -- Menu GUI Setup
                menuGui = Instance.new("Frame")
                menuGui.Size = UDim2.new(0, 200, 0, 150)
                menuGui.Position = UDim2.new(0, 50, 0, 10)
                menuGui.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                menuGui.BackgroundTransparency = 0.5
                menuGui.Visible = false
                menuGui.Parent = screenGui
             
                -- No-Clip Button Setup
                noClipButton = Instance.new("TextButton")
                noClipButton.Size = UDim2.new(1, 0, 0, 50)
                noClipButton.Position = UDim2.new(0, 0, 0, 0)
                noClipButton.Text = "No-Clip: Disabled"
                noClipButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                noClipButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                noClipButton.BorderSizePixel = 2
                noClipButton.BorderColor3 = Color3.fromRGB(255, 255, 0)
                noClipButton.TextScaled = true
                noClipButton.Font = Enum.Font.SourceSansBold
                noClipButton.Parent = menuGui
                noClipButton.MouseButton1Click:Connect(toggleNoClip)
             
                -- Speed Button Setup
                speedButton = Instance.new("TextButton")
                speedButton.Size = UDim2.new(1, 0, 0, 50)
                speedButton.Position = UDim2.new(0, 0, 0, 60)
                speedButton.Text = "Speed"
                speedButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                speedButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                speedButton.BorderSizePixel = 2
                speedButton.BorderColor3 = Color3.fromRGB(255, 255, 0)
                speedButton.TextScaled = true
                speedButton.Font = Enum.Font.SourceSansBold
                speedButton.Parent = menuGui
                speedButton.MouseButton1Click:Connect(function()
                    speedGui.Visible = not speedGui.Visible
                end)
             
                -- Speed GUI Setup
                speedGui = Instance.new("Frame")
                speedGui.Size = UDim2.new(0, 200, 0, 150)
                speedGui.Position = UDim2.new(0, 50, 0, 170)
                speedGui.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                speedGui.BackgroundTransparency = 0.5
                speedGui.Visible = false
                speedGui.Parent = screenGui
             
                -- Speed Input Box
                speedInputBox = Instance.new("TextBox")
                speedInputBox.Size = UDim2.new(1, 0, 0, 40)
                speedInputBox.Position = UDim2.new(0, 0, 0, 10)
                speedInputBox.PlaceholderText = "Enter Speed"
                speedInputBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                speedInputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                speedInputBox.BorderSizePixel = 2
                speedInputBox.BorderColor3 = Color3.fromRGB(255, 255, 0)
                speedInputBox.TextScaled = true
                speedInputBox.Font = Enum.Font.SourceSansBold
                speedInputBox.Parent = speedGui
             
                -- Apply Speed Button
                applySpeedButton = Instance.new("TextButton")
                applySpeedButton.Size = UDim2.new(1, 0, 0, 40)
                applySpeedButton.Position = UDim2.new(0, 0, 0, 60)
                applySpeedButton.Text = "Apply Speed"
                applySpeedButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                applySpeedButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                applySpeedButton.BorderSizePixel = 2
                applySpeedButton.BorderColor3 = Color3.fromRGB(255, 255, 0)
                applySpeedButton.TextScaled = true
                applySpeedButton.Font = Enum.Font.SourceSansBold
                applySpeedButton.Parent = speedGui
                applySpeedButton.MouseButton1Click:Connect(function()
                    local speedValue = tonumber(speedInputBox.Text)
                    if speedValue then
                        player.Character.Humanoid.WalkSpeed = speedValue
                    end
                end)
             
                -- Reset Speed Button
                resetSpeedButton = Instance.new("TextButton")
                resetSpeedButton.Size = UDim2.new(1, 0, 0, 40)
                resetSpeedButton.Position = UDim2.new(0, 0, 0, 110)
                resetSpeedButton.Text = "Reset Speed"
                resetSpeedButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                resetSpeedButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                resetSpeedButton.BorderSizePixel = 2
                resetSpeedButton.BorderColor3 = Color3.fromRGB(255, 255, 0)
                resetSpeedButton.TextScaled = true
                resetSpeedButton.Font = Enum.Font.SourceSansBold
                resetSpeedButton.Parent = speedGui
                resetSpeedButton.MouseButton1Click:Connect(function()
                    player.Character.Humanoid.WalkSpeed = 16 -- Default speed value
                end)
             
                -- Click TP Button Setup
                clickTPButton = Instance.new("TextButton")
                clickTPButton.Size = UDim2.new(1, 0, 0, 50)
                clickTPButton.Position = UDim2.new(0, 0, 0, 120)
                clickTPButton.Text = "Click TP: Disabled"
                clickTPButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                clickTPButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                clickTPButton.BorderSizePixel = 2
                clickTPButton.BorderColor3 = Color3.fromRGB(255, 255, 0)
                clickTPButton.TextScaled = true
                clickTPButton.Font = Enum.Font.SourceSansBold
                clickTPButton.Parent = menuGui
                clickTPButton.MouseButton1Click:Connect(function()
                    clickTPEnabled = not clickTPEnabled
                    clickTPButton.Text = "Click TP: " .. (clickTPEnabled and "Enabled" or "Disabled")
                    createNotification("Click TP " .. (clickTPEnabled and "Enabled" or "Disabled"))
                end)
            end
             
            -- Function to handle input for toggling GUI visibility
            local function onInputBegan(input)
                if input.KeyCode == Enum.KeyCode.U then
                    guiVisible = not guiVisible
                    if guiVisible then
                        createGui()
                    else
                        if screenGui then screenGui:Destroy() end
                    end
                end
            end
             
            -- Function to handle Click TP
            local function onClickTP(input)
                if clickTPEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local mousePosition = userInputService:GetMouseLocation()
                    local targetPosition = workspace.CurrentCamera:ScreenToWorldPoint(Vector3.new(mousePosition.X, mousePosition.Y, 0))
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end
             
            -- Connect input events
            userInputService.InputBegan:Connect(onInputBegan)
            userInputService.InputBegan:Connect(startDragging)
            userInputService.InputEnded:Connect(stopDragging)
            userInputService.InputChanged:Connect(updateDragging)
            userInputService.InputBegan:Connect(onClickTP) -- Connect Click TP
             
            -- Show notification for running the script
            createNotification("GUI script loaded")
            createGui() -- Initial creation of GUI
             
            -- Monitor player character for No-Clip application
            player.CharacterAdded:Connect(function(character)
                character.DescendantAdded:Connect(function(descendant)
                    if noClip and descendant:IsA("BasePart") and descendant.Name ~= "HumanoidRootPart" then
                        descendant.CanCollide = false
                    end
                end)
                applyNoClip(character)
            end)
            
            -- Return object with destroy function for callback
            return {
                Destroy = function()
                    if screenGui then
                        screenGui:Destroy()
                    end
                    customScriptEnabled = false
                end
            }
        end)
        
        if success then
            customScriptInstance = result
        else
            warn("Failed to load custom script: " .. tostring(result))
            customScriptEnabled = false
        end
    else
        -- Turn off the custom script (callback functionality)
        if customScriptInstance and typeof(customScriptInstance) == "table" and customScriptInstance.Destroy then
            customScriptInstance:Destroy()
        end
        customScriptInstance = nil
    end
    
    return customScriptEnabled
end

-- Speed Boost 2 functionality (duplicate of first speed boost)
local walkspeedEnabled2 = false
local walkspeedConnection2 = nil
local defaultWalkspeed2 = 16
local boostedWalkspeed2 = 50

local function updateWalkspeed2()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        if walkspeedEnabled2 then
            player.Character.Humanoid.WalkSpeed = boostedWalkspeed2
        else
            player.Character.Humanoid.WalkSpeed = defaultWalkspeed2
        end
    end
end

local function toggleWalkspeed2()
    walkspeedEnabled2 = not walkspeedEnabled2
    
    if walkspeedEnabled2 then
        -- Start the walkspeed update loop
        walkspeedConnection2 = RunService.Heartbeat:Connect(function()
            wait(0.1)
            updateWalkspeed2()
        end)
    else
        -- Stop the walkspeed update loop
        if walkspeedConnection2 then
            walkspeedConnection2:Disconnect()
            walkspeedConnection2 = nil
        end
        updateWalkspeed2() -- Reset to default
    end
    
    return walkspeedEnabled2
end

-- Button configurations
local buttonConfigs = {
    {name = "Speed Boost", color = Color3.fromRGB(50, 50, 50), isToggle = true, action = function()
        return toggleWalkspeed()
    end},
    {name = "Speed Boost 2", color = Color3.fromRGB(45, 45, 45), isToggle = true, action = function()
        return toggleWalkspeed2()
    end},
    {name = "No-Clip GUI", color = Color3.fromRGB(40, 40, 40), isToggle = true, action = function()
        return toggleCustomScript()
    end},
    {name = "Button 4", color = Color3.fromRGB(35, 35, 35), action = function()
        -- Function removed
    end}
}

-- Create buttons
for i, config in ipairs(buttonConfigs) do
    local button = Instance.new("TextButton")
    button.Name = "Button" .. i
    button.Size = UDim2.new(1, -20, 0, 35)
    button.Position = UDim2.new(0, 10, 0, (i-1) * 40 + 5)
    button.BackgroundColor3 = config.color
    button.BorderSizePixel = 0
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextScaled = true
    button.Font = Enum.Font.Gotham
    button.Parent = contentFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    
    -- Handle toggle buttons with improved styling
    if config.isToggle then
        local toggleState = false
        
        -- Create checkbox icon (separate from button text)
        local checkboxIcon = Instance.new("TextLabel")
        checkboxIcon.Name = "CheckboxIcon"
        checkboxIcon.Size = UDim2.new(0, 20, 0, 20)
        checkboxIcon.Position = UDim2.new(0, 8, 0.5, -10)
        checkboxIcon.BackgroundTransparency = 1
        checkboxIcon.Text = "☐"
        checkboxIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
        checkboxIcon.TextScaled = true
        checkboxIcon.Font = Enum.Font.GothamBold
        checkboxIcon.Parent = button
        
        -- Create text label for button name
        local buttonText = Instance.new("TextLabel")
        buttonText.Name = "ButtonText"
        buttonText.Size = UDim2.new(1, -35, 1, 0)
        buttonText.Position = UDim2.new(0, 35, 0, 0)
        buttonText.BackgroundTransparency = 1
        buttonText.Text = config.name
        buttonText.TextColor3 = Color3.fromRGB(255, 255, 255)
        buttonText.TextScaled = true
        buttonText.Font = Enum.Font.Gotham
        buttonText.TextXAlignment = Enum.TextXAlignment.Left
        buttonText.Parent = button
        
        -- Remove the original button text
        button.Text = ""
        
        button.MouseButton1Click:Connect(function()
            -- Execute the button's action if it exists and get the callback result
            local callbackResult = false
            if config.action then
                local success, result = pcall(config.action)
                if success then
                    callbackResult = result or false
                else
                    warn("Error executing action for " .. config.name .. ": " .. tostring(result))
                end
            end
            
            -- Update toggle state based on callback result
            toggleState = callbackResult
            
            if toggleState then
                checkboxIcon.Text = "✓"
                checkboxIcon.TextColor3 = Color3.fromRGB(255, 85, 85) -- Red checkmark only
                -- Keep button background the same
                button.BackgroundColor3 = config.color
            else
                checkboxIcon.Text = "☐"
                checkboxIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
                button.BackgroundColor3 = config.color
            end
        end)
        
    -- Handle slider buttons with much better styling
    elseif config.isSlider then
        local sliderValue = config.min
        
        -- Create text label for slider name and value
        local sliderText = Instance.new("TextLabel")
        sliderText.Name = "SliderText"
        sliderText.Size = UDim2.new(1, -20, 0, 18)
        sliderText.Position = UDim2.new(0, 10, 0, 3)
        sliderText.BackgroundTransparency = 1
        sliderText.Text = config.name .. ": " .. sliderValue
        sliderText.TextColor3 = Color3.fromRGB(255, 255, 255)
        sliderText.TextScaled = true
        sliderText.Font = Enum.Font.Gotham
        sliderText.TextXAlignment = Enum.TextXAlignment.Left
        sliderText.Parent = button
        
        -- Remove the original button text
        button.Text = ""
        
        -- Create slider track (improved design)
        local sliderTrack = Instance.new("Frame")
        sliderTrack.Name = "SliderTrack"
        sliderTrack.Size = UDim2.new(0.8, 0, 0, 6)
        sliderTrack.Position = UDim2.new(0.1, 0, 0, 22)
        sliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        sliderTrack.BorderSizePixel = 0
        sliderTrack.Parent = button
        
        local sliderTrackCorner = Instance.new("UICorner")
        sliderTrackCorner.CornerRadius = UDim.new(0, 3)
        sliderTrackCorner.Parent = sliderTrack
        
        -- Create slider fill (progress bar)
        local sliderFill = Instance.new("Frame")
        sliderFill.Name = "SliderFill"
        sliderFill.Size = UDim2.new(0, 0, 1, 0)
        sliderFill.Position = UDim2.new(0, 0, 0, 0)
        sliderFill.BackgroundColor3 = Color3.fromRGB(100, 200, 255) -- Nice blue color
        sliderFill.BorderSizePixel = 0
        sliderFill.Parent = sliderTrack
        
        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(0, 3)
        sliderFillCorner.Parent = sliderFill
        
        -- Create slider handle (much better looking)
        local sliderHandle = Instance.new("Frame")
        sliderHandle.Name = "SliderHandle"
        sliderHandle.Size = UDim2.new(0, 16, 0, 16)
        sliderHandle.Position = UDim2.new(0, -8, 0, -5)
        sliderHandle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        sliderHandle.BorderSizePixel = 0
        sliderHandle.Parent = sliderTrack
        
        local sliderHandleCorner = Instance.new("UICorner")
        sliderHandleCorner.CornerRadius = UDim.new(0, 8)
        sliderHandleCorner.Parent = sliderHandle
        
        -- Add shadow effect to handle
        local handleShadow = Instance.new("Frame")
        handleShadow.Name = "HandleShadow"
        handleShadow.Size = UDim2.new(0, 18, 0, 18)
        handleShadow.Position = UDim2.new(0, -9, 0, -6)
        handleShadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        handleShadow.BackgroundTransparency = 0.5
        handleShadow.BorderSizePixel = 0
        handleShadow.ZIndex = sliderHandle.ZIndex - 1
        handleShadow.Parent = sliderTrack
        
        local handleShadowCorner = Instance.new("UICorner")
        handleShadowCorner.CornerRadius = UDim.new(0, 9)
        handleShadowCorner.Parent = handleShadow
        
        -- Slider functionality
        local dragging = false
        
        local function updateSlider(input)
            local sliderTrackAbsolutePos = sliderTrack.AbsolutePosition
            local sliderTrackAbsoluteSize = sliderTrack.AbsoluteSize
            local relativeX = math.clamp((input.Position.X - sliderTrackAbsolutePos.X) / sliderTrackAbsoluteSize.X, 0, 1)
            
            sliderValue = math.floor(config.min + (config.max - config.min) * relativeX)
            
            -- Update visual elements with smooth animation
            local targetFillSize = UDim2.new(relativeX, 0, 1, 0)
            local targetHandlePos = UDim2.new(relativeX, -8, 0, -5)
            local targetShadowPos = UDim2.new(relativeX, -9, 0, -6)
            
            TweenService:Create(sliderFill, TweenInfo.new(0.1), {Size = targetFillSize}):Play()
            TweenService:Create(sliderHandle, TweenInfo.new(0.1), {Position = targetHandlePos}):Play()
            TweenService:Create(handleShadow, TweenInfo.new(0.1), {Position = targetShadowPos}):Play()
            
            sliderText.Text = config.name .. ": " .. sliderValue
            
            -- Execute action
            if config.action then
                local success, error = pcall(config.action, sliderValue)
                if not success then
                    warn("Error executing action for " .. config.name .. ": " .. tostring(error))
                end
            end
        end
        
        -- Handle mouse/touch input
        sliderTrack.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                updateSlider(input)
                
                -- Visual feedback when dragging starts
                TweenService:Create(sliderHandle, TweenInfo.new(0.1), {
                    Size = UDim2.new(0, 18, 0, 18),
                    Position = UDim2.new(sliderHandle.Position.X.Scale, -9, 0, -6)
                }):Play()
            end
        end)
        
        sliderTrack.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                updateSlider(input)
            end
        end)
        
        sliderTrack.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
                
                -- Reset handle size when dragging ends
                TweenService:Create(sliderHandle, TweenInfo.new(0.1), {
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new(sliderHandle.Position.X.Scale, -8, 0, -5)
                }):Play()
            end
        end)
        
        -- Initialize slider at minimum value
        sliderFill.Size = UDim2.new(0, 0, 1, 0)
        sliderHandle.Position = UDim2.new(0, -8, 0, -5)
        handleShadow.Position = UDim2.new(0, -9, 0, -6)
        
    -- Handle regular buttons
    else
        button.Text = config.name
        
        button.MouseButton1Click:Connect(function()
            -- Execute the button's action if it exists
            if config.action then
                local success, error = pcall(config.action)
                if not success then
                    warn("Error executing action for " .. config.name .. ": " .. tostring(error))
                end
            end
            
            -- Visual feedback with better animation
            local originalColor = button.BackgroundColor3
            local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            
            TweenService:Create(button, tweenInfo, {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play()
            
            wait(0.1)
            
            TweenService:Create(button, tweenInfo, {BackgroundColor3 = originalColor}):Play()
        end)
    end
end

-- Dropdown functionality
local isOpen = false
local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)

local function toggleDropdown()
    isOpen = not isOpen
    
    local targetSize, targetRotation
    if isOpen then
        targetSize = UDim2.new(0, 250, 0, 210) -- Adjusted height for 4 buttons
        targetRotation = 180
    else
        targetSize = UDim2.new(0, 250, 0, 50)
        targetRotation = 0
    end
    
    -- Animate main frame
    local sizeTween = TweenService:Create(mainFrame, tweenInfo, {Size = targetSize})
    sizeTween:Play()
    
    -- Animate toggle button rotation
    local rotationTween = TweenService:Create(toggleButton, tweenInfo, {Rotation = targetRotation})
    rotationTween:Play()
end

toggleButton.MouseButton1Click:Connect(toggleDropdown)

-- Dragging functionality
local dragToggle = nil
local dragSpeed = 0
local dragStart = nil
local startPos = nil

local function updateInput(input)
    local delta = input.Position - dragStart
    local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    TweenService:Create(mainFrame, TweenInfo.new(dragSpeed), {Position = position}):Play()
end

headerFrame.InputBegan:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
        dragToggle = true
        dragStart = input.Position
        startPos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragToggle = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        if dragToggle then
            updateInput(input)
        end
    end
end)

-- Mobile touch support for dragging
headerFrame.TouchMoved:Connect(function(touch, gameProcessed)
    if dragToggle then
        updateInput(touch)
    end
end)

print("Improved Dropdown GUI loaded successfully!")
