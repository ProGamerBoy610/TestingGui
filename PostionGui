-- Load the library
print("LMAIN")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/ProGamerBoy610/Script-Hub/refs/heads/main/maintop.lua"))()
print("CMAIN")

print("LTABS")
-- Create all tabs
local infoTab = Library:CreateTab("INFO")
local mainTab = Library:CreateTab("USER")
local espTab = Library:CreateTab("VISUAL")
local tpTab = Library:CreateTab("TP")
local autoTab = Library:CreateTab("AUTO")
local destroyTab = Library:CreateTab("DESTROY")
print("CTABS")

-- INFO Tab Components
Library:CreateLabel(infoTab, "99 Nights In The Forest v3.9")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

Library:CreateTextLabel(infoTab, "Welcome, " .. LocalPlayer.Name)
-- Services
local RunService = game:GetService("RunService")

-- SOLUTION 1: If Library:CreateTextLabel exists (your preferred way)
local startTime = tick()

-- Create the label (assuming this function exists in your library)
local timerLabel = Library:CreateTextLabel and Library:CreateTextLabel(infoTab, "Timer: 0s")

if timerLabel then
    -- Update it every frame
    RunService.Heartbeat:Connect(function()
        local elapsed = math.floor(tick() - startTime)
        local hours = math.floor(elapsed / 3600)
        local minutes = math.floor((elapsed % 3600) / 60)
        local seconds = elapsed % 60
        
        if hours > 0 then
            timerLabel.Text = string.format("Timer: %02d:%02d:%02d", hours, minutes, seconds)
        else
            timerLabel.Text = string.format("Timer: %02d:%02d", minutes, seconds)
        end
    end)
end

-- Services
local RunService = game:GetService("RunService")

-- SOLUTION 1: If Library:CreateTextLabel exists (your preferred way)
local startTime = tick()

-- Create the label (assuming this function exists in your library)
local timerLabel = Library:CreateTextLabel and Library:CreateTextLabel(infoTab, "Timer: 0s")

if timerLabel then
    -- Update it every frame
    RunService.Heartbeat:Connect(function()
        local elapsed = math.floor(tick() - startTime)
        local hours = math.floor(elapsed / 3600)
        local minutes = math.floor((elapsed % 3600) / 60)
        local seconds = elapsed % 60
        
        if hours > 0 then
            timerLabel.Text = string.format("Timer: %02d:%02d:%02d", hours, minutes, seconds)
        else
            timerLabel.Text = string.format("Timer: %02d:%02d", minutes, seconds)
        end
    end)
end

Library:CreateTextLabel(infoTab, "Created by: Fryzer")
Library:CreateLabel(infoTab, "Join Discord")
Library:CreateButton(infoTab, "Join Discord For More Scripts", function()
    print("üîó Discord link clicked!")
    -- Add your discord invite link here
end)


-- UserTab

Library:CreateLabel(mainTab, "Player Scripts")

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

-- Default values
local defaultSpeed = 16
local defaultJumpHeight = 7.2
local iyflyspeed = 1
local vehicleflyspeed = 1

-- Global variables
_G.CurrentWalkSpeed = defaultSpeed
_G.CurrentJumpHeight = defaultJumpHeight

-- WalkSpeed Toggle
Library:CreateToggle(mainTab, "WalkSpeed", false, function(state)
    if state then
        -- Set to current value when enabled
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = _G.CurrentWalkSpeed or defaultSpeed
        end
    else
        -- Reset to default when disabled
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = defaultSpeed
        end
    end
    print("‚úÖ WalkSpeed", state and "ON" or "OFF")
end)

-- Speed Slider
Library:CreateSlider(mainTab, "Speed Changer", 16, 100, 16, function(val)
    _G.CurrentWalkSpeed = val
    -- Update immediately if character exists
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = val
    end
    print("üìè WalkSpeed set to:", val)
end)

-- Jump Power Toggle
Library:CreateToggle(mainTab, "Enable Jump Power", false, function(state)
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    if humanoid then
        if state then
            humanoid.UseJumpPower = false -- Ensure JumpHeight is used
            humanoid.JumpHeight = _G.CurrentJumpHeight or defaultJumpHeight
        else
            humanoid.JumpHeight = defaultJumpHeight
        end
    end
    print("‚úÖ Jump Height", state and "ON" or "OFF")
end)

-- Jump Power Slider
Library:CreateSlider(mainTab, "Jump Power", 7, 50, 7, function(val)
    _G.CurrentJumpHeight = val
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.JumpHeight = val
    end
    print("üìè Jump Height set to:", val)
end)

-- Fly System Variables
local IYMouse = Players.LocalPlayer:GetMouse()
local FLYING = false
local QEfly = true
local ActivateFly = false
local flyKeyDown, flyKeyUp
local mfly1, mfly2
local velocityHandlerName = "BodyVelocity"
local gyroHandlerName = "BodyGyro"

-- Fly Functions
local function sFLY(vfly)
    repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart") and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    repeat wait() until IYMouse
    if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

    local T = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0

    local function FLY()
        FLYING = true
        local BG = Instance.new('BodyGyro')
        local BV = Instance.new('BodyVelocity')
        BG.P = 9e4
        BG.Parent = T
        BV.Parent = T
        BG.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        BG.CFrame = T.CFrame
        BV.Velocity = Vector3.new(0, 0, 0)
        BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        task.spawn(function()
            repeat wait()
                if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                    Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
                end
                if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                    SPEED = 50
                elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                    SPEED = 0
                end
                if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                    BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                    lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
                elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                    BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                else
                    BV.Velocity = Vector3.new(0, 0, 0)
                end
                BG.CFrame = workspace.CurrentCamera.CoordinateFrame
            until not FLYING
            CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            SPEED = 0
            BG:Destroy()
            BV:Destroy()
            if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
            end
        end)
    end
    
    flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 's' then
            CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'a' then
            CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'd' then 
            CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
        elseif QEfly and KEY:lower() == 'e' then
            CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
        elseif QEfly and KEY:lower() == 'q' then
            CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
        end
        pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
    end)
    
    flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = 0
        elseif KEY:lower() == 's' then
            CONTROL.B = 0
        elseif KEY:lower() == 'a' then
            CONTROL.L = 0
        elseif KEY:lower() == 'd' then
            CONTROL.R = 0
        elseif KEY:lower() == 'e' then
            CONTROL.Q = 0
        elseif KEY:lower() == 'q' then
            CONTROL.E = 0
        end
    end)
    FLY()
end

local function NOFLY()
    FLYING = false
    if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
    if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
        Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
    end
    pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end

local function UnMobileFly()
    pcall(function()
        FLYING = false
        local root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        root:FindFirstChild(velocityHandlerName):Destroy()
        root:FindFirstChild(gyroHandlerName):Destroy()
        Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
        mfly1:Disconnect()
        mfly2:Disconnect()
    end)
end

local function MobileFly()
    UnMobileFly()
    FLYING = true

    local root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    local v3none = Vector3.new()
    local v3zero = Vector3.new(0, 0, 0)
    local v3inf = Vector3.new(9e9, 9e9, 9e9)

    local controlModule = require(Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.Parent = root
    bv.MaxForce = v3zero
    bv.Velocity = v3zero

    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.Parent = root
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50

    mfly1 = Players.LocalPlayer.CharacterAdded:Connect(function()
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 50
    end)

    mfly2 = RunService.RenderStepped:Connect(function()
        root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        camera = workspace.CurrentCamera
        if Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
            local humanoid = Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
            local VelocityHandler = root:FindFirstChild(velocityHandlerName)
            local GyroHandler = root:FindFirstChild(gyroHandlerName)

            VelocityHandler.MaxForce = v3inf
            GyroHandler.MaxTorque = v3inf
            humanoid.PlatformStand = true
            GyroHandler.CFrame = camera.CoordinateFrame
            VelocityHandler.Velocity = v3none

            local direction = controlModule:GetMoveVector()
            if direction.X > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((iyflyspeed) * 50))
            end
            if direction.X < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((iyflyspeed) * 50))
            end
            if direction.Z > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((iyflyspeed) * 50))
            end
            if direction.Z < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((iyflyspeed) * 50))
            end
        end
    end)
end

-- Fly Speed Slider
Library:CreateSlider(mainTab, "Fly Speed", 1, 100, 10, function(val)
    iyflyspeed = val / 10 -- Convert to decimal
    print("üìè Fly Speed set to:", val .. "%")
end)

-- Fly Toggle
Library:CreateToggle(mainTab, "Fly", false, function(state)
    ActivateFly = state
    task.spawn(function()
        if not FLYING and ActivateFly then
            if UserInputService.TouchEnabled then
                MobileFly()
            else
                NOFLY()
                wait()
                sFLY()
            end
        elseif FLYING and not ActivateFly then
            if UserInputService.TouchEnabled then
                UnMobileFly()
            else
                NOFLY()
            end
        end
    end)
    print("‚úÖ Fly", state and "ON" or "OFF")
end)

-- Noclip System
local noclipConnection
local noclipEnabled = false

Library:CreateToggle(mainTab, "Noclip", false, function(state)
    noclipEnabled = state

    if state then
        -- Start noclip
        noclipConnection = RunService.Stepped:Connect(function()
            local character = LocalPlayer.Character
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        -- Stop noclip and restore collisions
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
        local character = LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end

    print("‚úÖ Noclip", state and "ON" or "OFF")
end)

-- Additional utility button for testing
Library:CreateButton(mainTab, "Reset Character", function()
    if LocalPlayer.Character then
        LocalPlayer.Character:BreakJoints()
    end
    print("‚úÖ Character reset!")
end)

-- ESP TAB
-- Services


Library:CreateLabel(espTab, "ESP")

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer

-- Health Billboard System
local healthBillboardEnabled = false
local connections = {}
local tracked = {}

local SETTINGS = {
    Name = "HealthBillboard",
    MaxDistance = 250,
    StudsOffset = Vector3.new(0, 3.5, 0),
    TextFont = Enum.Font.GothamBold,
    TextSize = 14,
    AlwaysOnTop = true,
    UpdateHz = 30,
    UseBar = true,
    ShowModelName = false,
    BarHeight = 6,
    BorderThickness = 2.5,
}

local function clamp(n, a, b) return math.max(a, math.min(b, n)) end

local function lerpColor(c1, c2, t)
    return Color3.new(
        c1.R + (c2.R - c1.R) * t,
        c1.G + (c2.G - c1.G) * t,
        c1.B + (c2.B - c1.B) * t
    )
end

local function colorByPercent(p)
    p = clamp(p, 0, 1)
    return lerpColor(Color3.fromRGB(255, 60, 60), Color3.fromRGB(60, 255, 90), p)
end

local function findHead(model)
    local head = model:FindFirstChild("Head")
    if head and head:IsA("BasePart") then return head end
    local best, bestY = nil, -math.huge
    for _, obj in ipairs(model:GetDescendants()) do
        if obj:IsA("BasePart") and obj.CanCollide then
            if obj.Position.Y > bestY then
                bestY = obj.Position.Y
                best = obj
            end
        end
    end
    return best
end

local function makeBillboard(humanoid, head, model)
    if tracked[humanoid] and tracked[humanoid].Parent then return tracked[humanoid] end

    local bb = Instance.new("BillboardGui")
    bb.Name = SETTINGS.Name
    bb.Adornee = head
    bb.AlwaysOnTop = SETTINGS.AlwaysOnTop
    bb.Size = UDim2.fromOffset(160, SETTINGS.UseBar and (26 + SETTINGS.BarHeight) or 26)
    bb.StudsOffset = SETTINGS.StudsOffset
    bb.MaxDistance = SETTINGS.MaxDistance
    bb.ResetOnSpawn = false
    bb.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    bb.Parent = head

    local holder = Instance.new("Frame")
    holder.Size = UDim2.fromScale(1, 1)
    holder.BackgroundTransparency = 1
    holder.Parent = bb

    local text = Instance.new("TextLabel")
    text.Name = "HPText"
    text.Size = UDim2.new(1, -12, 0, 24)
    text.Position = UDim2.fromOffset(6, 2)
    text.BackgroundTransparency = 1
    text.TextColor3 = Color3.new(1,1,1)
    text.TextStrokeTransparency = 0.5
    text.Font = SETTINGS.TextFont
    text.TextSize = SETTINGS.TextSize
    text.Parent = holder

    local barFrame, barFill
    if SETTINGS.UseBar then
        barFrame = Instance.new("Frame")
        barFrame.Name = "Bar"
        barFrame.Size = UDim2.new(1, -12, 0, SETTINGS.BarHeight)
        barFrame.Position = UDim2.fromOffset(6, 26)
        barFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
        barFrame.BorderSizePixel = SETTINGS.BorderThickness
        barFrame.Parent = holder

        barFill = Instance.new("Frame")
        barFill.Name = "Fill"
        barFill.Size = UDim2.fromScale(1, 1)
        barFill.BackgroundColor3 = Color3.fromRGB(60, 255, 90)
        barFill.BorderSizePixel = 0
        barFill.Parent = barFrame
    end

    tracked[humanoid] = bb

    local lastDisplayPct = 1
    local function update()
        if not healthBillboardEnabled then return end
        local hp = clamp(humanoid.Health, 0, math.max(1, humanoid.MaxHealth))
        local maxHp = math.max(1, humanoid.MaxHealth)
        local pct = hp / maxHp
        text.Text = string.format("%d / %d", math.floor(hp + 0.5), math.floor(maxHp + 0.5))

        if barFill then
            lastDisplayPct = lastDisplayPct + (pct - lastDisplayPct) * 0.35
            barFill.Size = UDim2.fromScale(lastDisplayPct, 1)
            barFill.BackgroundColor3 = colorByPercent(lastDisplayPct)
        else
            text.TextColor3 = colorByPercent(pct)
        end
    end

    local healthConn = humanoid.HealthChanged:Connect(update)
    local maxHealthConn = humanoid:GetPropertyChangedSignal("MaxHealth"):Connect(update)
    local diedConn = humanoid.Died:Connect(function()
        if tracked[humanoid] then
            tracked[humanoid]:Destroy()
            tracked[humanoid] = nil
        end
    end)
    local heartbeatConn = RunService.Heartbeat:Connect(update)

    connections[humanoid] = {healthConn, maxHealthConn, diedConn, heartbeatConn}

    update()
end

local function attachToModel(model)
    if not model or not model:IsA("Model") then return end
    if Players:GetPlayerFromCharacter(model) == LocalPlayer then return end
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    local head = findHead(model)
    if not head then return end
    makeBillboard(humanoid, head, model)
end

local function enableHealthBillboards()
    for _, hum in ipairs(workspace:GetDescendants()) do
        if hum:IsA("Humanoid") and hum.Parent and hum.Parent:IsA("Model") then
            attachToModel(hum.Parent)
        end
    end

    connections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Humanoid") then
            local model = obj.Parent
            if model and model:IsA("Model") then
                task.defer(function()
                    attachToModel(model)
                end)
            end
        end
    end)

    connections.playerAdded = Players.PlayerAdded:Connect(function(plr)
        plr.CharacterAdded:Connect(function(char)
            task.defer(function()
                attachToModel(char)
            end)
        end)
    end)

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Character then attachToModel(plr.Character) end
        plr.CharacterAdded:Connect(function(char)
            task.defer(function()
                attachToModel(char)
            end)
        end)
    end
end

local function disableHealthBillboards()
    for humanoid, connList in pairs(connections) do
        if type(connList) == "table" then
            for _, conn in ipairs(connList) do
                conn:Disconnect()
            end
        elseif connList.Disconnect then
            connList:Disconnect()
        end
    end
    connections = {}

    for humanoid, billboard in pairs(tracked) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    tracked = {}

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("BillboardGui") and obj.Name == SETTINGS.Name then
            obj:Destroy()
        end
    end
end

-- Health Billboard Toggle
Library:CreateToggle(espTab, "Health Billboard", false, function(state)
    healthBillboardEnabled = state
    if state then
        enableHealthBillboards()
    else
        disableHealthBillboards()
    end
    print("‚úÖ Health Billboard", state and "ON" or "OFF")
end)

-- ESP System Variables
local ActiveEspItems = false
local ActiveEspEnemy = false
local ActiveEspChildren = false
local ActiveEspPeltTrader = false
local ActiveDistanceEsp = false

local function CreateEsp(Char, Color, Text, Parent, number)
    if not Char or not Parent or not Parent:IsA("BasePart") then return end
    if Char:FindFirstChildOfClass("Highlight") or Parent:FindFirstChild("ESP") then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = Char
    highlight.FillColor = Color
    highlight.FillTransparency = 1
    highlight.OutlineColor = Color
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = Char

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP"
    billboard.Size = UDim2.new(0, 50, 0, 25)
    billboard.AlwaysOnTop = true
    billboard.StudsOffset = Vector3.new(0, number or 2, 0)
    billboard.Adornee = Parent
    billboard.Parent = Parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = Text
    label.TextColor3 = Color
    label.TextScaled = true
    label.Parent = billboard

    task.spawn(function()
        while highlight.Parent and billboard.Parent and Parent.Parent do
            local camera = workspace.CurrentCamera
            if ActiveDistanceEsp and camera and Parent:IsA("BasePart") then
                local distance = (camera.CFrame.Position - Parent.Position).Magnitude
                label.Text = Text .. " (" .. math.floor(distance + 0.5) .. " m)"
            else
                label.Text = Text
            end
            RunService.Heartbeat:Wait()
        end
        if highlight.Parent then highlight:Destroy() end
        if billboard.Parent then billboard:Destroy() end
    end)
end

local function RemoveEsp(Char, Parent)
    if Char and Char:FindFirstChildOfClass("Highlight") then
        Char:FindFirstChildOfClass("Highlight"):Destroy()
    end
    if Parent and Parent:FindFirstChild("ESP") then
        Parent:FindFirstChild("ESP"):Destroy()
    end
end

local function UpdateItemsEsp()
    if not workspace:FindFirstChild("Items") then return end
    if ActiveEspItems then
        for _, obj in pairs(workspace.Items:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart then
                CreateEsp(obj, Color3.fromRGB(255, 255, 0), obj.Name, obj.PrimaryPart, 2)
            end
        end
    else
        for _, obj in pairs(workspace.Items:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdateEnemiesEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspEnemy then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               not (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                    obj.Name == "Lost Child3" or obj.Name == "Lost Child4" or
                    obj.Name == "Pelt Trader") then
                CreateEsp(obj, Color3.fromRGB(255, 0, 0), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               not (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                    obj.Name == "Lost Child3" or obj.Name == "Lost Child4" or
                    obj.Name == "Pelt Trader") then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdateChildrenEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspChildren then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                obj.Name == "Lost Child3" or obj.Name == "Lost Child4") then
                CreateEsp(obj, Color3.fromRGB(0, 255, 0), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                obj.Name == "Lost Child3" or obj.Name == "Lost Child4") then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdatePeltTraderEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspPeltTrader then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and obj.Name == "Pelt Trader" then
                CreateEsp(obj, Color3.fromRGB(0, 255, 255), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and obj.Name == "Pelt Trader" then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

-- ESP Items Toggle
Library:CreateToggle(espTab, "ESP Items", false, function(state)
    ActiveEspItems = state
    UpdateItemsEsp()
    print("‚úÖ ESP Items", state and "ON" or "OFF")
end)

-- ESP Enemies Toggle
Library:CreateToggle(espTab, "ESP Enemies", false, function(state)
    ActiveEspEnemy = state
    UpdateEnemiesEsp()
    print("‚úÖ ESP Enemies", state and "ON" or "OFF")
end)

-- ESP Children Toggle
Library:CreateToggle(espTab, "ESP Children", false, function(state)
    ActiveEspChildren = state
    UpdateChildrenEsp()
    print("‚úÖ ESP Children", state and "ON" or "OFF")
end)

-- ESP Pelt Trader Toggle
Library:CreateToggle(espTab, "ESP Pelt Trader", false, function(state)
    ActiveEspPeltTrader = state
    UpdatePeltTraderEsp()
    print("‚úÖ ESP Pelt Trader", state and "ON" or "OFF")
end)

-- Show Distance Toggle
Library:CreateToggle(espTab, "Show Distance in ESP", false, function(state)
    ActiveDistanceEsp = state
    if ActiveEspItems then UpdateItemsEsp() end
    if ActiveEspEnemy then UpdateEnemiesEsp() end
    if ActiveEspChildren then UpdateChildrenEsp() end
    if ActiveEspPeltTrader then UpdatePeltTraderEsp() end
    print("‚úÖ Show Distance in ESP", state and "ON" or "OFF")
end)

-- Clear All ESP Button
Library:CreateButton(espTab, "Clear All ESP", function()
    ActiveEspItems = false
    ActiveEspEnemy = false
    ActiveEspChildren = false
    ActiveEspPeltTrader = false
    
    UpdateItemsEsp()
    UpdateEnemiesEsp()
    UpdateChildrenEsp()
    UpdatePeltTraderEsp()
    
    print("‚úÖ All ESP cleared!")
end)

-- ESP Color Theme Dropdown
Library:CreateDropdown(espTab, "ESP Color Theme", {"Default", "Bright", "Dark", "Neon"}, "Default", function(value)
    print("üé® ESP Color Theme selected:", value)
    -- You can modify the colors based on the selected theme here
    if value == "Bright" then
        -- Bright colors
    elseif value == "Dark" then
        -- Dark colors  
    elseif value == "Neon" then
        -- Neon colors
    end
end)

-- Setup ESP connections for dynamic updates
local function setupEspConnections()
    if workspace:FindFirstChild("Items") then
        workspace.Items.ChildAdded:Connect(function(child)
            if ActiveEspItems and child:IsA("Model") and child.PrimaryPart then
                CreateEsp(child, Color3.fromRGB(255, 255, 0), child.Name, child.PrimaryPart, 2)
            end
        end)

        workspace.Items.ChildRemoved:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                RemoveEsp(child, child.PrimaryPart)
            end
        end)
    end

    if workspace:FindFirstChild("Characters") then
        workspace.Characters.ChildAdded:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                if ActiveEspEnemy and
                   not (child.Name == "Lost Child" or child.Name == "Lost Child2" or
                        child.Name == "Lost Child3" or child.Name == "Lost Child4" or
                        child.Name == "Pelt Trader") then
                    CreateEsp(child, Color3.fromRGB(255, 0, 0), child.Name, child.PrimaryPart, 3)
                elseif ActiveEspChildren and
                   (child.Name == "Lost Child" or child.Name == "Lost Child2" or
                    child.Name == "Lost Child3" or child.Name == "Lost Child4") then
                    CreateEsp(child, Color3.fromRGB(0, 255, 0), child.Name, child.PrimaryPart, 3)
                elseif ActiveEspPeltTrader and child.Name == "Pelt Trader" then
                    CreateEsp(child, Color3.fromRGB(0, 255, 255), child.Name, child.PrimaryPart, 3)
                end
            end
        end)

        workspace.Characters.ChildRemoved:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                RemoveEsp(child, child.PrimaryPart)
            end
        end)
    end
end

setupEspConnections()

Library:CreateLabel(espTab, "PLAYER ESP")

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Player ESP Variables
local playerESPEnabled = false
local trackedPlayers = {}
local espConnections = {}

-- ESP Settings
local ESP_SETTINGS = {
    FillColor = Color3.fromRGB(255, 0, 0),
    FillTransparency = 0.8,
    OutlineColor = Color3.fromRGB(255, 255, 255),
    OutlineTransparency = 0,
    TextColor = Color3.fromRGB(255, 255, 255),
    TextSize = 14,
    MaxDistance = 1000,
    ShowDistance = true,
    ShowHealth = true,
    ShowNames = true,
    HealthBarEnabled = true,
    HealthBarHeight = 4
}

-- Create ESP for a player
local function createPlayerESP(player)
    if player == LocalPlayer then return end -- Don't ESP ourselves
    if not player.Character then return end
    if trackedPlayers[player] then return end -- Already has ESP
    
    local character = player.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then return end
    
    -- Create Highlight
    local highlight = Instance.new("Highlight")
    highlight.Name = "PlayerESP_Highlight"
    highlight.Adornee = character
    highlight.FillColor = ESP_SETTINGS.FillColor
    highlight.FillTransparency = ESP_SETTINGS.FillTransparency
    highlight.OutlineColor = ESP_SETTINGS.OutlineColor
    highlight.OutlineTransparency = ESP_SETTINGS.OutlineTransparency
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = character
    
    -- Create Billboard GUI
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlayerESP_Billboard"
    billboard.Size = UDim2.new(0, 200, 0, 100)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = ESP_SETTINGS.MaxDistance
    billboard.Adornee = rootPart
    billboard.Parent = rootPart
    
    -- Create main frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard
    
    -- Create name label
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.DisplayName
    nameLabel.TextColor3 = ESP_SETTINGS.TextColor
    nameLabel.TextSize = ESP_SETTINGS.TextSize
    nameLabel.TextStrokeTransparency = 0.5
    nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.Parent = frame
    
    -- Create distance label
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Name = "DistanceLabel"
    distanceLabel.Size = UDim2.new(1, 0, 0, 15)
    distanceLabel.Position = UDim2.new(0, 0, 0, 20)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.Text = "0m"
    distanceLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    distanceLabel.TextSize = ESP_SETTINGS.TextSize - 2
    distanceLabel.TextStrokeTransparency = 0.5
    distanceLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    distanceLabel.Font = Enum.Font.Gotham
    distanceLabel.Parent = frame
    
    -- Create health label
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Name = "HealthLabel"
    healthLabel.Size = UDim2.new(1, 0, 0, 15)
    healthLabel.Position = UDim2.new(0, 0, 0, 35)
    healthLabel.BackgroundTransparency = 1
    healthLabel.Text = "100/100"
    healthLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    healthLabel.TextSize = ESP_SETTINGS.TextSize - 2
    healthLabel.TextStrokeTransparency = 0.5
    healthLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    healthLabel.Font = Enum.Font.Gotham
    healthLabel.Parent = frame
    
    -- Create health bar background
    local healthBarBG = Instance.new("Frame")
    healthBarBG.Name = "HealthBarBG"
    healthBarBG.Size = UDim2.new(1, 0, 0, ESP_SETTINGS.HealthBarHeight)
    healthBarBG.Position = UDim2.new(0, 0, 0, 50)
    healthBarBG.BackgroundColor3 = Color3.new(0, 0, 0)
    healthBarBG.BorderSizePixel = 1
    healthBarBG.BorderColor3 = Color3.new(1, 1, 1)
    healthBarBG.Parent = frame
    
    -- Create health bar fill
    local healthBarFill = Instance.new("Frame")
    healthBarFill.Name = "HealthBarFill"
    healthBarFill.Size = UDim2.new(1, 0, 1, 0)
    healthBarFill.Position = UDim2.new(0, 0, 0, 0)
    healthBarFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthBarFill.BorderSizePixel = 0
    healthBarFill.Parent = healthBarBG
    
    -- Update function
    local function updateESP()
        if not playerESPEnabled then return end
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        
        local playerRoot = player.Character.HumanoidRootPart
        local localRoot = LocalPlayer.Character.HumanoidRootPart
        local playerHumanoid = player.Character:FindFirstChildOfClass("Humanoid")
        
        if not playerRoot or not localRoot or not playerHumanoid then return end
        
        -- Update distance
        if ESP_SETTINGS.ShowDistance then
            local distance = (localRoot.Position - playerRoot.Position).Magnitude
            distanceLabel.Text = math.floor(distance) .. "m"
            distanceLabel.Visible = true
        else
            distanceLabel.Visible = false
        end
        
        -- Update health
        if ESP_SETTINGS.ShowHealth then
            local health = math.floor(playerHumanoid.Health)
            local maxHealth = math.floor(playerHumanoid.MaxHealth)
            local healthPercent = health / maxHealth
            
            healthLabel.Text = health .. "/" .. maxHealth
            healthLabel.Visible = true
            
            -- Update health bar
            if ESP_SETTINGS.HealthBarEnabled then
                healthBarBG.Visible = true
                healthBarFill.Size = UDim2.new(healthPercent, 0, 1, 0)
                
                -- Color based on health percentage
                if healthPercent > 0.6 then
                    healthBarFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green
                    healthLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                elseif healthPercent > 0.3 then
                    healthBarFill.BackgroundColor3 = Color3.fromRGB(255, 255, 0) -- Yellow
                    healthLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                else
                    healthBarFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red
                    healthLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                end
            else
                healthBarBG.Visible = false
            end
        else
            healthLabel.Visible = false
            healthBarBG.Visible = false
        end
        
        -- Update name
        if ESP_SETTINGS.ShowNames then
            nameLabel.Text = player.DisplayName
            nameLabel.Visible = true
        else
            nameLabel.Visible = false
        end
    end
    
    -- Store ESP components
    trackedPlayers[player] = {
        highlight = highlight,
        billboard = billboard,
        updateFunction = updateESP
    }
    
    -- Connect update function
    local connection = RunService.Heartbeat:Connect(updateESP)
    espConnections[player] = connection
    
    -- Handle player leaving
    local function onPlayerRemoving()
        removePlayerESP(player)
    end
    
    -- Connect to player removing (will be cleaned up when player leaves)
    local removeConnection = Players.PlayerRemoving:Connect(function(removedPlayer)
        if removedPlayer == player then
            onPlayerRemoving()
        end
    end)
    
    -- Store the remove connection
    if not espConnections[player] then
        espConnections[player] = {}
    end
    if type(espConnections[player]) == "table" then
        espConnections[player].removeConnection = removeConnection
    end
    
    -- Initial update
    updateESP()
end

-- Remove ESP for a player
local function removePlayerESP(player)
    if trackedPlayers[player] then
        -- Destroy ESP components
        if trackedPlayers[player].highlight then
            trackedPlayers[player].highlight:Destroy()
        end
        if trackedPlayers[player].billboard then
            trackedPlayers[player].billboard:Destroy()
        end
        trackedPlayers[player] = nil
    end
    
    -- Disconnect connections
    if espConnections[player] then
        if type(espConnections[player]) == "userdata" then
            espConnections[player]:Disconnect()
        elseif type(espConnections[player]) == "table" then
            if espConnections[player].removeConnection then
                espConnections[player].removeConnection:Disconnect()
            end
        end
        espConnections[player] = nil
    end
end

-- Enable ESP for all players
local function enablePlayerESP()
    playerESPEnabled = true
    
    -- Add ESP to existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            createPlayerESP(player)
        end
    end
    
    -- Connect to new players joining
    espConnections.playerAdded = Players.PlayerAdded:Connect(function(player)
        if playerESPEnabled then
            -- Wait for character to load
            player.CharacterAdded:Connect(function(character)
                if playerESPEnabled then
                    wait(1) -- Small delay to ensure everything is loaded
                    createPlayerESP(player)
                end
            end)
        end
    end)
    
    -- Connect to existing players respawning
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            player.CharacterAdded:Connect(function(character)
                if playerESPEnabled then
                    wait(1) -- Small delay to ensure everything is loaded
                    createPlayerESP(player)
                end
            end)
        end
    end
    
    print("‚úÖ Player ESP Enabled")
end

-- Disable ESP for all players
local function disablePlayerESP()
    playerESPEnabled = false
    
    -- Remove ESP from all tracked players
    for player, _ in pairs(trackedPlayers) do
        removePlayerESP(player)
    end
    
    -- Disconnect main connections
    if espConnections.playerAdded then
        espConnections.playerAdded:Disconnect()
        espConnections.playerAdded = nil
    end
    
    -- Clear all connections
    for player, connection in pairs(espConnections) do
        if type(connection) == "userdata" then
            connection:Disconnect()
        elseif type(connection) == "table" then
            if connection.removeConnection then
                connection.removeConnection:Disconnect()
            end
        end
    end
    espConnections = {}
    
    print("‚ùå Player ESP Disabled")
end

-- Main Player ESP Toggle
Library:CreateToggle(espTab, "Player ESP", false, function(state)
    if state then
        enablePlayerESP()
    else
        disablePlayerESP()
    end
    print("‚úÖ Player ESP", state and "ON" or "OFF")
end)

-- ESP Feature Toggles
Library:CreateToggle(espTab, "Show Player Names", true, function(state)
    ESP_SETTINGS.ShowNames = state
    print("‚úÖ Show Player Names", state and "ON" or "OFF")
end)

Library:CreateToggle(espTab, "Show Player Distance", true, function(state)
    ESP_SETTINGS.ShowDistance = state
    print("‚úÖ Show Player Distance", state and "ON" or "OFF")
end)

Library:CreateToggle(espTab, "Show Player Health", true, function(state)
    ESP_SETTINGS.ShowHealth = state
    print("‚úÖ Show Player Health", state and "ON" or "OFF")
end)

Library:CreateToggle(espTab, "Show Health Bar", true, function(state)
    ESP_SETTINGS.HealthBarEnabled = state
    print("‚úÖ Show Health Bar", state and "ON" or "OFF")
end)

-- ESP Distance Slider
Library:CreateSlider(espTab, "ESP Max Distance", 100, 2000, 1000, function(value)
    ESP_SETTINGS.MaxDistance = value
    print("üìè ESP Max Distance set to:", value)
end)

-- ESP Text Size Slider
Library:CreateSlider(espTab, "ESP Text Size", 8, 24, 14, function(value)
    ESP_SETTINGS.TextSize = value
    print("üìè ESP Text Size set to:", value)
end)

-- ESP Color Theme Dropdown
Library:CreateDropdown(espTab, "Player ESP Color", {"Red", "Blue", "Green", "Yellow", "Purple", "Cyan"}, "Red", function(value)
    if value == "Red" then
        ESP_SETTINGS.FillColor = Color3.fromRGB(255, 0, 0)
        ESP_SETTINGS.OutlineColor = Color3.fromRGB(255, 255, 255)
    elseif value == "Blue" then
        ESP_SETTINGS.FillColor = Color3.fromRGB(0, 0, 255)
        ESP_SETTINGS.OutlineColor = Color3.fromRGB(255, 255, 255)
    elseif value == "Green" then
        ESP_SETTINGS.FillColor = Color3.fromRGB(0, 255, 0)
        ESP_SETTINGS.OutlineColor = Color3.fromRGB(255, 255, 255)
    elseif value == "Yellow" then
        ESP_SETTINGS.FillColor = Color3.fromRGB(255, 255, 0)
        ESP_SETTINGS.OutlineColor = Color3.fromRGB(0, 0, 0)
    elseif value == "Purple" then
        ESP_SETTINGS.FillColor = Color3.fromRGB(128, 0, 128)
        ESP_SETTINGS.OutlineColor = Color3.fromRGB(255, 255, 255)
    elseif value == "Cyan" then
        ESP_SETTINGS.FillColor = Color3.fromRGB(0, 255, 255)
        ESP_SETTINGS.OutlineColor = Color3.fromRGB(0, 0, 0)
    end
    print("üé® Player ESP Color changed to:", value)
end)

-- Refresh Player ESP Button
Library:CreateButton(espTab, "Refresh Player ESP", function()
    if playerESPEnabled then
        -- Remove all current ESP
        for player, _ in pairs(trackedPlayers) do
            removePlayerESP(player)
        end
        
        -- Re-add ESP to all players
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                createPlayerESP(player)
            end
        end
        
        print("üîÑ Player ESP refreshed!")
    else
        print("‚ùå Player ESP is not enabled!")
    end
end)

-- Clear All Player ESP Button
Library:CreateButton(espTab, "Clear All Player ESP", function()
    disablePlayerESP()
    print("‚úÖ All Player ESP cleared!")
end)

-- TP TAB

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Teleport to Campfire Button
Library:CreateButton(tpTab, "Tp to Campfire", function()
    local targetPosition = Vector3.new(0.2976149320602417, 6.346785545349121, -0.043002475053071976)
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
        print("‚úÖ Teleported to campfire successfully!")
    else
        print("‚ùå Teleport failed - Character not found!")
    end
end)

-- Item Teleport System
local ItemsFolder = workspace:FindFirstChild("Items")

if ItemsFolder then
    local uniqueModelNames = {}
    local modelMap = {}
    local selectedModelName = nil

    local function refreshModelList()
        uniqueModelNames = {}
        modelMap = {}

        for _, item in pairs(ItemsFolder:GetDescendants()) do
            if item:IsA("Model") then
                local name = item.Name
                if not modelMap[name] then
                    modelMap[name] = {}
                    table.insert(uniqueModelNames, name)
                end
                table.insert(modelMap[name], item)
            end
        end

        print("üì¶ Found", #uniqueModelNames, "unique item types")
    end

    -- Auto-refresh item list every 5 seconds
    task.spawn(function()
        while true do
            refreshModelList()
            task.wait(5)
        end
    end)

    -- Initial refresh
    refreshModelList()

    -- Item Selection Dropdown
    Library:CreateDropdown(tpTab, "Select Item to Teleport", uniqueModelNames, uniqueModelNames[1] or "None", function(selected)
        selectedModelName = selected
        print("üéØ Selected item:", selected)
    end)

    local function getClosestModel(modelList)
        local char = LocalPlayer.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp or not modelList then return nil end

        local closest, minDist = nil, math.huge
        for _, model in pairs(modelList) do
            local primary = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
            if primary then
                local dist = (hrp.Position - primary.Position).Magnitude
                if dist < minDist then
                    minDist = dist
                    closest = primary
                end
            end
        end
        return closest
    end

    -- Teleport to Selected Item Button
    Library:CreateButton(tpTab, "Teleport to Item", function()
        if not selectedModelName or not modelMap[selectedModelName] then
            print("‚ùå No item selected or item not found!")
            return
        end

        local closestPart = getClosestModel(modelMap[selectedModelName])
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

        if closestPart and hrp then
            hrp.CFrame = closestPart.CFrame + Vector3.new(0, 5, 0)
            print("‚úÖ Teleported to nearest:", selectedModelName)
        else
            print("‚ùå Could not find valid item to teleport to!")
        end
    end)

    -- Refresh Item List Button
    Library:CreateButton(tpTab, "Refresh Item List", function()
        refreshModelList()
        print("üîÑ Item list refreshed!")
    end)
else
    print("‚ùå Items folder not found in workspace!")
end

-- Quick Teleport Buttons for Common Locations
Library:CreateButton(tpTab, "Tp to Spawn", function()
    local spawnPosition = Vector3.new(0, 10, 0) -- Adjust coordinates as needed
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(spawnPosition)
        print("‚úÖ Teleported to spawn!")
    else
        print("‚ùå Teleport failed - Character not found!")
    end
end)

-- Teleport to Random Item Button
Library:CreateButton(tpTab, "Tp to Random Item", function()
    if ItemsFolder then
        local allItems = {}
        for _, item in pairs(ItemsFolder:GetChildren()) do
            if item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) then
                table.insert(allItems, item)
            end
        end
        
        if #allItems > 0 then
            local randomItem = allItems[math.random(1, #allItems)]
            local targetPart = randomItem.PrimaryPart or randomItem:FindFirstChildWhichIsA("BasePart")
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            
            if targetPart and hrp then
                hrp.CFrame = targetPart.CFrame + Vector3.new(0, 5, 0)
                print("‚úÖ Teleported to random item:", randomItem.Name)
            else
                print("‚ùå Failed to teleport to random item!")
            end
        else
            print("‚ùå No items found to teleport to!")
        end
    else
        print("‚ùå Items folder not found!")
    end
end)

-- Teleport Safe Mode Toggle
local safeTeleportMode = false
Library:CreateToggle(tpTab, "Safe TP Mode", false, function(state)
    safeTeleportMode = state
    print("‚úÖ Safe Teleport Mode", state and "ON" or "OFF")
    if state then
        print("üìù Safe mode adds 10 studs height to teleports")
    end
end)

-- Enhanced teleport function with safe mode
local function safeTeleport(targetCFrame, locationName)
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        print("‚ùå Teleport failed - Character not found!")
        return false
    end
    
    local finalCFrame = targetCFrame
    if safeTeleportMode then
        finalCFrame = targetCFrame + Vector3.new(0, 10, 0) -- Add extra height for safety
    end
    
    hrp.CFrame = finalCFrame
    print("‚úÖ Safely teleported to:", locationName or "Unknown location")
    return true
end

-- Load circle toggle LAST
print("LToggle...")

loadstring(game:HttpGet("https://raw.githubusercontent.com/ProGamerBoy610/Script-Hub/refs/heads/main/circle%20togle.lua"))()

-- Don't remove this
return Library
