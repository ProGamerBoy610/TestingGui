-- jump rop game

--  "home", "settings", "search", "play", "pause", "stop", "user", "trash", "folder", "lock", "unlock", "edit", "save", "upload", "download", "refresh", "info", "warning", "check","x", "plus", "minus", "eye", "eye-off", "bell", "calendar", "camera", "cloud", "code","cpu", "database", "file", "globe", "grid", "heart", "image", "key", "link", "list",
           -- "map", "menu", "message-square", "mic", "moon", "sun", "music", "phone", "printer",
        --"radio", "repeat", "rewind", "send", "settings", "share", "shield", "star", "terminal",
        --    "tool", "tv", "type", "video", "wifi", "zap"

local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

-- Gradient text function (used in popup)
local function gradient(text, startColor, endColor)
    local result = ""
    for i = 1, #text do
        local t = (i - 1) / math.max(#text - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)
        result = result .. string.format('<font color="rgb(%d, %d, %d)">%s</font>', r, g, b, text:sub(i, i))
    end
    return result
end

-- Popup before loading
local Confirmed = false
WindUI:Popup({
    Title = "Confirmation",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Content = "Fryzer Hub " .. gradient("FH", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")),
    Buttons = {
        {
            Title = "Cancel",
            Variant = "Secondary",
        },
        {
            Title = "Continue",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary",
        }
    }
})
repeat task.wait() until Confirmed

-- Window creation WITHOUT Key System
local Window = WindUI:CreateWindow({
    Title = "Fryzer Hub",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "The 1,000,000$ Jump Rope",
    Folder = "YourHub",
    Size = UDim2.fromOffset(580, 360),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 200,
    ScrollBarEnabled = true,

    User = {
        Enabled = true,
        Anonymous = false,
        Username = LocalPlayer.DisplayName,
        UserId = LocalPlayer.UserId,
        Callback = function()
            print("User icon clicked:", LocalPlayer.Name)
        end
    }
})

-- UI open button
Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    Draggable = true,
})

-- Main Tab
local Tab = Window:Tab({ Title = "Main", Icon = "user" })

-- Welcome Paragraph
Tab:Paragraph({
    Title = "Welcome to Fryzer Hub!",
    Content = "Hello " .. LocalPlayer.DisplayName .. "! You're running WindUI successfully."
})


-- WalkSpeed Variables
local WalkSpeedToggle = false
local WalkSpeedSliderValue = 16

local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- WalkSpeed Toggle
Tab:Toggle({
    Title = "WalkSpeed Toggle", 
    Value = false,
    Callback = function(state)
        WalkSpeedToggle = state
        if state then
            humanoid.WalkSpeed = WalkSpeedSliderValue
        else
            humanoid.WalkSpeed = 16
        end
        print("WalkSpeed Toggle is now:", state)
    end
})

-- WalkSpeed Slider
Tab:Slider({
    Title = "WalkSpeed Value",
    Value = {
        Min = 16,
        Max = 200,
        Default = 16
    },
    Callback = function(val)
        WalkSpeedSliderValue = val
        if WalkSpeedToggle then
            humanoid.WalkSpeed = val
        end
        print("WalkSpeed value:", val)
    end
})

-- JumpPower Variables
local JumpPowerToggle = false
local JumpPowerSliderValue = 7.2

-- JumpPower Toggle
Tab:Toggle({
    Title = "JumpPower Toggle", 
    Value = false,
    Callback = function(state)
        JumpPowerToggle = state
        if state then
            humanoid.JumpHeight = JumpPowerSliderValue
        else
            humanoid.JumpHeight = 7.2
        end
        print("JumpPower Toggle is now:", state)
    end
})

-- JumpPower Slider
Tab:Slider({
    Title = "JumpPower Value",
    Value = {
        Min = 7.2,
        Max = 50,
        Default = 7.2
    },
    Callback = function(val)
        JumpPowerSliderValue = val
        if JumpPowerToggle then
            humanoid.JumpHeight = val
        end
        print("JumpPower value:", val)
    end
})

local MainTab = Window:Tab({ Title = "Main", Icon = "menu" })

-- Toggle
MainTab:Toggle({
    Title = "Enable Invisible Spin Rope", 
    Value = false,
    Callback = function(state)
        local spinRope = workspace:FindFirstChild("Spin_Rope")
        if spinRope then
            for _, part in ipairs(spinRope:GetDescendants()) do
                if part:IsA("BasePart") then
                    if state then
                        -- Hide and disable collisions
                        part.Transparency = 1
                        part.CanCollide = false
                        part.CanTouch = false
                        part.CanQuery = false
                    else
                        -- Revert changes (make visible and collidable)
                        part.Transparency = 0
                        part.CanCollide = true
                        part.CanTouch = true
                        part.CanQuery = true
                    end
                end
            end
        end
        print("Toggle is now:", state)
    end
})

MainTab:Button({
    Title = "Teleport to Location",
    Desc = "Instantly teleports you to a set position",
    Callback = function()
        print("Button clicked!")

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Wait for HumanoidRootPart
        local hrp = character:WaitForChild("HumanoidRootPart")

        -- Teleport location
        local targetPosition = Vector3.new(4.099920749664307, 29.99999237060547, 447.0458068847656)
        hrp.CFrame = CFrame.new(targetPosition)

        WindUI:Notify({
            Title = "Teleported!",
            Content = "You have been moved to the target location.",
            Duration = 3
        })
    end
})


MainTab:Button({
    Title = "Stop rope",
    Desc = "This button stop spining rop FR (Not visual)",
    Callback = function()
        -- Fire the remote
        game:GetService("ReplicatedStorage"):WaitForChild("Frontman_Remotes"):WaitForChild("green"):FireServer()

        -- Show a notification
        WindUI:Notify({
            Title = "Stop rope",
            Content = "",
            Duration = 1
        })

        print("")
    end
})

-- Red Button
MainTab:Button({
    Title = "Powerup rope",
    Desc = "It incress the power of the rope (Not visual)",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("Frontman_Remotes"):WaitForChild("red"):FireServer()
        
        WindUI:Notify({
            Title = "Add more power to rope",
            Content = "This will last short",
            Duration = 1
        })
    end
})

-- Morph Toggle
MainTab:Toggle({
    Title = "Morph To Frontman",
    Value = false,
    Callback = function(state)
        local args = {
            state and "ON" or "OFF"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Frontman_Remotes"):WaitForChild("morph"):FireServer(unpack(args))

        WindUI:Notify({
            Title = "Morph Status",
            Content = "Morph turned " .. (state and "ON" or "OFF"),
            Duration = 1
        })
    end
})

local VTab = Window:Tab({ Title = "vehicle", Icon = "send" })

-- Equip Car Button
VTab:Button({
    Title = "Drive Car",
    Desc = "Drive Car",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("Car_Remotes"):WaitForChild("Equip"):FireServer()
    end
})

-- Equip Helicopter Button
VTab:Button({
    Title = "Drive Helicopter",
    Desc = "Drive helicopter",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("Heli_Remotes"):WaitForChild("Equip"):FireServer()
    end
})

--Auto Farm
local ATab = Window:Tab({ Title = "Auto", Icon = "repeat" })

local running = false

ATab:Toggle({
    Title = "Auto Farm Win",
    Value = false,
    Callback = function(state)
        running = state
        task.spawn(function()
            while running do
                local args = {
                    false
                }
                game:GetService("ReplicatedStorage"):WaitForChild("RestartRemotes"):WaitForChild("Loader"):FireServer(unpack(args))
                task.wait(1.5) -- Adjust delay as needed
            end
        end)
    end
})

local redLoopActive = false

ATab:Toggle({
    Title = "Repeat adding more power to rope",
    Value = false,
    Callback = function(state)
        redLoopActive = state
        task.spawn(function()
            while redLoopActive do
                game:GetService("ReplicatedStorage"):WaitForChild("Frontman_Remotes"):WaitForChild("red"):FireServer()
                task.wait(1) -- Adjust the repeat delay if needed
            end
        end)
    end
})

local greenLoopActive = false

ATab:Toggle({
    Title = "Repeat stoping rope spin",
    Value = false,
    Callback = function(state)
        greenLoopActive = state
        task.spawn(function()
            while greenLoopActive do
                game:GetService("ReplicatedStorage"):WaitForChild("Frontman_Remotes"):WaitForChild("green"):FireServer()
                task.wait(1) -- Adjust delay if needed
            end
        end)
    end
})


--mini games glass brigh
local MiniTab = Window:Tab({ Title = "Mini games", Icon = "send" })

MiniTab:Button({
    Title = "Highlight Correct Glass",
    Desc = "Colors correct glass green",
    Callback = function()
        local correctFolder = workspace:FindFirstChild("FunArea")
            and workspace.FunArea:FindFirstChild("Minigame_glass")
            and workspace.FunArea.Minigame_glass:FindFirstChild("Mini_glass_bridge")
            and workspace.FunArea.Minigame_glass.Mini_glass_bridge:FindFirstChild("correct")

        if not correctFolder then
            warn("Correct glass folder not found!")
            WindUI:Notify({
                Title = "Error",
                Content = "Correct glass folder not found!",
                Duration = 1
            })
            return
        end

        for _, part in pairs(correctFolder:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Color = Color3.fromRGB(0, 255, 0)
                part.Material = Enum.Material.Neon
            end
        end

        WindUI:Notify({
            Title = "Glass Highlighted",
            Content = "Correct glass parts are now neon green!",
            Duration = 1
        })
    end
})

-- Fixed Money Tab section
local MTab = Window:Tab({ Title = "Money", Icon = "send" })

-- Variable to hold the user input
local userInputValue = "0"

-- Input field for money amount
MTab:Input({
    Title = "Money Giver", 
    Value = "0", 
    Placeholder = "How much you want (type number only)", 
    Callback = function(input)
        userInputValue = input
        print("Money input set to:", input)
    end
})

-- Button to give money
MTab:Button({
    Title = "Give Money",
    Desc = "Fires remote with entered value",
    Callback = function()
        local args = {
            tostring(userInputValue)
        }
        game:GetService("ReplicatedStorage"):WaitForChild("CratesUtilities"):WaitForChild("Remotes"):WaitForChild("GiveReward"):FireServer(unpack(args))
        
        WindUI:Notify({
            Title = "Money Given",
            Content = "Attempted to give " .. userInputValue .. " money",
            Duration = 3
        })
        
        print("Money remote fired with value:", userInputValue)
    end
})

-- Info Tab
local FTab = Window:Tab({
    Title = "INFO",
    Icon = "info"
})

FTab:Paragraph({
    Title = "WE CAN SEE YOUR FEEDBACK FR PRESS THE DOWN BUTTON TO OPEN FEEDBACK GUI YOU CAN SENT US FEEDBACK AND WE ATUCALLY SEE IT",
    Content = "OPEN"
})

FTab:Paragraph({
    Title = "V2.78",
    Content = "OPEN"
})

FTab:Button({
    Title = "FEEDBACK GUI",
    Desc = "Open the feedback interface",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ProGamerBoy610/FeedBack-Gui/refs/heads/main/Feedback%20gui"))()
        WindUI:Notify({
            Title = "Feedback GUI Loaded",
            Content = "Feedback interface has been opened!",
            Duration = 3
        })
    end
})

-- Window close callback
Window:OnClose(function()
    print("Window closed.")
end)
