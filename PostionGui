-- Complete Roblox Hub GUI System
-- Created by Assistant for Fryzer Hub

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FryzerHub"
screenGui.Parent = game.CoreGui
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Animation helper function
local function animate(obj, props, duration, style)
    local tweenInfo = TweenInfo.new(duration or 0.3, style or Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local tween = TweenService:Create(obj, tweenInfo, props)
    tween:Play()
    return tween
end

-- Colors
local colors = {
    background = Color3.fromRGB(25, 25, 35),
    secondary = Color3.fromRGB(35, 35, 50),
    accent = Color3.fromRGB(100, 200, 255),
    green = Color3.fromRGB(50, 255, 100),
    red = Color3.fromRGB(255, 80, 80),
    text = Color3.fromRGB(255, 255, 255),
    textSecondary = Color3.fromRGB(180, 180, 180)
}

-- 2nd GUI (Floating Button)
local floatingButton = Instance.new("TextButton")
floatingButton.Name = "FloatingButton"
floatingButton.Size = UDim2.new(0, 80, 0, 80)
floatingButton.Position = UDim2.new(0, 20, 0.5, -40)
floatingButton.BackgroundColor3 = colors.accent
floatingButton.BorderSizePixel = 0
floatingButton.Text = "Fryzer"
floatingButton.TextColor3 = Color3.white
floatingButton.TextScaled = true
floatingButton.Font = Enum.Font.GothamBold
floatingButton.Active = true
floatingButton.Draggable = true
floatingButton.Parent = screenGui

-- Make floating button circular
local floatingCorner = Instance.new("UICorner")
floatingCorner.CornerRadius = UDim.new(0.5, 0)
floatingCorner.Parent = floatingButton

-- Floating button glow effect
local floatingStroke = Instance.new("UIStroke")
floatingStroke.Color = colors.accent
floatingStroke.Thickness = 2
floatingStroke.Transparency = 0.5
floatingStroke.Parent = floatingButton

-- Main GUI Frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 700, 0, 450)
mainFrame.Position = UDim2.new(0.5, -350, 0.5, -225)
mainFrame.BackgroundColor3 = colors.background
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false
mainFrame.Active = true
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 12)
mainCorner.Parent = mainFrame

-- Drop shadow
local shadow = Instance.new("Frame")
shadow.Name = "Shadow"
shadow.Size = UDim2.new(1, 10, 1, 10)
shadow.Position = UDim2.new(0, -5, 0, -5)
shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
shadow.BackgroundTransparency = 0.8
shadow.ZIndex = mainFrame.ZIndex - 1
shadow.Parent = mainFrame

local shadowCorner = Instance.new("UICorner")
shadowCorner.CornerRadius = UDim.new(0, 17)
shadowCorner.Parent = shadow

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 40)
titleBar.BackgroundColor3 = colors.secondary
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 12)
titleCorner.Parent = titleBar

-- Fix title bar corner clipping
local titleFix = Instance.new("Frame")
titleFix.Size = UDim2.new(1, 0, 0, 20)
titleFix.Position = UDim2.new(0, 0, 1, -20)
titleFix.BackgroundColor3 = colors.secondary
titleFix.BorderSizePixel = 0
titleFix.Parent = titleBar

-- Title Text
local titleText = Instance.new("TextLabel")
titleText.Size = UDim2.new(1, -100, 1, 0)
titleText.Position = UDim2.new(0, 10, 0, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "Fryzer Hub v1.0"
titleText.TextColor3 = colors.text
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.TextSize = 16
titleText.Font = Enum.Font.GothamBold
titleText.Parent = titleBar

-- Minimize Button
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0, 30, 0, 30)
minimizeBtn.Position = UDim2.new(1, -70, 0, 5)
minimizeBtn.BackgroundColor3 = Color3.fromRGB(255, 195, 0)
minimizeBtn.Text = "−"
minimizeBtn.TextColor3 = Color3.white
minimizeBtn.TextSize = 18
minimizeBtn.Font = Enum.Font.GothamBold
minimizeBtn.BorderSizePixel = 0
minimizeBtn.Parent = titleBar

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 6)
minimizeCorner.Parent = minimizeBtn

-- Close Button
local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 30, 0, 30)
closeBtn.Position = UDim2.new(1, -35, 0, 5)
closeBtn.BackgroundColor3 = colors.red
closeBtn.Text = "×"
closeBtn.TextColor3 = Color3.white
closeBtn.TextSize = 18
closeBtn.Font = Enum.Font.GothamBold
closeBtn.BorderSizePixel = 0
closeBtn.Parent = titleBar

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 6)
closeCorner.Parent = closeBtn

-- Make title bar draggable
local dragging = false
local dragStart = nil
local startPos = nil

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
    end
end)

titleBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Content Container
local contentContainer = Instance.new("Frame")
contentContainer.Size = UDim2.new(1, 0, 1, -40)
contentContainer.Position = UDim2.new(0, 0, 0, 40)
contentContainer.BackgroundTransparency = 1
contentContainer.Parent = mainFrame

-- Left Sidebar (Tabs)
local sidebar = Instance.new("Frame")
sidebar.Size = UDim2.new(0, 150, 1, 0)
sidebar.BackgroundColor3 = colors.secondary
sidebar.BorderSizePixel = 0
sidebar.Parent = contentContainer

local sidebarCorner = Instance.new("UICorner")
sidebarCorner.CornerRadius = UDim.new(0, 0)
sidebarCorner.Parent = sidebar

-- Right Content Area
local contentArea = Instance.new("Frame")
contentArea.Size = UDim2.new(1, -150, 1, 0)
contentArea.Position = UDim2.new(0, 150, 0, 0)
contentArea.BackgroundColor3 = colors.background
contentArea.BorderSizePixel = 0
contentArea.Parent = contentContainer

-- Scrollable Content
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, -20, 1, -20)
scrollFrame.Position = UDim2.new(0, 10, 0, 10)
scrollFrame.BackgroundTransparency = 1
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 6
scrollFrame.ScrollBarImageColor3 = colors.accent
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollFrame.Parent = contentArea

local scrollCorner = Instance.new("UICorner")
scrollCorner.CornerRadius = UDim.new(0, 8)
scrollCorner.Parent = scrollFrame

-- Content Layout
local contentLayout = Instance.new("UIListLayout")
contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
contentLayout.Padding = UDim.new(0, 10)
contentLayout.Parent = scrollFrame

-- Tab System
local tabs = {}
local currentTab = nil

local function createTab(name, icon)
    local tab = Instance.new("TextButton")
    tab.Size = UDim2.new(1, -10, 0, 40)
    tab.Position = UDim2.new(0, 5, 0, #tabs * 45 + 10)
    tab.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    tab.BorderSizePixel = 0
    tab.Text = icon .. " " .. name
    tab.TextColor3 = colors.textSecondary
    tab.TextXAlignment = Enum.TextXAlignment.Left
    tab.TextSize = 14
    tab.Font = Enum.Font.Gotham
    tab.Parent = sidebar
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = tab
    
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingLeft = UDim.new(0, 15)
    tabPadding.Parent = tab
    
    tabs[name] = {button = tab, content = {}}
    
    tab.MouseButton1Click:Connect(function()
        selectTab(name)
    end)
    
    return tab
end

local function selectTab(name)
    for tabName, tabData in pairs(tabs) do
        if tabName == name then
            animate(tabData.button, {BackgroundColor3 = colors.accent, TextColor3 = colors.text})
            currentTab = name
            showTabContent(name)
        else
            animate(tabData.button, {BackgroundColor3 = Color3.fromRGB(40, 40, 55), TextColor3 = colors.textSecondary})
        end
    end
end

local function showTabContent(tabName)
    for i, child in pairs(scrollFrame:GetChildren()) do
        if child:IsA("GuiObject") then
            child.Visible = false
        end
    end
    
    if tabs[tabName] then
        for i, element in pairs(tabs[tabName].content) do
            element.Visible = true
        end
    end
    
    updateScrollCanvas()
end

local function updateScrollCanvas()
    local contentSize = contentLayout.AbsoluteContentSize
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, contentSize.Y + 20)
end

-- UI Elements Creation Functions

local function createTextLabel(text, parent, tabName)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -20, 0, 30)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = colors.text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.Parent = parent
    label.Visible = false
    
    if tabName and tabs[tabName] then
        table.insert(tabs[tabName].content, label)
    end
    
    return label
end

local function createButton(text, callback, parent, tabName)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -20, 0, 35)
    button.BackgroundColor3 = colors.secondary
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = colors.text
    button.TextSize = 14
    button.Font = Enum.Font.Gotham
    button.Parent = parent
    button.Visible = false
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = button
    
    button.MouseButton1Click:Connect(function()
        animate(button, {BackgroundColor3 = colors.green}, 0.1)
        wait(0.1)
        animate(button, {BackgroundColor3 = colors.secondary}, 0.1)
        if callback then callback() end
    end)
    
    if tabName and tabs[tabName] then
        table.insert(tabs[tabName].content, button)
    end
    
    return button
end

local function createToggle(text, defaultValue, callback, parent, tabName)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 35)
    container.BackgroundTransparency = 1
    container.Parent = parent
    container.Visible = false
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -60, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = colors.text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 50, 0, 25)
    toggleButton.Position = UDim2.new(1, -50, 0.5, -12.5)
    toggleButton.BackgroundColor3 = defaultValue and colors.green or Color3.fromRGB(60, 60, 70)
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = ""
    toggleButton.Parent = container
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 12)
    toggleCorner.Parent = toggleButton
    
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Size = UDim2.new(0, 19, 0, 19)
    toggleIndicator.Position = defaultValue and UDim2.new(1, -22, 0.5, -9.5) or UDim2.new(0, 3, 0.5, -9.5)
    toggleIndicator.BackgroundColor3 = Color3.white
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Parent = toggleButton
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 9)
    indicatorCorner.Parent = toggleIndicator
    
    local isOn = defaultValue
    
    toggleButton.MouseButton1Click:Connect(function()
        isOn = not isOn
        animate(toggleButton, {BackgroundColor3 = isOn and colors.green or Color3.fromRGB(60, 60, 70)})
        animate(toggleIndicator, {Position = isOn and UDim2.new(1, -22, 0.5, -9.5) or UDim2.new(0, 3, 0.5, -9.5)})
        if callback then callback(isOn) end
    end)
    
    if tabName and tabs[tabName] then
        table.insert(tabs[tabName].content, container)
    end
    
    return container
end

local function createSlider(text, min, max, default, callback, parent, tabName)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 50)
    container.BackgroundTransparency = 1
    container.Parent = parent
    container.Visible = false
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = text .. ": " .. default
    label.TextColor3 = colors.text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Size = UDim2.new(1, -10, 0, 6)
    sliderTrack.Position = UDim2.new(0, 5, 1, -16)
    sliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = container
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 3)
    trackCorner.Parent = sliderTrack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    sliderFill.BackgroundColor3 = colors.accent
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 3)
    fillCorner.Parent = sliderFill
    
    local sliderKnob = Instance.new("TextButton")
    sliderKnob.Size = UDim2.new(0, 20, 0, 20)
    sliderKnob.Position = UDim2.new((default - min) / (max - min), -10, 0.5, -10)
    sliderKnob.BackgroundColor3 = Color3.white
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Text = ""
    sliderKnob.Parent = sliderTrack
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 10)
    knobCorner.Parent = sliderKnob
    
    local dragging = false
    local currentValue = default
    
    local function updateSlider(input)
        local relativePos = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
        currentValue = math.floor(min + (max - min) * relativePos)
        
        animate(sliderKnob, {Position = UDim2.new(relativePos, -10, 0.5, -10)}, 0.1)
        animate(sliderFill, {Size = UDim2.new(relativePos, 0, 1, 0)}, 0.1)
        
        label.Text = text .. ": " .. currentValue
        if callback then callback(currentValue) end
    end
    
    sliderKnob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    
    sliderKnob.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input)
        end
    end)
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            updateSlider(input)
        end
    end)
    
    if tabName and tabs[tabName] then
        table.insert(tabs[tabName].content, container)
    end
    
    return container
end

local function createTextBox(placeholder, callback, parent, tabName)
    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(1, -20, 0, 35)
    textBox.BackgroundColor3 = colors.secondary
    textBox.BorderSizePixel = 0
    textBox.PlaceholderText = placeholder
    textBox.Text = ""
    textBox.TextColor3 = colors.text
    textBox.PlaceholderColor3 = colors.textSecondary
    textBox.TextSize = 14
    textBox.Font = Enum.Font.Gotham
    textBox.ClearTextOnFocus = false
    textBox.Parent = parent
    textBox.Visible = false
    
    local textBoxCorner = Instance.new("UICorner")
    textBoxCorner.CornerRadius = UDim.new(0, 6)
    textBoxCorner.Parent = textBox
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 10)
    padding.PaddingRight = UDim.new(0, 10)
    padding.Parent = textBox
    
    textBox.FocusLost:Connect(function()
        if callback then callback(textBox.Text) end
    end)
    
    if tabName and tabs[tabName] then
        table.insert(tabs[tabName].content, textBox)
    end
    
    return textBox
end

local function createDropdown(text, options, callback, parent, tabName)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 35)
    container.BackgroundTransparency = 1
    container.Parent = parent
    container.Visible = false
    container.ClipsDescendants = true
    
    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(1, 0, 1, 0)
    dropdown.BackgroundColor3 = colors.secondary
    dropdown.BorderSizePixel = 0
    dropdown.Text = text .. " ▼"
    dropdown.TextColor3 = colors.text
    dropdown.TextXAlignment = Enum.TextXAlignment.Left
    dropdown.TextSize = 14
    dropdown.Font = Enum.Font.Gotham
    dropdown.Parent = container
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 6)
    dropdownCorner.Parent = dropdown
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 10)
    padding.PaddingRight = UDim.new(0, 10)
    padding.Parent = dropdown
    
    local optionsContainer = Instance.new("Frame")
    optionsContainer.Size = UDim2.new(1, 0, 0, #options * 30)
    optionsContainer.Position = UDim2.new(0, 0, 1, 0)
    optionsContainer.BackgroundColor3 = colors.secondary
    optionsContainer.BorderSizePixel = 0
    optionsContainer.Visible = false
    optionsContainer.Parent = container
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 6)
    optionsCorner.Parent = optionsContainer
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsContainer
    
    local isOpen = false
    local selectedOption = ""
    
    for i, option in pairs(options) do
        local optionBtn = Instance.new("TextButton")
        optionBtn.Size = UDim2.new(1, 0, 0, 30)
        optionBtn.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
        optionBtn.BorderSizePixel = 0
        optionBtn.Text = option
        optionBtn.TextColor3 = colors.text
        optionBtn.TextXAlignment = Enum.TextXAlignment.Left
        optionBtn.TextSize = 14
        optionBtn.Font = Enum.Font.Gotham
        optionBtn.Parent = optionsContainer
        
        local optionPadding = Instance.new("UIPadding")
        optionPadding.PaddingLeft = UDim.new(0, 10)
        optionPadding.Parent = optionBtn
        
        optionBtn.MouseButton1Click:Connect(function()
            selectedOption = option
            dropdown.Text = text .. ": " .. option .. " ▼"
            isOpen = false
            animate(container, {Size = UDim2.new(1, -20, 0, 35)}, 0.2)
            animate(optionsContainer, {Visible = false}, 0.2)
            if callback then callback(option) end
        end)
        
        optionBtn.MouseEnter:Connect(function()
            animate(optionBtn, {BackgroundColor3 = colors.accent})
        end)
        
        optionBtn.MouseLeave:Connect(function()
            animate(optionBtn, {BackgroundColor3 = Color3.fromRGB(45, 45, 60)})
        end)
    end
    
    dropdown.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        if isOpen then
            animate(container, {Size = UDim2.new(1, -20, 0, 35 + #options * 30)}, 0.2)
            optionsContainer.Visible = true
            dropdown.Text = text .. (selectedOption ~= "" and ": " .. selectedOption or "") .. " ▲"
        else
            animate(container, {Size = UDim2.new(1, -20, 0, 35)}, 0.2)
            wait(0.2)
            optionsContainer.Visible = false
            dropdown.Text = text .. (selectedOption ~= "" and ": " .. selectedOption or "") .. " ▼"
        end
        updateScrollCanvas()
    end)
    
    if tabName and tabs[tabName] then
        table.insert(tabs[tabName].content, container)
    end
    
    return container
end

-- Confirmation Dialog
local confirmFrame = Instance.new("Frame")
confirmFrame.Size = UDim2.new(0, 300, 0, 150)
confirmFrame.Position = UDim2.new(0.5, -150, 0.5, -75)
confirmFrame.BackgroundColor3 = colors.background
confirmFrame.BorderSizePixel = 0
confirmFrame.Visible = false
confirmFrame.Parent = screenGui

local confirmCorner = Instance.new("UICorner")
confirmCorner.CornerRadius = UDim.new(0, 12)
confirmCorner.Parent = confirmFrame

local confirmTitle = Instance.new("TextLabel")
confirmTitle.Size = UDim2.new(1, -20, 0, 30)
confirmTitle.Position = UDim2.new(0, 10, 0, 10)
confirmTitle.BackgroundTransparency = 1
confirmTitle.Text = "Confirm Close"
confirmTitle.TextColor3 = colors.text
confirmTitle.TextSize = 16
confirmTitle.Font = Enum.Font.GothamBold
confirmTitle.Parent = confirmFrame

local confirmText = Instance.new("TextLabel")
confirmText.Size = UDim2.new(1, -20, 0, 60)
confirmText.Position = UDim2.new(0, 10, 0, 40)
confirmText.BackgroundTransparency = 1
confirmText.Text = "Are you sure you want to close?\nThis will not be reactivated."
confirmText.TextColor3 = colors.textSecondary
confirmText.TextSize = 14
confirmText.Font = Enum.Font.Gotham
confirmText.TextWrapped = true
confirmText.Parent = confirmFrame

local confirmYes = Instance.new("TextButton")
confirmYes.Size = UDim2.new(0, 80, 0, 30)
confirmYes.Position = UDim2.new(1, -170, 1, -40)
confirmYes.BackgroundColor3 = colors.red
confirmYes.BorderSizePixel = 0
confirmYes.Text = "Yes"
confirmYes.TextColor3 = Color3.white
confirmYes.TextSize = 14
confirmYes.Font = Enum.Font.Gotham
confirmYes.Parent = confirmFrame

local confirmYesCorner = Instance.new("UICorner")
confirmYesCorner.CornerRadius = UDim.new(0, 6)
confirmYesCorner.Parent = confirmYes

local confirmNo = Instance.new("TextButton")
confirmNo.Size = UDim2.new(0, 80, 0, 30)
confirmNo.Position = UDim2.new(1, -80, 1, -40)
confirmNo.BackgroundColor3 = colors.secondary
confirmNo.BorderSizePixel = 0
confirmNo.Text = "No"
confirmNo.TextColor3 = Color3.white
confirmNo.TextSize = 14
confirmNo.Font = Enum.Font.Gotham
confirmNo.Parent = confirmFrame

local confirmNoCorner = Instance.new("UICorner")
confirmNoCorner.CornerRadius = UDim.new(0, 6)
confirmNoCorner.Parent = confirmNo

-- Create tabs
createTab("Home", "🏠")
createTab("Player", "👤")
createTab("Visual", "👁")
createTab("Misc", "⚙")

-- Add content to Home tab
createTextLabel("Welcome to Fryzer Hub!", scrollFrame, "Home")
createTextLabel("Version: 1.0 | Made with ❤", scrollFrame, "Home")
createButton("Test Button", function() print("Button clicked!") end, scrollFrame, "Home")
createToggle("Example Toggle", false, function(state) print("Toggle:", state) end, scrollFrame, "Home")

-- Add content to Player tab
createTextLabel("Player Controls", scrollFrame, "Player")
createSlider("Walk Speed", 16, 100, 16, function(value) print("Speed:", value) end, scrollFrame, "Player")
createSlider("Jump Power", 50, 200, 50, function(value) print("Jump:", value) end, scrollFrame, "Player")
createButton("Reset Character", function() print("Reset!") end, scrollFrame, "Player")
createToggle("Infinite Jump", false, function(state) print("Inf Jump:", state) end, scrollFrame, "Player")

-- Add content to Visual tab
createTextLabel("Visual Settings", scrollFrame, "Visual")
createToggle("ESP Players", false, function(state) print("ESP:", state) end, scrollFrame, "Visual")
createToggle("Fullbright", false, function(state) print("Fullbright:", state) end, scrollFrame, "Visual")
createDropdown("ESP Color", {"Red", "Green", "Blue", "White"}, function(option) print("Color:", option) end, scrollFrame, "Visual")
createSlider("FOV", 70, 120, 70, function(value) print("FOV:", value) end, scrollFrame, "Visual")

-- Add content to Misc tab
createTextLabel("Miscellaneous", scrollFrame, "Misc")
createTextBox("Custom Message", function(text) print("Message:", text) end, scrollFrame, "Misc")
createToggle("Auto Farm", false, function(state) print("Auto Farm:", state) end, scrollFrame, "Misc")
createDropdown("Teleport", {"Spawn", "Shop", "Secret Area"}, function(option) print("TP:", option) end, scrollFrame, "Misc")
createButton("Execute Custom Script", function() print("Custom script executed!") end, scrollFrame, "Misc")

-- Button event handlers
floatingButton.MouseButton1Click:Connect(function()
    if not mainFrame.Visible then
        mainFrame.Visible = true
        animate(mainFrame, {Size = UDim2.new(0, 700, 0, 450)}, 0.3, Enum.EasingStyle.Back)
    else
        animate(mainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back)
        wait(0.3)
        mainFrame.Visible = false
    end
end)

minimizeBtn.MouseButton1Click:Connect(function()
    animate(mainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back)
    wait(0.3)
    mainFrame.Visible = false
end)

closeBtn.MouseButton1Click:Connect(function()
    confirmFrame.Visible = true
    animate(confirmFrame, {Size = UDim2.new(0, 300, 0, 150)}, 0.3, Enum.EasingStyle.Back)
end)

confirmYes.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

confirmNo.MouseButton1Click:Connect(function()
    animate(confirmFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back)
    wait(0.3)
    confirmFrame.Visible = false
end)

-- Hover effects for buttons
local function addHoverEffect(button, hoverColor, normalColor)
    button.MouseEnter:Connect(function()
        animate(button, {BackgroundColor3 = hoverColor}, 0.2)
    end)
    button.MouseLeave:Connect(function()
        animate(button, {BackgroundColor3 = normalColor}, 0.2)
    end)
end

addHoverEffect(minimizeBtn, Color3.fromRGB(255, 215, 20), Color3.fromRGB(255, 195, 0))
addHoverEffect(closeBtn, Color3.fromRGB(255, 100, 100), colors.red)
addHoverEffect(confirmYes, Color3.fromRGB(255, 100, 100), colors.red)
addHoverEffect(confirmNo, Color3.fromRGB(55, 55, 70), colors.secondary)

-- Floating button pulse animation
spawn(function()
    while floatingButton.Parent do
        animate(floatingButton, {Size = UDim2.new(0, 85, 0, 85)}, 1, Enum.EasingStyle.Sine)
        wait(1)
        animate(floatingButton, {Size = UDim2.new(0, 80, 0, 80)}, 1, Enum.EasingStyle.Sine)
        wait(1)
    end
end)

-- Initialize
selectTab("Home")
updateScrollCanvas()

-- Update canvas size when content changes
contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateScrollCanvas)

print("Fryzer Hub loaded successfully!")
