-- Fryzer Hub Script v1.0
local Tabs = {}

local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerName = LocalPlayer.DisplayName
local AccountAge = Player.AccountAge
local GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")

-- Window creation
local Window = WindUI:CreateWindow({
    Title = "Fryzer Hub",
    Icon = "rbxassetid://129260712070622",
    IconThemed = true,
    Author = "Version 1.0",
    Folder = "Fryzer Hub",
    Size = UDim2.fromOffset(500, 400),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 180,
    ScrollBarEnabled = true,
    User = {
        Enabled = true,
        Anonymous = false,
        Username = LocalPlayer.DisplayName,
        UserId = LocalPlayer.UserId,
        Callback = function()
            print("User icon clicked:", LocalPlayer.Name)
        end
    }
})

-- UI open button
Window:EditOpenButton({
    Title = "OPEN",
    Icon = "door-open",
    CornerRadius = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("00D4FF"), Color3.fromHex("FF0080")),
    Draggable = false,
})

-- SELECTIVE ITEM BRING SYSTEM VARIABLES
local isSystemRunning = {} -- Table to track running state per section
local originalCameraSubject
local originalPlayerPosition = nil
local searchConnections = {} -- Track connections per section
local speedMode = "Slow"  -- Default speed: Slow, Fast, Ultra
local bringLocation = "Player"  -- Default location: Player, Campfire, Workspace
local inputConnections = {}
local cameraPart = nil

-- ORGANIZED ITEM SECTIONS
local itemSections = {
    ["Fuel"] = {
        sectionIcon = "🌳",
        enabled = false,
        items = {
            ["Log"] = {enabled = false, path = "workspace.Items.Log", displayName = "Log"},
            ["Fuel canister"] = {enabled = false, path = "workspace.Items.Fuel Canister", displayName = "Fuel canister"},
            ["Oil barrel"] = {enabled = false, path = "workspace.Items.Oil Barrel", displayName = "Oil barrel"},
            ["Coal"] = {enabled = false, path = "workspace.Items.Coal", displayName = "Coal"},
        }
    },
    ["Food&Heal"] = {
        sectionIcon = "🍎",
        enabled = false,
        items = {
            ["Apple"] = {enabled = false, path = "workspace.Items.Apple", displayName = "Apple"},
            ["Berry"] = {enabled = false, path = "workspace.Items.Berry", displayName = "Berry"},
            ["Fish"] = {enabled = false, path = "workspace.Items.Fish", displayName = "Fish"},
            ["Meat"] = {enabled = false, path = "workspace.Items.Meat", displayName = "Meat"},
            ["Bread"] = {enabled = false, path = "workspace.Items.Bread", displayName = "Bread"},
            ["Bandage"] = {enabled = false, path = "workspace.Items.Bandage", displayName = "Bandage"},
            ["Medkit"] = {enabled = false, path = "workspace.Items.MedKit", displayName = "Medkit"},
        }
    },
    ["Scrap"] = {
        sectionIcon = "🗑️",
        enabled = false,
        items = {
            ["Raido"] = {enabled = false, path = "workspace.Items.Old Radio", displayName = "Old Radio"},
            ["Old flashlight"] = {enabled = false, path = "workspace.Items.Old Flashlight", displayName = "Old flashlight"},
            ["Old Car Engine"] = {enabled = false, path = "workspace.Items.Old Car Engine", displayName = "Old car engine"},
        }
    },
    ["Weapons"] = {
        sectionIcon = "⚔️",
        enabled = false,
        items = {
            ["Axe"] = {enabled = false, path = "workspace.Items.Axe", displayName = "🪓 Axe"},
            ["Spear"] = {enabled = false, path = "workspace.Items.Spear", displayName = "🔱 Spear"},
            ["Dagger"] = {enabled = false, path = "workspace.Items.Dagger", displayName = "🗡️ Dagger"},
        }
    },
    ["Basic Resources"] = {
        sectionIcon = "🪨",
        enabled = false,
        items = {
            ["Stone"] = {enabled = false, path = "workspace.Items.Stone", displayName = "🪨 Stone"},
            ["Iron"] = {enabled = false, path = "workspace.Items.Iron", displayName = "⚒️ Iron"},
            ["Rock"] = {enabled = false, path = "workspace.Items.Rock", displayName = "🗿 Rock"},
        }
    },
}

-- Convert sections to flat itemToggles for compatibility
local itemToggles = {}
for sectionName, sectionData in pairs(itemSections) do
    for itemName, itemData in pairs(sectionData.items) do
        itemToggles[itemName] = itemData
    end
end

-- Store original player state
local function saveOriginalState()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        originalPlayerPosition = char.HumanoidRootPart.CFrame
        print("💾 Original position saved:", originalPlayerPosition.Position)
    end
end

-- Get target CFrame based on location
local function getTargetCFrame()
    if bringLocation == "Player" then
        return originalPlayerPosition or LocalPlayer.Character.HumanoidRootPart.CFrame
    elseif bringLocation == "Campfire" then
        local campfire = workspace:FindFirstChild("Campfire")
        if campfire then
            return campfire.CFrame
        else
            print("❌ Campfire not found!")
            return originalPlayerPosition
        end
    elseif bringLocation == "Workspace" then
        return CFrame.new(0, 0, 0)
    end
    return originalPlayerPosition
end

-- Return to original position
local function returnToOriginalPosition()
    if originalPlayerPosition and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = originalPlayerPosition
        print("🏠 Returned to original position")
        WindUI:Notify({
            Title = "Teleport Complete",
            Content = "Teleported back to starting position",
            Duration = 3
        })
    end
end

-- Disable user inputs
local function disableInputs()
    for _, connection in pairs(inputConnections) do
        connection:Disconnect()
    end
    inputConnections = {}
    
    inputConnections[#inputConnections + 1] = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        local inputType = input.UserInputType
        local keyCode = input.KeyCode
        
        if inputType == Enum.UserInputType.Keyboard then
            local blockedKeys = {
                Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D,
                Enum.KeyCode.Space, Enum.KeyCode.LeftShift, Enum.KeyCode.LeftControl,
                Enum.KeyCode.Q, Enum.KeyCode.E, Enum.KeyCode.R, Enum.KeyCode.T,
                Enum.KeyCode.F, Enum.KeyCode.G, Enum.KeyCode.H, Enum.KeyCode.J,
                Enum.KeyCode.K, Enum.KeyCode.L, Enum.KeyCode.Z, Enum.KeyCode.X,
                Enum.KeyCode.C, Enum.KeyCode.V, Enum.KeyCode.B, Enum.KeyCode.N,
                Enum.KeyCode.M, Enum.KeyCode.Up, Enum.KeyCode.Down,
                Enum.KeyCode.Left, Enum.KeyCode.Right
            }
            
            for _, blockedKey in pairs(blockedKeys) do
                if keyCode == blockedKey then
                    return
                end
            end
        end
        
        if inputType == Enum.UserInputType.MouseButton1 or 
           inputType == Enum.UserInputType.MouseButton2 or
           inputType == Enum.UserInputType.MouseButton3 then
            return
        end
    end)
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        humanoid.WalkSpeed = 0
        humanoid.JumpPower = 0
        humanoid.JumpHeight = 0
    end
    
    print("🔒 All inputs disabled, character frozen")
end

-- Restore user inputs
local function enableInputs()
    for _, connection in pairs(inputConnections) do
        connection:Disconnect()
    end
    inputConnections = {}
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        humanoid.WalkSpeed = 16
        humanoid.JumpPower = 50
        humanoid.JumpHeight = 7.2
    end
    
    print("🔓 User inputs restored")
end

-- Enhanced find selected items
local function findSelectedItems(sectionName)
    local foundItems = {}
    
    local function searchFolder(folder)
        for _, child in pairs(folder:GetChildren()) do
            for itemName, itemData in pairs(itemSections[sectionName].items) do
                if itemData.enabled and child.Name == itemName then
                    table.insert(foundItems, {item = child, name = itemName})
                end
            end
            if #child:GetChildren() > 0 then
                searchFolder(child)
            end
        end
    end
    
    searchFolder(workspace)
    
    return foundItems
end

-- Get enabled items count for a section
local function getEnabledItemsCount(sectionName)
    local count = 0
    for _, itemData in pairs(itemSections[sectionName].items) do
        if itemData.enabled then
            count = count + 1
        end
    end
    return count
end

-- Get enabled items list for a section
local function getEnabledItemsList(sectionName)
    local items = {}
    for itemName, itemData in pairs(itemSections[sectionName].items) do
        if itemData.enabled then
            table.insert(items, itemName)
        end
    end
    return items
end

-- Get remote events
local function getRemoteEvents()
    local success, remoteEvents = pcall(function()
        return ReplicatedStorage:WaitForChild("RemoteEvents", 2)
    end)
    
    if not success or not remoteEvents then
        return nil, nil
    end
    
    local dragEvent = remoteEvents:FindFirstChild("RequestStartDraggingItem")
    local stopDragEvent = remoteEvents:FindFirstChild("StopDraggingItem")
    
    return dragEvent, stopDragEvent
end

-- Get item position helper
local function getItemPosition(item)
    if item:IsA("Model") then
        return item.PrimaryPart and item.PrimaryPart.Position or 
               (item:FindFirstChildWhichIsA("BasePart") and item:FindFirstChildWhichIsA("BasePart").Position)
    elseif item:IsA("BasePart") then
        return item.Position
    end
    return nil
end

-- Fast drag item with adjustable speed modes
local function fastDragItem(item, targetCFrame, itemName)
    local char = LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    
    if not char or not hrp then
        return false
    end
    
    local dragEvent, stopDragEvent = getRemoteEvents()
    if not dragEvent or not stopDragEvent then
        return false
    end
    
    local itemPos = getItemPosition(item)
    if not itemPos then
        return false
    end
    
    if originalPlayerPosition then
        hrp.CFrame = originalPlayerPosition
    end
    
    local speedSettings = {
        ["Slow"] = {teleportHeight = 25, approachHeight = 2, moveHeight = 12, steps = 6, stepDelay = 0.01, waitTime = 0.08},
        ["Fast"] = {teleportHeight = 15, approachHeight = 1, moveHeight = 8, steps = 4, stepDelay = 0.005, waitTime = 0.03},
        ["Ultra"] = {teleportHeight = 10, approachHeight = 0.5, moveHeight = 5, steps = 2, stepDelay = 0.001, waitTime = 0.01}
    }
    
    local settings = speedSettings[speedMode] or speedSettings["Fast"]
    
    print("🎯 Bringing", itemName, "(" .. speedMode .. ") to " .. bringLocation)
    
    hrp.CFrame = CFrame.new(itemPos + Vector3.new(0, settings.teleportHeight, 0))
    wait(settings.waitTime)
    
    hrp.CFrame = CFrame.new(itemPos + Vector3.new(0, settings.approachHeight, 0))
    wait(settings.waitTime * 0.5)
    
    pcall(function()
        dragEvent:FireServer(item)
    end)
    wait(settings.waitTime)
    
    local itemPart = item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) or item
    
    if itemPart then
        local targetPos = targetCFrame.Position + Vector3.new(0, settings.moveHeight, 0)
        
        for i = 1, settings.steps do
            if not isSystemRunning[sectionName] then break end
            
            if originalPlayerPosition then
                hrp.CFrame = originalPlayerPosition
            end
            
            local alpha = i / settings.steps
            local newPos = itemPos:Lerp(targetPos, alpha)
            
            pcall(function()
                if itemPart.Parent then
                    itemPart.CFrame = CFrame.new(newPos)
                end
            end)
            
            wait(settings.stepDelay)
        end
        
        pcall(function()
            if itemPart.Parent then
                itemPart.CFrame = CFrame.new(targetPos)
            end
        end)
        
        wait(settings.waitTime * 0.5)
    end
    
    pcall(function()
        stopDragEvent:FireServer(item)
    end)
    
    if originalPlayerPosition then
        hrp.CFrame = originalPlayerPosition
    end
    
    return true
end

-- Return camera to player
local function returnCameraToPlayer()
    local camera = workspace.CurrentCamera
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        camera.CameraSubject = LocalPlayer.Character.Humanoid
        print("📹 Camera returned to player")
    else
        camera.CameraSubject = originalCameraSubject
    end
end

-- Stop bringing for a specific section
local function stopBringing(sectionName)
    print("🛑 Stopping selective bring system for", sectionName)
    isSystemRunning[sectionName] = false
    
    if searchConnections[sectionName] then
        searchConnections[sectionName]:Disconnect()
        searchConnections[sectionName] = nil
    end
    
    spawn(function()
        if cameraPart then
            cameraPart:Destroy()
            cameraPart = nil
        end
        
        returnCameraToPlayer()
        
        enableInputs()
        
        wait(0.5)
        returnToOriginalPosition()
        
        WindUI:Notify({
            Title = "🛑 " .. sectionName .. " Stopped",
            Content = "Returned to start position, inputs restored!",
            Duration = 4
        })
        
        print("✅", sectionName, "system fully stopped and reset")
    end)
end

-- Start selective bring for a specific section
local function startSelectiveBring(sectionName)
    local enabledCount = getEnabledItemsCount(sectionName)
    if enabledCount == 0 then
        WindUI:Notify({
            Title = "❌ No Items Selected in " .. sectionName,
            Content = "Please enable at least one item type to bring!",
            Duration = 4
        })
        return
    end
    
    local enabledItems = getEnabledItemsList(sectionName)
    print("🚀 Starting selective bring system for", sectionName, ":", table.concat(enabledItems, ", "))
    isSystemRunning[sectionName] = true
    
    saveOriginalState()
    
    disableInputs()
    
    local camera = workspace.CurrentCamera
    originalCameraSubject = camera.CameraSubject
    
    if originalPlayerPosition then
        cameraPart = Instance.new("Part")
        cameraPart.Name = "CameraPart"
        cameraPart.Anchored = true
        cameraPart.CanCollide = false
        cameraPart.Transparency = 1
        cameraPart.CFrame = originalPlayerPosition + Vector3.new(0, 8, 12)
        cameraPart.Parent = workspace
        
        camera.CameraSubject = cameraPart
        print("📹 Camera locked to start position")
    end
    
    WindUI:Notify({
        Title = "🎮 " .. sectionName .. " System Active",
        Content = "Bringing " .. enabledCount .. " item types to " .. bringLocation .. ".",
        Duration = 1.2
    })
    
    searchConnections[sectionName] = spawn(function()
        local searchInterval = 2
        local lastSearchTime = 0
        local noItemsCounter = 0
        local maxNoItemsBeforeStop = 3
        
        while isSystemRunning[sectionName] do
            local currentTime = tick()
            
            if currentTime - lastSearchTime >= searchInterval then
                lastSearchTime = currentTime
                
                if originalPlayerPosition and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = originalPlayerPosition
                end
                
                local foundItems = findSelectedItems(sectionName)
                print("🔍 Selective Search for", sectionName, "... Found:", #foundItems, "selected items")
                
                if #foundItems > 0 then
                    noItemsCounter = 0
                    for _, itemData in pairs(foundItems) do
                        if not isSystemRunning[sectionName] then break end
                        
                        local item = itemData.item
                        local itemName = itemData.name
                        
                        local itemPos = getItemPosition(item)
                        if itemPos and originalPlayerPosition then
                            local targetCFrame = getTargetCFrame()
                            local distance = (itemPos - targetCFrame.Position).Magnitude
                            local minDistance = (speedMode == "Ultra" and 3) or (speedMode == "Fast" and 5) or 8
                            
                            if distance > minDistance then
                                local success = pcall(fastDragItem, item, targetCFrame, itemName)
                                if success then
                                    print("📦", itemName, "brought successfully!")
                                else
                                    print("❌ Failed to bring", itemName)
                                end
                                
                                wait((speedMode == "Ultra" and 0.05) or (speedMode == "Fast" and 0.1) or 0.2)
                            else
                                print("📍", itemName, "already nearby")
                            end
                        end
                    end
                else
                    noItemsCounter = noItemsCounter + 1
                    print("❌ No selected items found in search for", sectionName, "(Count: " .. noItemsCounter .. ")")
                    if noItemsCounter >= maxNoItemsBeforeStop then
                        print("❌ No items found multiple times - stopping", sectionName)
                        stopBringing(sectionName)
                        returnCameraToPlayer()
                        break
                    end
                end
            end
            
            wait(0.1)
        end
    end)
end

-- SELECTIVE ITEM BRING TAB
Tabs.BringTab = Window:Tab({ 
    Title = "Selective Item Bring", 
    Icon = "target",
    Desc = "Selective item collection system"
})

Tabs.BringTab:Paragraph({
    Title = "🎯 Selective Item Bring System",
    Content = "Choose which items to bring by section. Toggle sections on/off and select items via dropdowns or toggles."
})

-- Dropdown for location
Tabs.BringTab:Dropdown({
    Title = "📍 Bring Location",
    Desc = "Select where to bring the items",
    Options = {"Player", "Campfire", "Workspace"},
    Multi = false,
    Default = "Player",
    Callback = function(value)
        bringLocation = value
        print("Update location: Locations = " .. bringLocation)
        WindUI:Notify({
            Title = "📍 Location Updated",
            Content = "Items will be brought to: " .. bringLocation,
            Duration = 3
        })
    end
})

-- Dropdown for speed
Tabs.BringTab:Dropdown({
    Title = "⚡ Speed Mode",
    Desc = "Select bringing speed: Slow, Fast, Ultra",
    Options = {"Slow", "Fast", "Ultra"},
    Multi = false,
    Default = "Slow",
    Callback = function(value)
        speedMode = value
        print("Speed Mode:", speedMode)
        WindUI:Notify({
            Title = "⚡ Speed Updated",
            Content = speedMode .. " mode activated!",
            Duration = 3
        })
    end
})

-- Section-specific toggles and dropdowns
for sectionName, sectionData in pairs(itemSections) do
    Tabs.BringTab:Paragraph({
        Title = sectionData.sectionIcon .. " " .. sectionName,
        Content = "Control " .. sectionName:lower() .. " items"
    })
    
    -- Section toggle
    Tabs.BringTab:Toggle({
        Title = "🔄 Enable " .. sectionName .. " System",
        Desc = "Start/stop bringing for " .. sectionName,
        Value = false,
        Callback = function(state)
            if state then
                if not isSystemRunning[sectionName] then
                    startSelectiveBring(sectionName)
                else
                    WindUI:Notify({
                        Title = "⚠️ " .. sectionName .. " Already Running",
                        Content = "System is already active for this section!",
                        Duration = 3
                    })
                end
            else
                if isSystemRunning[sectionName] then
                    stopBringing(sectionName)
                end
            end
            sectionData.enabled = state
            print(sectionName .. " System:", state and "ENABLED" or "DISABLED")
        end
    })
    
    -- Dropdown for multi-selection (except Log in Fuel)
    local options = {}
    for itemName, itemData in pairs(sectionData.items) do
        if sectionName ~= "Fuel" or itemName ~= "Log" then
            table.insert(options, itemData.displayName)
        end
    end
    
    Tabs.BringTab:Dropdown({
        Title = sectionName .. " Items (Multi-Select)",
        Desc = "Select multiple " .. sectionName:lower() .. " items to enable",
        Options = options,
        Multi = true,
        Callback = function(selected)
            for itemName, itemData in pairs(sectionData.items) do
                if sectionName ~= "Fuel" or itemName ~= "Log" then
                    itemData.enabled = false
                end
            end
            for _, sel in pairs(selected) do
                for itemName, itemData in pairs(sectionData.items) do
                    if itemData.displayName == sel then
                        itemData.enabled = true
                        break
                    end
                end
            end
            local enabledCount = getEnabledItemsCount(sectionName)
            WindUI:Notify({
                Title = sectionName .. " Updated",
                Content = "Selected: " .. (#selected > 0 and table.concat(selected, ", ") or "None") .. " | Total enabled: " .. enabledCount,
                Duration = 3
            })
        end
    })
    
    -- Separate toggle for Log in Fuel
    if sectionName == "Fuel" then
        Tabs.BringTab:Toggle({
            Title = sectionData.items["Log"].displayName,
            Desc = "Toggle Log (Wood) separately",
            Value = false,
            Callback = function(state)
                sectionData.items["Log"].enabled = state
                local enabledCount = getEnabledItemsCount(sectionName)
                WindUI:Notify({
                    Title = state and "✅ Log Enabled" or "❌ Log Disabled",
                    Content = "Total enabled: " .. enabledCount,
                    Duration = 2
                })
            end
        })
    end
end

Tabs.BringTab:Paragraph({
    Title = "⚡ Quick Section Selection",
    Content = "Quick buttons to enable/disable entire sections."
})

for sectionName, sectionData in pairs(itemSections) do
    Tabs.BringTab:Button({
        Title = sectionData.sectionIcon .. " Enable All " .. sectionName,
        Desc = "Enable all items in " .. sectionName .. " section",
        Callback = function()
            local itemNames = {}
            for itemName, itemData in pairs(sectionData.items) do
                itemData.enabled = true
                table.insert(itemNames, itemName)
            end
            WindUI:Notify({
                Title = sectionData.sectionIcon .. " " .. sectionName .. " Enabled",
                Content = "Enabled: " .. table.concat(itemNames, ", "),
                Duration = 4
            })
        end
    })
end

Tabs.BringTab:Button({
    Title = "❌ Disable All Items",
    Desc = "Turn off all item types",
    Callback = function()
        for _, sectionData in pairs(itemSections) do
            for _, itemData in pairs(sectionData.items) do
                itemData.enabled = false
            end
        end
        WindUI:Notify({
            Title = "❌ All Disabled",
            Content = "All item types disabled!",
            Duration = 3
        })
    end
})

print("All components loaded!")
