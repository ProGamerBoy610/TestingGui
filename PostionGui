-- 99 nights in the forest
local success, WindUI = pcall(function()
    return loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
end)

if not success then
    local success2, WindUI2 = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/source.lua"))()
    end)
    
    if success2 then
        WindUI = WindUI2
    else
        warn("Failed to load WindUI library.")
        game.StarterGui:SetCore("SendNotification", {
            Title = "Library Error",
            Text = "Failed to load WindUI. Please rejoin and try again.",
            Duration = 10
        })
        return
    end
end

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Player = Players.LocalPlayer

-- Player Info
local PlayerName = Player.DisplayName ~= "" and Player.DisplayName or Player.Name
local AccountAge = Player.AccountAge

-- Game info
local GameName = "Unknown Game"
pcall(function()
    GameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
end)

-- Theme
local themeSuccess = pcall(function()
    WindUI:AddTheme({
        Name = "CustomBlue",
        Accent = "#3b82f6",
        Outline = "#1e40af",
        Text = "#ffffff",
        Placeholder = "#93c5fd",
        Background = "#1e293b",
        BackgroundSecondary = "#334155",
    })
end)

-- Window
local successWindow, Window = pcall(function()
    return WindUI:CreateWindow({
        Title = "Fryzer Hub",
        Icon = "rbxassetid://129260712070622",
        Author = "99 Nights in the forest",
        Folder = "CustomHub",
        Size = UDim2.fromOffset(500, 370),
        Transparent = false,
        Theme = themeSuccess and "CustomBlue" or "Dark",
        SideBarWidth = 240,
        ScrollBarEnabled = true
    })
end)

if not successWindow then
    warn("Failed to create WindUI window.")
    game.StarterGui:SetCore("SendNotification", {
        Title = "Window Error",
        Text = "Failed to create UI window. Please rejoin and try again.",
        Duration = 10
    })
    return
end

if themeSuccess then
    pcall(function()
        WindUI:SetTheme("CustomBlue")
    end)
end

-- Custom Open Button
pcall(function()
    Window:EditOpenButton({
        Title = " Open Hub",
        Icon = "user",
        CornerRadius = UDim.new(0, 12),
        StrokeThickness = 2,
        Color = ColorSequence.new(Color3.fromHex("#3b82f6"), Color3.fromHex("#6366f1")),
        Draggable = true,
    })
end)

--================= TABS =================

local Tabs = {}

Tabs.InfoTab = Window:Tab({
    Title = "Info",
    Icon = "info",
    Desc = "Player information and Discord community"
})

Tabs.PlayerTab = Window:Tab({
    Title = "Player",
    Icon = "user-check",
    Desc = "All UI components showcase"
})

Tabs.EspTab = Window:Tab({
    Title = "Visual",
    Icon = "eye",
    Desc = "All UI components showcase"
})

Tabs.JkTab = Window:Tab({
    Title = "Fun",
    Icon = "smile",
    Desc = "All UI components showcase"
})

Tabs.TpTab = Window:Tab({
    Title = "Teleport",
    Icon = "navigation",
    Desc = "All UI components showcase"
})

Tabs.OpTab = Window:Tab({
    Title = "Over Powered",
    Icon = "zap",
    Desc = "All UI components showcase"
})

Window:SelectTab(1)

--================= INFO TAB CONTENT =================

pcall(function()
    Tabs.InfoTab:Paragraph({
        Title = "Player Information Dashboard",
        Desc = "Complete player details, game information, and community access",
        Image = "user-check",
        Color = "Blue",
    })
end)

pcall(function()
    Tabs.InfoTab:Paragraph({
        Title = "üë§ " .. PlayerName,
        Desc = string.format(
            "üè∑Ô∏è Username: @%s\nüéÇ Account Age: %d days\nüÜî User ID: %d\nüéÆ Current Game: %s\nüë• Server: %d/%d players\nüìç Region: %s",
            Player.Name, AccountAge, Player.UserId, GameName,
            #Players:GetPlayers(), Players.MaxPlayers,
            game:GetService("LocalizationService").RobloxLocaleId
        ),
        Image = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. Player.UserId .. "&width=150&height=150&format=png",
        ImageSize = 52,
    })
end)

pcall(function()
    Tabs.InfoTab:Paragraph({
        Title = "Join Our Discord Community",
        Desc = "Connect with other users, get support, and stay updated!",
        Image = "users",
        Color = "Blue",
    })
end)

pcall(function()
    Tabs.InfoTab:Button({
        Title = "Copy Discord Link",
        Desc = "Copy invite link to clipboard",
        Callback = function()
            setclipboard("https://discord.gg/rpE4Eet7")
            WindUI:Notify({
                Title = "Link Copied!",
                Content = "Discord link copied to clipboard",
                Duration = 3,
                Icon = "copy",
            })
        end
    })
end)

--================= PLAYERS CONTROLLS =================

pcall(function()
    Tabs.PlayerTab:Paragraph({
        Title = "Player Controls",
        Desc = "Use the buttons below to control your player character",
        Image = "user-check",
        Color = "Blue",
    })
end)

-- ========================================
-- SIMPLE WINDUI MOVEMENT SYSTEM
-- WalkSpeed, JumpHeight, Noclip, Instant Prompts
-- ========================================

local LocalPlayer = Players.LocalPlayer
local ActiveSpeedBoost = false
local ActiveJumpBoost = false
local ActiveNoclip = false
local ActiveInstantPrompts = false
local ValueSpeed = 16
local ValueJumpHeight = 7.2
local OldSpeed = 16
local OldJumpHeight = 7.2

local function getCharacter()
    return LocalPlayer.Character
end

local function getHumanoid()
    local character = getCharacter()
    return character and character:FindFirstChildOfClass("Humanoid")
end

local function updateOriginalValues()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        OldSpeed = LocalPlayer.Character.Humanoid.WalkSpeed
        OldJumpHeight = LocalPlayer.Character.Humanoid.JumpHeight or 7.2
    end
end

updateOriginalValues()
LocalPlayer.CharacterAdded:Connect(updateOriginalValues)

pcall(function()
    Tabs.PlayerTab:Toggle({
        Title = "Instant Open Chests",
        Icon = "zap-off",
        Value = false,
        Callback = function(state)
            ActiveInstantPrompts = state
            task.spawn(function()
                if ActiveInstantPrompts then
                    for _, prompt in pairs(game.Workspace:GetDescendants()) do
                        if prompt:IsA("ProximityPrompt") and prompt.HoldDuration ~= 0 then
                            prompt:SetAttribute("HoldDurationOld", prompt.HoldDuration)
                            prompt.HoldDuration = 0
                        end
                    end
                    local promptConnection
                    promptConnection = game.Workspace.DescendantAdded:Connect(function(descendant)
                        if ActiveInstantPrompts and descendant:IsA("ProximityPrompt") and descendant.HoldDuration ~= 0 then
                            descendant:SetAttribute("HoldDurationOld", descendant.HoldDuration)
                            descendant.HoldDuration = 0
                        end
                    end)
                    while ActiveInstantPrompts do
                        task.wait(1)
                    end
                    if promptConnection then
                        promptConnection:Disconnect()
                    end
                else
                    for _, prompt in pairs(game.Workspace:GetDescendants()) do
                        if prompt:IsA("ProximityPrompt") and prompt:GetAttribute("HoldDurationOld") then
                            prompt.HoldDuration = prompt:GetAttribute("HoldDurationOld")
                            prompt:SetAttribute("HoldDurationOld", nil)
                        end
                    end
                end
            end)
            print("‚ö° Instant Prompts: " .. (state and "ON" or "OFF"))
        end
    })
end)

pcall(function()
    Tabs.PlayerTab:Slider({
        Title = "Walk Speed Setting",
        Value = { Min = 16, Max = 500, Default = 16 },
        Callback = function(value)
            ValueSpeed = value
            print("üèÉ Walk speed set to: " .. value)
        end
    })
end)

pcall(function()
    Tabs.PlayerTab:Toggle({
        Title = "Enable Speed Boost",
        Icon = "zap",
        Value = false,
        Callback = function(state)
            ActiveSpeedBoost = state
            task.spawn(function()
                while ActiveSpeedBoost do
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                        LocalPlayer.Character.Humanoid.WalkSpeed = ValueSpeed
                    end
                    task.wait(0.1)
                end
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    LocalPlayer.Character.Humanoid.WalkSpeed = OldSpeed
                end
            end)
            print("üèÉ Speed Boost: " .. (state and "ON" or "OFF"))
        end
    })
end)

pcall(function()
    Tabs.PlayerTab:Slider({
        Title = "Jump Height Setting",
        Value = { Min = 7, Max = 200, Default = 50 },
        Callback = function(value)
            ValueJumpHeight = value
            print("ü¶ò Jump height set to: " .. value)
        end
    })
end)

pcall(function()
    Tabs.PlayerTab:Toggle({
        Title = "Enable Jump Boost",
        Icon = "move-up",
        Value = false,
        Callback = function(state)
            ActiveJumpBoost = state
            task.spawn(function()
                while ActiveJumpBoost do
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                        local humanoid = LocalPlayer.Character.Humanoid
                        humanoid.UseJumpPower = false
                        humanoid.JumpHeight = ValueJumpHeight
                    end
                    task.wait(0.1)
                end
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    local humanoid = LocalPlayer.Character.Humanoid
                    humanoid.JumpHeight = 7.2
                end
            end)
            print("ü¶ò Jump Boost: " .. (state and "ON" or "OFF"))
        end
    })
end)

pcall(function()
    Tabs.PlayerTab:Toggle({
        Title = "Noclip Mode",
        Icon = "ghost",
        Value = false,
        Callback = function(state)
            ActiveNoclip = state
            task.spawn(function()
                while ActiveNoclip do
                    if LocalPlayer.Character then
                        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                            if part:IsA("BasePart") and part.CanCollide then
                                part.CanCollide = false
                            end
                        end
                    end
                    task.wait(0.1)
                end
                if LocalPlayer.Character then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") and not part.CanCollide then
                            part.CanCollide = true
                        end
                    end
                end
            end)
            print("üëª Noclip: " .. (state and "ON" or "OFF"))
        end
    })
end)

-- Fly System
local IYMouse = Players.LocalPlayer:GetMouse()
local FLYING = false
local QEfly = true
local iyflyspeed = 1
local vehicleflyspeed = 1
local ActivateFly = false

local function sFLY(vfly)
    repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart") and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    repeat wait() until IYMouse
    if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

    local T = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0

    local function FLY()
        FLYING = true
        local BG = Instance.new('BodyGyro')
        local BV = Instance.new('BodyVelocity')
        BG.P = 9e4
        BG.Parent = T
        BV.Parent = T
        BG.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        BG.CFrame = T.CFrame
        BV.Velocity = Vector3.new(0, 0, 0)
        BV.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        task.spawn(function()
            repeat wait()
                if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                    Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
                end
                if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                    SPEED = 50
                elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                    SPEED = 0
                end
                if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                    BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                    lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
                elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                    BV.Velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                else
                    BV.Velocity = Vector3.new(0, 0, 0)
                end
                BG.CFrame = workspace.CurrentCamera.CoordinateFrame
            until not FLYING
            CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            SPEED = 0
            BG:Destroy()
            BV:Destroy()
            if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
            end
        end)
    end
    flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 's' then
            CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'a' then
            CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
        elseif KEY:lower() == 'd' then
            CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
        elseif QEfly and KEY:lower() == 'e' then
            CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
        elseif QEfly and KEY:lower() == 'q' then
            CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
        end
        pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
    end)
    flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = 0
        elseif KEY:lower() == 's' then
            CONTROL.B = 0
        elseif KEY:lower() == 'a' then
            CONTROL.L = 0
        elseif KEY:lower() == 'd' then
            CONTROL.R = 0
        elseif KEY:lower() == 'e' then
            CONTROL.Q = 0
        elseif KEY:lower() == 'q' then
            CONTROL.E = 0
        end
    end)
    FLY()
end

local function NOFLY()
    FLYING = false
    if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
    if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
        Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
    end
    pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end

local velocityHandlerName = "BodyVelocity"
local gyroHandlerName = "BodyGyro"
local mfly1
local mfly2

local function UnMobileFly()
    pcall(function()
        FLYING = false
        local root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        root:FindFirstChild(velocityHandlerName):Destroy()
        root:FindFirstChild(gyroHandlerName):Destroy()
        Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
        mfly1:Disconnect()
        mfly2:Disconnect()
    end)
end

local function MobileFly()
    UnMobileFly()
    FLYING = true
    local root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    local v3none = Vector3.new()
    local v3zero = Vector3.new(0, 0, 0)
    local v3inf = Vector3.new(9e9, 9e9, 9e9)
    local controlModule = require(Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.Parent = root
    bv.MaxForce = v3zero
    bv.Velocity = v3zero
    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.Parent = root
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50
    mfly1 = Players.LocalPlayer.CharacterAdded:Connect(function()
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero
        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 50
    end)
    mfly2 = RunService.RenderStepped:Connect(function()
        root = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        camera = workspace.CurrentCamera
        if Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
            local humanoid = Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
            local VelocityHandler = root:FindFirstChild(velocityHandlerName)
            local GyroHandler = root:FindFirstChild(gyroHandlerName)
            VelocityHandler.MaxForce = v3inf
            GyroHandler.MaxTorque = v3inf
            humanoid.PlatformStand = true
            GyroHandler.CFrame = camera.CoordinateFrame
            VelocityHandler.Velocity = v3none
            local direction = controlModule:GetMoveVector()
            if direction.X > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((iyflyspeed) * 50))
            end
            if direction.X < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((iyflyspeed) * 50))
            end
            if direction.Z > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((iyflyspeed) * 50))
            end
            if direction.Z < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((iyflyspeed) * 50))
            end
        end
    end)
end

pcall(function()
    Tabs.PlayerTab:Slider({
        Title = "Fly Speed",
        Value = { Min = 0.1, Max = 10, Default = 1 },
        Callback = function(val)
            iyflyspeed = val
        end
    })
end)

pcall(function()
    Tabs.PlayerTab:Toggle({
        Title = "Fly",
        Value = false,
        Callback = function(state)
            ActivateFly = state
            task.spawn(function()
                if not FLYING and ActivateFly then
                    if UserInputService.TouchEnabled then
                        MobileFly()
                    else
                        NOFLY()
                        wait()
                        sFLY()
                    end
                elseif FLYING and not ActivateFly then
                    if UserInputService.TouchEnabled then
                        UnMobileFly()
                    else
                        NOFLY()
                    end
                end
            end)
        end
    })
end)

print("üöÄ Simple Movement System loaded!")
print("üìù Features: Walk Speed, Jump Height, Noclip, Instant Prompts")

-- Health Billboard System
local healthBillboardEnabled = false
local connections = {}
local tracked = {}

local SETTINGS = {
    Name = "HealthBillboard",
    MaxDistance = 250,
    StudsOffset = Vector3.new(0, 3.5, 0),
    TextFont = Enum.Font.GothamBold,
    TextSize = 14,
    AlwaysOnTop = true,
    UpdateHz = 30,
    UseBar = true,
    ShowModelName = false,
    BarHeight = 6,
    BorderThickness = 2.5,
}

local function clamp(n, a, b) return math.max(a, math.min(b, n)) end

local function lerpColor(c1, c2, t)
    return Color3.new(
        c1.R + (c2.R - c1.R) * t,
        c1.G + (c2.G - c1.G) * t,
        c1.B + (c2.B - c1.B) * t
    )
end

local function colorByPercent(p)
    p = clamp(p, 0, 1)
    return lerpColor(Color3.fromRGB(255, 60, 60), Color3.fromRGB(60, 255, 90), p)
end

local function findHead(model)
    local head = model:FindFirstChild("Head")
    if head and head:IsA("BasePart") then return head end
    local best, bestY = nil, -math.huge
    for _, obj in ipairs(model:GetDescendants()) do
        if obj:IsA("BasePart") and obj.CanCollide then
            if obj.Position.Y > bestY then
                bestY = obj.Position.Y
                best = obj
            end
        end
    end
    return best
end

local function makeBillboard(humanoid, head, model)
    if tracked[humanoid] and tracked[humanoid].Parent then return tracked[humanoid] end

    local bb = Instance.new("BillboardGui")
    bb.Name = SETTINGS.Name
    bb.Adornee = head
    bb.AlwaysOnTop = SETTINGS.AlwaysOnTop
    bb.Size = UDim2.fromOffset(160, SETTINGS.UseBar and (26 + SETTINGS.BarHeight) or 26)
    bb.StudsOffset = SETTINGS.StudsOffset
    bb.MaxDistance = SETTINGS.MaxDistance
    bb.ResetOnSpawn = false
    bb.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    bb.Parent = head

    local holder = Instance.new("Frame")
    holder.Size = UDim2.fromScale(1, 1)
    holder.BackgroundTransparency = 1
    holder.Parent = bb

    local text = Instance.new("TextLabel")
    text.Name = "HPText"
    text.Size = UDim2.new(1, -12, 0, 24)
    text.Position = UDim2.fromOffset(6, 2)
    text.BackgroundTransparency = 1
    text.TextColor3 = Color3.new(1,1,1)
    text.TextStrokeTransparency = 0.5
    text.Font = SETTINGS.TextFont
    text.TextSize = SETTINGS.TextSize
    text.Parent = holder

    local barFrame, barFill
    if SETTINGS.UseBar then
        barFrame = Instance.new("Frame")
        barFrame.Name = "Bar"
        barFrame.Size = UDim2.new(1, -12, 0, SETTINGS.BarHeight)
        barFrame.Position = UDim2.fromOffset(6, 26)
        barFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
        barFrame.BorderSizePixel = SETTINGS.BorderThickness
        barFrame.Parent = holder

        barFill = Instance.new("Frame")
        barFill.Name = "Fill"
        barFill.Size = UDim2.fromScale(1, 1)
        barFill.BackgroundColor3 = Color3.fromRGB(60, 255, 90)
        barFill.BorderSizePixel = 0
        barFill.Parent = barFrame
    end

    tracked[humanoid] = bb

    local lastDisplayPct = 1
    local function update()
        if not healthBillboardEnabled then return end
        local hp = clamp(humanoid.Health, 0, math.max(1, humanoid.MaxHealth))
        local maxHp = math.max(1, humanoid.MaxHealth)
        local pct = hp / maxHp
        text.Text = string.format("%d / %d", math.floor(hp + 0.5), math.floor(maxHp + 0.5))

        if barFill then
            lastDisplayPct = lastDisplayPct + (pct - lastDisplayPct) * 0.35
            barFill.Size = UDim2.fromScale(lastDisplayPct, 1)
            barFill.BackgroundColor3 = colorByPercent(lastDisplayPct)
        else
            text.TextColor3 = colorByPercent(pct)
        end
    end

    local healthConn = humanoid.HealthChanged:Connect(update)
    local maxHealthConn = humanoid:GetPropertyChangedSignal("MaxHealth"):Connect(update)
    local diedConn = humanoid.Died:Connect(function()
        if tracked[humanoid] then
            tracked[humanoid]:Destroy()
            tracked[humanoid] = nil
        end
    end)
    local heartbeatConn = RunService.Heartbeat:Connect(update)

    connections[humanoid] = {healthConn, maxHealthConn, diedConn, heartbeatConn}

    update()
end

local function attachToModel(model)
    if not model or not model:IsA("Model") then return end
    if Players:GetPlayerFromCharacter(model) == LocalPlayer then return end
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    local head = findHead(model)
    if not head then return end
    makeBillboard(humanoid, head, model)
end

local function enableHealthBillboards()
    for _, hum in ipairs(workspace:GetDescendants()) do
        if hum:IsA("Humanoid") and hum.Parent and hum.Parent:IsA("Model") then
            attachToModel(hum.Parent)
        end
    end

    connections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Humanoid") then
            local model = obj.Parent
            if model and model:IsA("Model") then
                task.defer(function()
                    attachToModel(model)
                end)
            end
        end
    end)

    connections.playerAdded = Players.PlayerAdded:Connect(function(plr)
        plr.CharacterAdded:Connect(function(char)
            task.defer(function()
                attachToModel(char)
            end)
        end)
    end)

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Character then attachToModel(plr.Character) end
        plr.CharacterAdded:Connect(function(char)
            task.defer(function()
                attachToModel(char)
            end)
        end)
    end
end

local function disableHealthBillboards()
    for humanoid, connList in pairs(connections) do
        if type(connList) == "table" then
            for _, conn in ipairs(connList) do
                conn:Disconnect()
            end
        elseif connList.Disconnect then
            connList:Disconnect()
        end
    end
    connections = {}

    for humanoid, billboard in pairs(tracked) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    tracked = {}

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("BillboardGui") and obj.Name == SETTINGS.Name then
            obj:Destroy()
        end
    end
end

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "Health Billboard",
        Icon = "heart",
        Value = false,
        Callback = function(state)
            healthBillboardEnabled = state
            if state then
                enableHealthBillboards()
            else
                disableHealthBillboards()
            end
            print("‚úÖ Health Billboard", state and "ON" or "OFF")
        end
    })
end)

-- ESP System Variables
local ActiveEspItems = false
local ActiveEspEnemy = false
local ActiveEspChildren = false
local ActiveEspPeltTrader = false
local ActiveDistanceEsp = false

local function CreateEsp(Char, Color, Text, Parent, number)
    if not Char or not Parent or not Parent:IsA("BasePart") then return end
    if Char:FindFirstChildOfClass("Highlight") or Parent:FindFirstChild("ESP") then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = Char
    highlight.FillColor = Color
    highlight.FillTransparency = 1
    highlight.OutlineColor = Color
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = Char

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP"
    billboard.Size = UDim2.new(0, 50, 0, 25)
    billboard.AlwaysOnTop = true
    billboard.StudsOffset = Vector3.new(0, number or 2, 0)
    billboard.Adornee = Parent
    billboard.Parent = Parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = Text
    label.TextColor3 = Color
    label.TextScaled = true
    label.Parent = billboard

    task.spawn(function()
        while highlight.Parent and billboard.Parent and Parent.Parent do
            local camera = workspace.CurrentCamera
            if ActiveDistanceEsp and camera and Parent:IsA("BasePart") then
                local distance = (camera.CFrame.Position - Parent.Position).Magnitude
                label.Text = Text .. " (" .. math.floor(distance + 0.5) .. " m)"
            else
                label.Text = Text
            end
            RunService.Heartbeat:Wait()
        end
        if highlight.Parent then highlight:Destroy() end
        if billboard.Parent then billboard:Destroy() end
    end)
end

local function RemoveEsp(Char, Parent)
    if Char and Char:FindFirstChildOfClass("Highlight") then
        Char:FindFirstChildOfClass("Highlight"):Destroy()
    end
    if Parent and Parent:FindFirstChild("ESP") then
        Parent:FindFirstChild("ESP"):Destroy()
    end
end

local function UpdateItemsEsp()
    if not workspace:FindFirstChild("Items") then return end
    if ActiveEspItems then
        for _, obj in pairs(workspace.Items:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart then
                CreateEsp(obj, Color3.fromRGB(255, 255, 0), obj.Name, obj.PrimaryPart, 2)
            end
        end
    else
        for _, obj in pairs(workspace.Items:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdateEnemiesEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspEnemy then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               not (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                    obj.Name == "Lost Child3" or obj.Name == "Lost Child4" or
                    obj.Name == "Pelt Trader") then
                CreateEsp(obj, Color3.fromRGB(255, 0, 0), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               not (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                    obj.Name == "Lost Child3" or obj.Name == "Lost Child4" or
                    obj.Name == "Pelt Trader") then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdateChildrenEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspChildren then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                obj.Name == "Lost Child3" or obj.Name == "Lost Child4") then
                CreateEsp(obj, Color3.fromRGB(0, 255, 0), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and
               (obj.Name == "Lost Child" or obj.Name == "Lost Child2" or
                obj.Name == "Lost Child3" or obj.Name == "Lost Child4") then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

local function UpdatePeltTraderEsp()
    if not workspace:FindFirstChild("Characters") then return end
    if ActiveEspPeltTrader then
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and obj.Name == "Pelt Trader" then
                CreateEsp(obj, Color3.fromRGB(0, 255, 255), obj.Name, obj.PrimaryPart, 3)
            end
        end
    else
        for _, obj in pairs(workspace.Characters:GetChildren()) do
            if obj:IsA("Model") and obj.PrimaryPart and obj.Name == "Pelt Trader" then
                RemoveEsp(obj, obj.PrimaryPart)
            end
        end
    end
end

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "ESP Items",
        Icon = "package",
        Value = false,
        Callback = function(state)
            ActiveEspItems = state
            UpdateItemsEsp()
            print("‚úÖ ESP Items", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "ESP Enemies",
        Icon = "skull",
        Value = false,
        Callback = function(state)
            ActiveEspEnemy = state
            UpdateEnemiesEsp()
            print("‚úÖ ESP Enemies", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "ESP Children",
        Icon = "baby",
        Value = false,
        Callback = function(state)
            ActiveEspChildren = state
            UpdateChildrenEsp()
            print("‚úÖ ESP Children", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "ESP Pelt Trader",
        Icon = "user",
        Value = false,
        Callback = function(state)
            ActiveEspPeltTrader = state
            UpdatePeltTraderEsp()
            print("‚úÖ ESP Pelt Trader", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "Show Distance in ESP",
        Icon = "ruler",
        Value = false,
        Callback = function(state)
            ActiveDistanceEsp = state
            if ActiveEspItems then UpdateItemsEsp() end
            if ActiveEspEnemy then UpdateEnemiesEsp() end
            if ActiveEspChildren then UpdateChildrenEsp() end
            if ActiveEspPeltTrader then UpdatePeltTraderEsp() end
            print("‚úÖ Show Distance in ESP", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Button({
        Title = "Clear All ESP",
        Desc = "Removes all active ESP elements",
        Callback = function()
            ActiveEspItems = false
            ActiveEspEnemy = false
            ActiveEspChildren = false
            ActiveEspPeltTrader = false
            UpdateItemsEsp()
            UpdateEnemiesEsp()
            UpdateChildrenEsp()
            UpdatePeltTraderEsp()
            print("‚úÖ All ESP cleared!")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Dropdown({
        Title = "ESP Color Theme",
        Values = {"Default", "Bright", "Dark", "Neon"},
        Value = "Default",
        Callback = function(value)
            print("üé® ESP Color Theme selected:", value)
        end
    })
end)

local function setupEspConnections()
    if workspace:FindFirstChild("Items") then
        workspace.Items.ChildAdded:Connect(function(child)
            if ActiveEspItems and child:IsA("Model") and child.PrimaryPart then
                CreateEsp(child, Color3.fromRGB(255, 255, 0), child.Name, child.PrimaryPart, 2)
            end
        end)
        workspace.Items.ChildRemoved:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                RemoveEsp(child, child.PrimaryPart)
            end
        end)
    end
    if workspace:FindFirstChild("Characters") then
        workspace.Characters.ChildAdded:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                if ActiveEspEnemy and
                   not (child.Name == "Lost Child" or child.Name == "Lost Child2" or
                        child.Name == "Lost Child3" or child.Name == "Lost Child4" or
                        child.Name == "Pelt Trader") then
                    CreateEsp(child, Color3.fromRGB(255, 0, 0), child.Name, child.PrimaryPart, 3)
                elseif ActiveEspChildren and
                   (child.Name == "Lost Child" or child.Name == "Lost Child2" or
                    child.Name == "Lost Child3" or child.Name == "Lost Child4") then
                    CreateEsp(child, Color3.fromRGB(0, 255, 0), child.Name, child.PrimaryPart, 3)
                elseif ActiveEspPeltTrader and child.Name == "Pelt Trader" then
                    CreateEsp(child, Color3.fromRGB(0, 255, 255), child.Name, child.PrimaryPart, 3)
                end
            end
        end)
        workspace.Characters.ChildRemoved:Connect(function(child)
            if child:IsA("Model") and child.PrimaryPart then
                RemoveEsp(child, child.PrimaryPart)
            end
        end)
    end
end

setupEspConnections()

-- PLAYER ESP Section
local playerESPEnabled = false
local trackedPlayers = {}
local espConnections = {}

local ESP_SETTINGS = {
    FillColor = Color3.fromRGB(255, 0, 0),
    FillTransparency = 0.8,
    OutlineColor = Color3.fromRGB(255, 255, 255),
    OutlineTransparency = 0,
    TextColor = Color3.fromRGB(255, 255, 255),
    TextSize = 14,
    MaxDistance = 1000,
    ShowDistance = true,
    ShowHealth = true,
    ShowNames = true,
    HealthBarEnabled = true,
    HealthBarHeight = 4
}

local function createPlayerESP(player)
    if player == LocalPlayer then return end
    if not player.Character then return end
    if trackedPlayers[player] then return end
    local character = player.Character
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "PlayerESP_Highlight"
    highlight.Adornee = character
    highlight.FillColor = ESP_SETTINGS.FillColor
    highlight.FillTransparency = ESP_SETTINGS.FillTransparency
    highlight.OutlineColor = ESP_SETTINGS.OutlineColor
    highlight.OutlineTransparency = ESP_SETTINGS.OutlineTransparency
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = character
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlayerESP_Billboard"
    billboard.Size = UDim2.new(0, 200, 0, 100)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = ESP_SETTINGS.MaxDistance
    billboard.Adornee = rootPart
    billboard.Parent = rootPart
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.DisplayName
    nameLabel.TextColor3 = ESP_SETTINGS.TextColor
    nameLabel.TextSize = ESP_SETTINGS.TextSize
    nameLabel.TextStrokeTransparency = 0.5
    nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.Parent = frame
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Name = "DistanceLabel"
    distanceLabel.Size = UDim2.new(1, 0, 0, 15)
    distanceLabel.Position = UDim2.new(0, 0, 0, 20)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.Text = "0m"
    distanceLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    distanceLabel.TextSize = ESP_SETTINGS.TextSize - 2
    distanceLabel.TextStrokeTransparency = 0.5
    distanceLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    distanceLabel.Font = Enum.Font.Gotham
    distanceLabel.Parent = frame
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Name = "HealthLabel"
    healthLabel.Size = UDim2.new(1, 0, 0, 15)
    healthLabel.Position = UDim2.new(0, 0, 0, 35)
    healthLabel.BackgroundTransparency = 1
    healthLabel.Text = "100/100"
    healthLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    healthLabel.TextSize = ESP_SETTINGS.TextSize - 2
    healthLabel.TextStrokeTransparency = 0.5
    healthLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    healthLabel.Font = Enum.Font.Gotham
    healthLabel.Parent = frame
    local healthBarBG = Instance.new("Frame")
    healthBarBG.Name = "HealthBarBG"
    healthBarBG.Size = UDim2.new(1, 0, 0, ESP_SETTINGS.HealthBarHeight)
    healthBarBG.Position = UDim2.new(0, 0, 0, 50)
    healthBarBG.BackgroundColor3 = Color3.new(0, 0, 0)
    healthBarBG.BorderSizePixel = 1
    healthBarBG.BorderColor3 = Color3.new(1, 1, 1)
    healthBarBG.Parent = frame
    local healthBarFill = Instance.new("Frame")
    healthBarFill.Name = "HealthBarFill"
    healthBarFill.Size = UDim2.new(1, 0, 1, 0)
    healthBarFill.Position = UDim2.new(0, 0, 0, 0)
    healthBarFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthBarFill.BorderSizePixel = 0
    healthBarFill.Parent = healthBarBG
    local function updateESP()
        if not playerESPEnabled then return end
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        local playerRoot = player.Character.HumanoidRootPart
        local localRoot = LocalPlayer.Character.HumanoidRootPart
        local playerHumanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if not playerRoot or not localRoot or not playerHumanoid then return end
        if ESP_SETTINGS.ShowDistance then
            local distance = (localRoot.Position - playerRoot.Position).Magnitude
            distanceLabel.Text = math.floor(distance) .. "m"
            distanceLabel.Visible = true
        else
            distanceLabel.Visible = false
        end
        if ESP_SETTINGS.ShowHealth then
            local health = math.floor(playerHumanoid.Health)
            local maxHealth = math.floor(playerHumanoid.MaxHealth)
            local healthPercent = health / maxHealth
            healthLabel.Text = health .. "/" .. maxHealth
            healthLabel.Visible = true
            if ESP_SETTINGS.HealthBarEnabled then
                healthBarBG.Visible = true
                healthBarFill.Size = UDim2.new(healthPercent, 0, 1, 0)
                if healthPercent > 0.6 then
                    healthBarFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                    healthLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                elseif healthPercent > 0.3 then
                    healthBarFill.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
                    healthLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                else
                    healthBarFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                    healthLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                end
            else
                healthBarBG.Visible = false
            end
        else
            healthLabel.Visible = false
            healthBarBG.Visible = false
        end
        if ESP_SETTINGS.ShowNames then
            nameLabel.Text = player.DisplayName
            nameLabel.Visible = true
        else
            nameLabel.Visible = false
        end
    end
    trackedPlayers[player] = {
        highlight = highlight,
        billboard = billboard,
        updateFunction = updateESP
    }
    local connection = RunService.Heartbeat:Connect(updateESP)
    espConnections[player] = connection
    local function onPlayerRemoving()
        if trackedPlayers[player] then
            if trackedPlayers[player].highlight then
                trackedPlayers[player].highlight:Destroy()
            end
            if trackedPlayers[player].billboard then
                trackedPlayers[player].billboard:Destroy()
            end
            trackedPlayers[player] = nil
        end
        if espConnections[player] then
            espConnections[player]:Disconnect()
            espConnections[player] = nil
        end
    end
    local removeConnection = Players.PlayerRemoving:Connect(function(removedPlayer)
        if removedPlayer == player then
            onPlayerRemoving()
        end
    end)
    if not espConnections[player] then
        espConnections[player] = {}
    end
    if type(espConnections[player]) == "table" then
        espConnections[player].removeConnection = removeConnection
    end
    updateESP()
end

local function removePlayerESP(player)
    if trackedPlayers[player] then
        if trackedPlayers[player].highlight then
            trackedPlayers[player].highlight:Destroy()
        end
        if trackedPlayers[player].billboard then
            trackedPlayers[player].billboard:Destroy()
        end
        trackedPlayers[player] = nil
    end
    if espConnections[player] then
        if type(espConnections[player]) == "userdata" then
            espConnections[player]:Disconnect()
        elseif type(espConnections[player]) == "table" then
            if espConnections[player].removeConnection then
                espConnections[player].removeConnection:Disconnect()
            end
        end
        espConnections[player] = nil
    end
end

local function enablePlayerESP()
    playerESPEnabled = true
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            createPlayerESP(player)
        end
    end
    espConnections.playerAdded = Players.PlayerAdded:Connect(function(player)
        if playerESPEnabled then
            player.CharacterAdded:Connect(function(character)
                if playerESPEnabled then
                    wait(1)
                    createPlayerESP(player)
                end
            end)
        end
    end)
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            player.CharacterAdded:Connect(function(character)
                if playerESPEnabled then
                    wait(1)
                    createPlayerESP(player)
                end
            end)
        end
    end
    print("‚úÖ Player ESP Enabled")
end

local function disablePlayerESP()
    playerESPEnabled = false
    for player, _ in pairs(trackedPlayers) do
        removePlayerESP(player)
    end
    if espConnections.playerAdded then
        espConnections.playerAdded:Disconnect()
        espConnections.playerAdded = nil
    end
    for player, connection in pairs(espConnections) do
        if type(connection) == "userdata" then
            connection:Disconnect()
        elseif type(connection) == "table" then
            if connection.removeConnection then
                connection.removeConnection:Disconnect()
            end
        end
    end
    espConnections = {}
    print("‚ùå Player ESP Disabled")
end

pcall(function()
    Tabs.EspTab:Paragraph({
        Title = "Player ESP System",
        Desc = "Advanced ESP system for tracking other players",
        Image = "users",
        Color = "Blue",
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "Player ESP",
        Icon = "users",
        Value = false,
        Callback = function(state)
            if state then
                enablePlayerESP()
            else
                disablePlayerESP()
            end
            print("‚úÖ Player ESP", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "Show Player Names",
        Icon = "user-check",
        Value = true,
        Callback = function(state)
            ESP_SETTINGS.ShowNames = state
            print("‚úÖ Show Player Names", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "Show Player Distance",
        Icon = "ruler",
        Value = true,
        Callback = function(state)
            ESP_SETTINGS.ShowDistance = state
            print("‚úÖ Show Player Distance", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "Show Player Health",
        Icon = "heart-pulse",
        Value = true,
        Callback = function(state)
            ESP_SETTINGS.ShowHealth = state
            print("‚úÖ Show Player Health", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Toggle({
        Title = "Show Health Bar",
        Icon = "activity",
        Value = true,
        Callback = function(state)
            ESP_SETTINGS.HealthBarEnabled = state
            print("‚úÖ Show Health Bar", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.EspTab:Slider({
        Title = "ESP Max Distance",
        Value = { Min = 100, Max = 2000, Default = 1000 },
        Callback = function(value)
            ESP_SETTINGS.MaxDistance = value
            print("üìè ESP Max Distance set to:", value)
        end
    })
end)

pcall(function()
    Tabs.EspTab:Slider({
        Title = "ESP Text Size",
        Value = { Min = 8, Max = 24, Default = 14 },
        Callback = function(value)
            ESP_SETTINGS.TextSize = value
            print("üìè ESP Text Size set to:", value)
        end
    })
end)

-- Teleport to Campfire Button
pcall(function()
    Tabs.TpTab:Button({
        Title = "Teleport to Campfire",
        Desc = "Quick teleport to campfire location",
        Callback = function()
            local targetPosition = Vector3.new(0.2976149320602417, 6.346785545349121, -0.043002475053071976)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                print("‚úÖ Teleported to campfire successfully!")
            else
                print("‚ùå Teleport failed - Character not found!")
            end
        end
    })
end)

-- Lost Child Teleport System
local CharactersFolder = workspace:FindFirstChild("Characters")

if CharactersFolder then
    local lostChildPaths = {
        "Lost Child",
        "Lost Child2",
        "Lost Child3",
        "Lost Child4"
    }
    local availableChildren = {}
    local selectedChild = nil
    local childDropdown = nil

    local function refreshLostChildren()
        local previousChildren = {}
        for _, child in pairs(availableChildren) do
            previousChildren[child] = true
        end
        availableChildren = {}
        for _, childName in pairs(lostChildPaths) do
            local childModel = CharactersFolder:FindFirstChild(childName)
            if childModel and childModel:IsA("Model") then
                table.insert(availableChildren, childName)
            end
        end
        print("üë∂ Found", #availableChildren, "Lost Children available for teleport")
        if selectedChild and not CharactersFolder:FindFirstChild(selectedChild) then
            selectedChild = nil
            print("‚ö†Ô∏è Previously selected Lost Child no longer exists")
        end
        local hasChanges = (#availableChildren ~= #previousChildren)
        if not hasChanges then
            for _, child in pairs(availableChildren) do
                if not previousChildren[child] then
                    hasChanges = true
                    break
                end
            end
        end
        if childDropdown and hasChanges then
            pcall(function()
                childDropdown:SetValues(availableChildren)
            end)
            if #availableChildren > 0 and not selectedChild then
                selectedChild = availableChildren[1]
                pcall(function()
                    childDropdown:SetValue(selectedChild)
                end)
            end
        end
    end

    local function getLostChildTeleportPosition(childName)
        local childModel = CharactersFolder:FindFirstChild(childName)
        if not childModel then
            return nil
        end
        local rootPart = childModel:FindFirstChild("HumanoidRootPart")
        if rootPart then
            return rootPart.Position
        end
        local anyPart = childModel:FindFirstChildWhichIsA("BasePart")
        if anyPart then
            return anyPart.Position
        end
        if childModel.PrimaryPart then
            return childModel.PrimaryPart.Position
        end
        return nil
    end

    local function teleportToLostChild(childName)
        local player = LocalPlayer
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            print("‚ùå Player character not found!")
            return false
        end
        local targetPosition = getLostChildTeleportPosition(childName)
        if not targetPosition then
            print("‚ùå Could not find valid teleport position for", childName)
            return false
        end
        local teleportPosition = targetPosition + Vector3.new(0, 5, 0)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
        print("‚úÖ Teleported to", childName)
        return true
    end

    refreshLostChildren()

    pcall(function()
        childDropdown = Tabs.TpTab:Dropdown({
            Title = "Select Lost Child",
            Values = availableChildren,
            Value = availableChildren[1] or "None",
            Callback = function(selected)
                selectedChild = selected
                print("üë∂ Selected Lost Child:", selected)
            end
        })
    end)

    pcall(function()
        Tabs.TpTab:Button({
            Title = "Teleport to Selected Lost Child",
            Desc = "Teleport to the currently selected Lost Child",
            Callback = function()
                if not selectedChild then
                    print("‚ùå No Lost Child selected!")
                    return
                end
                teleportToLostChild(selectedChild)
            end
        })
    end)

    for _, childName in pairs(lostChildPaths) do
        pcall(function()
            Tabs.TpTab:Button({
                Title = "TP to " .. childName,
                Desc = "Direct teleport to " .. childName,
                Callback = function()
                    if not CharactersFolder:FindFirstChild(childName) then
                        print("‚ùå", childName, "not found!")
                        return
                    end
                    teleportToLostChild(childName)
                end
            })
        end)
    end

    pcall(function()
        Tabs.TpTab:Button({
            Title = "TP to Random Lost Child",
            Desc = "Teleport to a random available Lost Child",
            Callback = function()
                if #availableChildren == 0 then
                    print("‚ùå No Lost Children available!")
                    return
                end
                local randomChild = availableChildren[math.random(1, #availableChildren)]
                teleportToLostChild(randomChild)
            end
        })
    end)

    pcall(function()
        Tabs.TpTab:Button({
            Title = "TP to All Lost Children",
            Desc = "Teleport to each Lost Child with 2 second delays",
            Callback = function()
                if #availableChildren == 0 then
                    print("‚ùå No Lost Children available!")
                    return
                end
                print("üîÑ Starting sequential teleport to all Lost Children...")
                task.spawn(function()
                    for i, childName in pairs(availableChildren) do
                        print("üìç Teleporting to", childName, "(" .. i .. "/" .. #availableChildren .. ")")
                        teleportToLostChild(childName)
                        if i < #availableChildren then
                            task.wait(2)
                        end
                    end
                    print("‚úÖ Completed teleporting to all Lost Children!")
                end)
            end
        })
    end)

    pcall(function()
        Tabs.TpTab:Button({
            Title = "Show Available Lost Children",
            Desc = "Display all currently available Lost Children",
            Callback = function()
                print("üë∂ Available Lost Children:")
                if #availableChildren > 0 then
                    for i, childName in pairs(availableChildren) do
                        local childModel = CharactersFolder:FindFirstChild(childName)
                        local position = getLostChildTeleportPosition(childName)
                        print(i .. ". " .. childName .. " - Position:", position and tostring(position) or "Unknown")
                    end
                    print("üéØ Currently selected:", selectedChild or "None")
                else
                    print("‚ùå No Lost Children found!")
                end
            end
        })
    end)

    pcall(function()
        Tabs.TpTab:Button({
            Title = "Refresh Lost Children",
            Desc = "Manually refresh the Lost Children list",
            Callback = function()
                print("üîÑ Manually refreshing Lost Children...")
                refreshLostChildren()
                print("üîÑ Lost Children list refreshed!")
            end
        })
    end)

    local safeLostChildTP = false
    pcall(function()
        Tabs.TpTab:Toggle({
            Title = "Safe Lost Child TP",
            Icon = "baby",
            Value = false,
            Callback = function(state)
                safeLostChildTP = state
                print("üë∂ Safe Lost Child Teleport:", state and "ON" or "OFF")
                if state then
                    print("üìù Safe mode adds extra height to Lost Child teleports")
                end
            end
        })
    end)

    local function safeTeleportToLostChild(childName)
        local player = LocalPlayer
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            print("‚ùå Player character not found!")
            return false
        end
        local targetPosition = getLostChildTeleportPosition(childName)
        if not targetPosition then
            print("‚ùå Could not find valid teleport position for", childName)
            return false
        end
        local heightOffset = safeLostChildTP and 15 or 5
        local teleportPosition = targetPosition + Vector3.new(0, heightOffset, 0)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition)
        local safetyText = safeLostChildTP and " (Safe Mode)" or ""
        print("‚úÖ Teleported to", childName .. safetyText)
        return true
    end

    teleportToLostChild = safeTeleportToLostChild

    task.spawn(function()
        while true do
            task.wait(1)
            refreshLostChildren()
        end
    end)
else
    pcall(function()
        Tabs.TpTab:Button({
            Title = "‚ö†Ô∏è Characters Folder Missing",
            Desc = "workspace.Characters folder not found",
            Callback = function()
                print("‚ùå Cannot find workspace.Characters folder!")
                print("üìÅ Please ensure the Characters folder exists in workspace")
            end
        })
    end)
end

-- Item Teleport System
local ItemsFolder = workspace:FindFirstChild("Items")

if ItemsFolder then
    local uniqueModelNames = {}
    local modelMap = {}
    local selectedModelName = nil
    local itemDropdown = nil

    local function refreshModelList()
        local previousCount = #uniqueModelNames
        local previousNames = {}
        for _, name in pairs(uniqueModelNames) do
            previousNames[name] = true
        end
        uniqueModelNames = {}
        modelMap = {}
        for _, item in pairs(ItemsFolder:GetDescendants()) do
            if item:IsA("Model") then
                local name = item.Name
                if not modelMap[name] then
                    modelMap[name] = {}
                    table.insert(uniqueModelNames, name)
                end
                table.insert(modelMap[name], item)
            end
        end
        print("üì¶ Found", #uniqueModelNames, "unique item types")
        if selectedModelName and not modelMap[selectedModelName] then
            selectedModelName = nil
            print("‚ö†Ô∏è Previously selected item no longer exists")
        end
        local hasChanges = (#uniqueModelNames ~= previousCount)
        if not hasChanges then
            for _, name in pairs(uniqueModelNames) do
                if not previousNames[name] then
                    hasChanges = true
                    break
                end
            end
        end
        if itemDropdown and hasChanges then
            pcall(function()
                itemDropdown:SetValues(uniqueModelNames)
            end)
            if #uniqueModelNames > 0 and not selectedModelName then
                selectedModelName = uniqueModelNames[1]
                pcall(function()
                    itemDropdown:SetValue(selectedModelName)
                end)
            end
        end
    end

    refreshModelList()

    pcall(function()
        itemDropdown = Tabs.TpTab:Dropdown({
            Title = "Select Item to Teleport",
            Values = uniqueModelNames,
            Value = uniqueModelNames[1] or "None",
            Callback = function(selected)
                selectedModelName = selected
                print("üéØ Selected item:", selected)
            end
        })
    end)

    task.spawn(function()
        while true do
            task.wait(1)
            refreshModelList()
        end
    end)

    local function getClosestModel(modelList)
        local char = LocalPlayer.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp or not modelList then return nil end
        local closest, minDist = nil, math.huge
        for _, model in pairs(modelList) do
            local primary = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
            if primary then
                local dist = (hrp.Position - primary.Position).Magnitude
                if dist < minDist then
                    minDist = dist
                    closest = primary
                end
            end
        end
        return closest
    end

    pcall(function()
        Tabs.TpTab:Button({
            Title = "Teleport to Selected Item",
            Desc = "Teleport to the closest instance of selected item",
            Callback = function()
                if not selectedModelName or not modelMap[selectedModelName] then
                    print("‚ùå No item selected or item not found!")
                    return
                end
                local closestPart = getClosestModel(modelMap[selectedModelName])
                local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if closestPart and hrp then
                    hrp.CFrame = closestPart.CFrame + Vector3.new(0, 5, 0)
                    print("‚úÖ Teleported to nearest:", selectedModelName)
                else
                    print("‚ùå Could not find valid item to teleport to!")
                end
            end
        })
    end)

    pcall(function()
        Tabs.TpTab:Button({
            Title = "Manual Refresh Items",
            Desc = "Force refresh the item list immediately",
            Callback = function()
                print("üîÑ Manually refreshing item list...")
                refreshModelList()
                print("üîÑ Item list manually refreshed! Found", #uniqueModelNames, "item types")
                if selectedModelName then
                    print("üéØ Currently selected:", selectedModelName)
                else
                    print("‚ö†Ô∏è No item selected")
                end
            end
        })
    end)
else
    pcall(function()
        Tabs.TpTab:Button({
            Title = "‚ö†Ô∏è Items Folder Missing",
            Desc = "workspace.Items folder not found",
            Callback = function()
                print("‚ùå Cannot find workspace.Items folder!")
                print("üìÅ Please ensure the Items folder exists in workspace")
            end
        })
    end)
end

pcall(function()
    Tabs.TpTab:Button({
        Title = "Teleport to Spawn",
        Desc = "Quick teleport back to spawn area",
        Callback = function()
            local spawnPosition = Vector3.new(0, 10, 0)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(spawnPosition)
                print("‚úÖ Teleported to spawn!")
            else
                print("‚ùå Teleport failed - Character not found!")
            end
        end
    })
end)

pcall(function()
    Tabs.TpTab:Button({
        Title = "Teleport to Random Item",
        Desc = "Teleport to a random item in the workspace",
        Callback = function()
            if ItemsFolder then
                local allItems = {}
                for _, item in pairs(ItemsFolder:GetChildren()) do
                    if item:IsA("Model") and (item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")) then
                        table.insert(allItems, item)
                    end
                end
                if #allItems > 0 then
                    local randomItem = allItems[math.random(1, #allItems)]
                    local targetPart = randomItem.PrimaryPart or randomItem:FindFirstChildWhichIsA("BasePart")
                    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if targetPart and hrp then
                        hrp.CFrame = targetPart.CFrame + Vector3.new(0, 5, 0)
                        print("‚úÖ Teleported to random item:", randomItem.Name)
                    else
                        print("‚ùå Failed to teleport to random item!")
                    end
                else
                    print("‚ùå No items found to teleport to!")
                end
            else
                print("‚ùå Items folder not found!")
            end
        end
    })
end)

local safeTeleportMode = false
pcall(function()
    Tabs.TpTab:Toggle({
        Title = "Safe Teleport Mode",
        Icon = "shield",
        Value = false,
        Callback = function(state)
            safeTeleportMode = state
            print("‚úÖ Safe Teleport Mode", state and "ON" or "OFF")
            if state then
                print("üìù Safe mode adds 10 studs height to teleports")
            end
        end
    })
end)

local function safeTeleport(targetCFrame, locationName)
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        print("‚ùå Teleport failed - Character not found!")
        return false
    end
    local finalCFrame = targetCFrame
    if safeTeleportMode then
        finalCFrame = targetCFrame + Vector3.new(0, 10, 0)
    end
    hrp.CFrame = finalCFrame
    print("‚úÖ Safely teleported to:", locationName or "Unknown location")
    return true
end

-- Sky Platform Script
local isOnPlatform = false
local skyPlatform = nil
local platformConnection = nil

local function createSkyPlatform(playerPosition)
    if skyPlatform then
        skyPlatform:Destroy()
    end
    skyPlatform = Instance.new("Part")
    skyPlatform.Name = "SkyPlatform"
    skyPlatform.Size = Vector3.new(50, 1, 50)
    skyPlatform.Position = Vector3.new(playerPosition.X, 200, playerPosition.Z)
    skyPlatform.Anchored = true
    skyPlatform.Transparency = 0.5
    skyPlatform.CanCollide = true
    skyPlatform.TopSurface = Enum.SurfaceType.Smooth
    skyPlatform.BottomSurface = Enum.SurfaceType.Smooth
    skyPlatform.Parent = workspace
    platformConnection = RunService.Heartbeat:Connect(function()
        if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and isOnPlatform then
            local humanoidRootPart = Player.Character.HumanoidRootPart
            local playerPos = humanoidRootPart.Position
            if playerPos.Y > 150 then
                local distance = (Vector2.new(playerPos.X, playerPos.Z) - Vector2.new(skyPlatform.Position.X, skyPlatform.Position.Z)).Magnitude
                if distance > 20 then
                    skyPlatform.Position = Vector3.new(playerPos.X, 200, playerPos.Z)
                end
                local minSize = 100
                if skyPlatform.Size.X < minSize then
                    skyPlatform.Size = Vector3.new(minSize, 1, minSize)
                end
            end
        end
    end)
end

local function teleportToSky()
    local character = Player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        print("‚òÅÔ∏è Error: Character not found")
        return
    end
    local humanoidRootPart = character.HumanoidRootPart
    createSkyPlatform(humanoidRootPart.Position)
    humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position.X, 205, humanoidRootPart.Position.Z)
  isOnPlatform = true
    safeTeleport(CFrame.new(humanoidRootPart.Position.X, 205, humanoidRootPart.Position.Z), "Sky Platform")
    print("‚òÅÔ∏è Teleported to Sky Platform")
end

local function toggleSkyPlatform(state)
    isOnPlatform = state
    if state then
        local character = Player.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            print("‚òÅÔ∏è Error: Character not found")
            return
        end
        teleportToSky()
    else
        if skyPlatform then
            skyPlatform:Destroy()
            skyPlatform = nil
        end
        if platformConnection then
            platformConnection:Disconnect()
            platformConnection = nil
        end
        print("‚òÅÔ∏è Sky Platform removed")
    end
    print("‚òÅÔ∏è Sky Platform:", state and "ON" or "OFF")
end

pcall(function()
    Tabs.TpTab:Toggle({
        Title = "Sky Platform",
        Icon = "cloud",
        Value = false,
        Callback = function(state)
            toggleSkyPlatform(state)
        end
    })
end)

--================= OP TAB CONTENT =================

if not workspace:FindFirstChild("Map") or not workspace.Map:FindFirstChild("Foliage") then
    pcall(function()
        Tabs.OpTab:Button({
            Title = "‚ö†Ô∏è Map/Foliage Missing",
            Desc = "Map or Foliage folder not found in workspace",
            Callback = function()
                print("‚ùå Cannot find workspace.Map.Foliage folder!")
                print("üìÅ Please ensure the Map and Foliage folders exist in workspace")
            end
        })
    end)
else
    local autoFarmEnabled = false
    local godModeEnabled = false
    local infiniteResourcesEnabled = false

    local function collectFoliage()
        if not autoFarmEnabled then return end
        for _, foliage in pairs(workspace.Map.Foliage:GetChildren()) do
            if foliage:IsA("Model") and foliage.PrimaryPart then
                local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    safeTeleport(foliage.PrimaryPart.CFrame + Vector3.new(0, 5, 0), "Foliage")
                    for _, prompt in pairs(foliage:GetDescendants()) do
                        if prompt:IsA("ProximityPrompt") then
                            fireproximityprompt(prompt)
                        end
                    end
                    task.wait(0.5)
                end
            end
        end
    end

    pcall(function()
        Tabs.OpTab:Paragraph({
            Title = "Over Powered Features",
            Desc = "Game-breaking features for ultimate control",
            Image = "zap",
            Color = "Blue",
        })
    end)

    pcall(function()
        Tabs.OpTab:Toggle({
            Title = "Auto Farm Foliage",
            Icon = "leaf",
            Value = false,
            Callback = function(state)
                autoFarmEnabled = state
                if state then
                    task.spawn(function()
                        while autoFarmEnabled do
                            collectFoliage()
                            task.wait(1)
                        end
                    end)
                end
                print("üåø Auto Farm Foliage:", state and "ON" or "OFF")
            end
        })
    end)

    pcall(function()
        Tabs.OpTab:Toggle({
            Title = "God Mode",
            Icon = "shield",
            Value = false,
            Callback = function(state)
                godModeEnabled = state
                task.spawn(function()
                    while godModeEnabled do
                        local humanoid = getHumanoid()
                        if humanoid then
                            humanoid.MaxHealth = math.huge
                            humanoid.Health = math.huge
                        end
                        task.wait(0.1)
                    end
                end)
                print("üõ°Ô∏è God Mode:", state and "ON" or "OFF")
            end
        })
    end)

    pcall(function()
        Tabs.OpTab:Toggle({
            Title = "Infinite Resources",
            Icon = "box",
            Value = false,
            Callback = function(state)
                infiniteResourcesEnabled = state
                task.spawn(function()
                    while infiniteResourcesEnabled do
                        if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                            local backpack = Player:FindFirstChild("Backpack")
                            if backpack then
                                for _, tool in pairs(backpack:GetChildren()) do
                                    if tool:IsA("Tool") and tool:FindFirstChild("Amount") then
                                        tool.Amount.Value = math.huge
                                    end
                                end
                            end
                        end
                        task.wait(0.5)
                    end
                end)
                print("üì¶ Infinite Resources:", state and "ON" or "OFF")
            end
        })
    end)

    pcall(function()
        Tabs.OpTab:Button({
            Title = "Instant Clear Foliage",
            Desc = "Instantly collect all foliage in the map",
            Callback = function()
                if not workspace.Map:FindFirstChild("Foliage") then
                    print("‚ùå No foliage found!")
                    return
                end
                for _, foliage in pairs(workspace.Map.Foliage:GetChildren()) do
                    if foliage:IsA("Model") and foliage.PrimaryPart then
                        for _, prompt in pairs(foliage:GetDescendants()) do
                            if prompt:IsA("ProximityPrompt") then
                                fireproximityprompt(prompt)
                            end
                        end
                    end
                end
                print("‚úÖ All foliage collected!")
            end
        })
    end)
end

--================= JK TAB CONTENT =================

local freezeEnabled = false
local ragdollEnabled = false

pcall(function()
    Tabs.JkTab:Paragraph({
        Title = "Fun Features",
        Desc = "Playful tweaks and effects for fun",
        Image = "smile",
        Color = "Blue",
    })
end)

pcall(function()
    Tabs.JkTab:Toggle({
        Title = "Freeze Player",
        Icon = "snowflake",
        Value = false,
        Callback = function(state)
            freezeEnabled = state
            task.spawn(function()
                while freezeEnabled do
                    local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.Anchored = true
                    end
                    task.wait(0.1)
                end
                local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    hrp.Anchored = false
                end
            end)
            print("‚ùÑÔ∏è Freeze Player:", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.JkTab:Toggle({
        Title = "Ragdoll Mode",
        Icon = "fall",
        Value = false,
        Callback = function(state)
            ragdollEnabled = state
            task.spawn(function()
                while ragdollEnabled do
                    local humanoid = getHumanoid()
                    if humanoid then
                        humanoid.PlatformStand = true
                    end
                    task.wait(0.1)
                end
                local humanoid = getHumanoid()
                if humanoid then
                    humanoid.PlatformStand = false
                end
            end)
            print("ü§∏ Ragdoll Mode:", state and "ON" or "OFF")
        end
    })
end)

pcall(function()
    Tabs.JkTab:Button({
        Title = "Random Dance Animation",
        Desc = "Play a random dance animation",
        Callback = function()
            local humanoid = getHumanoid()
            if humanoid then
                local animations = {
                    "rbxassetid://507771019", -- Dance 1
                    "rbxassetid://507771955", -- Dance 2
                    "rbxassetid://507772104"  -- Dance 3
                }
                local anim = Instance.new("Animation")
                anim.AnimationId = animations[math.random(1, #animations)]
                local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
                local track = animator:LoadAnimation(anim)
                track:Play()
                print("üíÉ Playing random dance animation!")
            else
                print("‚ùå No humanoid found for dance animation!")
            end
        end
    })
end)

pcall(function()
    Tabs.JkTab:Slider({
        Title = "Character Size",
        Value = { Min = 0.5, Max = 5, Default = 1 },
        Callback = function(value)
            local humanoid = getHumanoid()
            if humanoid then
                humanoid.BodyDepthScale.Value = value
                humanoid.BodyHeightScale.Value = value
                humanoid.BodyWidthScale.Value = value
                humanoid.HeadScale.Value = value
                print("üìè Character size set to:", value)
            else
                print("‚ùå No humanoid found to scale!")
            end
        end
    })
end)

print("üéâ Fryzer Hub fully loaded!")
