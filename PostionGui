-- ===================================
-- PET SIMULATOR X AUTO FARM SCRIPT
-- ===================================
-- Specialized script for Pet Simulator X coin farming
-- Uses the "Join Coin" RemoteEvent with equipped pets

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- ========================
-- CONFIGURATION SETTINGS
-- ========================
local CONFIG = {
    FARM_ENABLED = false,
    FARM_DELAY = 0.3,                    -- Delay between farm requests
    COIN_CONTAINER_PATH = "__THINGS.Coins", -- Path to coins in workspace
    PETS_CONTAINER_PATH = "__THINGS.__INSTANCE_CONTAINER.ActivePets", -- Path to active pets
    NETWORK_REMOTE_PATH = "Network.Invoke", -- Path to Network RemoteFunction
    MAX_RETRIES = 3,                     -- Max retries for failed requests
    GUI_DRAGGABLE = true,
    DEBUG_MODE = false,                  -- Enable debug prints
}

-- ========================
-- GLOBAL VARIABLES
-- ========================
local farmConnection
local isCurrentlyFarming = false
local gui = {}
local farmStats = {
    coinsFound = 0,
    coinsFarmed = 0,
    petsFound = 0,
    currentCoin = nil,
    errors = 0,
    startTime = 0
}

-- ========================
-- UTILITY FUNCTIONS
-- ========================

-- Safe wait function that respects farm status
local function safeWait(duration)
    local startTime = tick()
    while tick() - startTime < duration and CONFIG.FARM_ENABLED do
        RunService.Heartbeat:Wait()
    end
end

-- Debug print function
local function debugPrint(message)
    if CONFIG.DEBUG_MODE then
        print("[PSX Farm Debug]: " .. tostring(message))
    end
end

-- Get Network RemoteFunction safely
local function getNetworkRemote()
    local success, remote = pcall(function()
        return ReplicatedStorage:FindFirstChild("Network"):FindFirstChild("Invoke")
    end)
    
    if success and remote and remote:IsA("RemoteFunction") then
        return remote
    end
    
    debugPrint("Failed to find Network RemoteFunction")
    return nil
end

-- ========================
-- COIN DETECTION FUNCTIONS
-- ========================

-- Find all coins in the workspace
local function findAllCoins()
    local coins = {}
    
    local success, coinContainer = pcall(function()
        local thingsFolder = Workspace:FindFirstChild("__THINGS")
        if not thingsFolder then return nil end
        
        return thingsFolder:FindFirstChild("Coins")
    end)
    
    if not success or not coinContainer then
        debugPrint("Failed to find coin container")
        return coins
    end
    
    -- Search for all coin models
    for _, child in pairs(coinContainer:GetChildren()) do
        if child:IsA("Model") and isValidCoin(child) then
            table.insert(coins, child)
        end
    end
    
    debugPrint("Found " .. #coins .. " valid coins")
    return coins
end

-- Check if a coin is valid for farming
local function isValidCoin(coinModel)
    if not coinModel or not coinModel.Parent then
        return false
    end
    
    -- Check if it's a Model
    if not coinModel:IsA("Model") then
        return false
    end
    
    -- Check if it has a "Coin" part inside (PSX coin structure)
    local coinPart = coinModel:FindFirstChild("Coin")
    if not coinPart or not coinPart:IsA("BasePart") then
        return false
    end
    
    -- Check if coin is not collected (transparency check)
    if coinPart.Transparency >= 0.9 then
        return false
    end
    
    -- Check for collection attributes
    if coinModel:GetAttribute("Collected") or 
       coinModel:GetAttribute("Disabled") or
       coinPart:GetAttribute("Collected") then
        return false
    end
    
    -- Check if coin is anchored (unanchored coins might be collected)
    if not coinPart.Anchored then
        return false
    end
    
    return true
end

-- Get coin name for the RemoteEvent
local function getCoinName(coinModel)
    if not coinModel then return nil end
    
    -- Use the model's name
    return coinModel.Name
end

-- ========================
-- PET DETECTION FUNCTIONS
-- ========================

-- Find all equipped pets
local function findEquippedPets()
    local pets = {}
    
    local success, petsContainer = pcall(function()
        local thingsFolder = Workspace:FindFirstChild("__THINGS")
        if not thingsFolder then return nil end
        
        local instanceContainer = thingsFolder:FindFirstChild("__INSTANCE_CONTAINER")
        if not instanceContainer then return nil end
        
        return instanceContainer:FindFirstChild("ActivePets")
    end)
    
    if not success or not petsContainer then
        debugPrint("Failed to find pets container")
        return pets
    end
    
    -- Find all pet models
    for _, child in pairs(petsContainer:GetChildren()) do
        if child:IsA("Model") and isValidPet(child) then
            local petName = getPetName(child)
            if petName then
                table.insert(pets, petName)
            end
        end
    end
    
    debugPrint("Found " .. #pets .. " equipped pets")
    return pets
end

-- Check if a pet is valid
local function isValidPet(petModel)
    if not petModel or not petModel.Parent then
        return false
    end
    
    -- Check if it's a Model
    if not petModel:IsA("Model") then
        return false
    end
    
    -- Check if it has a HumanoidRootPart (typical pet structure)
    local rootPart = petModel:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        return false
    end
    
    return true
end

-- Get pet name for RemoteEvent
local function getPetName(petModel)
    if not petModel then return nil end
    
    -- Use the model's name
    return petModel.Name
end

-- ========================
-- FARMING FUNCTIONS
-- ========================

-- Send pets to farm a specific coin
local function farmCoin(coinName, petNames)
    if not coinName or not petNames or #petNames == 0 then
        return false
    end
    
    local networkRemote = getNetworkRemote()
    if not networkRemote then
        farmStats.errors = farmStats.errors + 1
        return false
    end
    
    local success = false
    local attempts = 0
    
    -- Try multiple times with different pet configurations
    while attempts < CONFIG.MAX_RETRIES and not success do
        attempts = attempts + 1
        
        pcall(function()
            -- Call the "Join Coin" RemoteEvent
            local result = networkRemote:InvokeServer("Join Coin", coinName, petNames)
            
            -- Check if the result indicates success
            if result ~= nil then
                success = true
                debugPrint("Successfully farmed coin: " .. coinName)
            end
        end)
        
        if not success and attempts < CONFIG.MAX_RETRIES then
            wait(0.1) -- Small delay between retries
        end
    end
    
    if not success then
        farmStats.errors = farmStats.errors + 1
        debugPrint("Failed to farm coin: " .. coinName)
    end
    
    return success
end

-- Main farming cycle
local function executeFarmCycle()
    if not CONFIG.FARM_ENABLED or isCurrentlyFarming then
        return
    end
    
    isCurrentlyFarming = true
    
    -- Find all coins and pets
    local coins = findAllCoins()
    local pets = findEquippedPets()
    
    farmStats.coinsFound = #coins
    farmStats.petsFound = #pets
    
    if #coins == 0 then
        debugPrint("No coins found to farm")
        isCurrentlyFarming = false
        return
    end
    
    if #pets == 0 then
        debugPrint("No pets found to use for farming")
        isCurrentlyFarming = false
        return
    end
    
    -- Farm each coin
    for _, coin in pairs(coins) do
        if not CONFIG.FARM_ENABLED then break end
        
        -- Double-check coin is still valid
        if not isValidCoin(coin) then
            continue
        end
        
        local coinName = getCoinName(coin)
        if not coinName then
            continue
        end
        
        farmStats.currentCoin = coinName
        
        -- Send pets to farm this coin
        if farmCoin(coinName, pets) then
            farmStats.coinsFarmed = farmStats.coinsFarmed + 1
        end
        
        -- Wait between farm requests
        safeWait(CONFIG.FARM_DELAY)
    end
    
    farmStats.currentCoin = nil
    isCurrentlyFarming = false
end

-- ========================
-- GUI CREATION
-- ========================

local function createGUI()
    -- Remove existing GUI
    if playerGui:FindFirstChild("PSXFarmGUI") then
        playerGui:FindFirstChild("PSXFarmGUI"):Destroy()
    end
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PSXFarmGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 320, 0, 240)
    mainFrame.Position = UDim2.new(0, 20, 0, 20)
    mainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = CONFIG.GUI_DRAGGABLE
    mainFrame.Parent = screenGui
    
    -- Frame styling
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = mainFrame
    
    local mainStroke = Instance.new("UIStroke")
    mainStroke.Color = Color3.fromRGB(100, 50, 200)
    mainStroke.Thickness = 2
    mainStroke.Parent = mainFrame
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 35)
    titleLabel.Position = UDim2.new(0, 0, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "🐾 PET SIMULATOR X FARM"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = mainFrame
    
    -- Toggle Button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0.85, 0, 0, 40)
    toggleButton.Position = UDim2.new(0.075, 0, 0, 45)
    toggleButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = "🔴 FARM: OFF"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextScaled = true
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Parent = mainFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleButton
    
    -- Status Label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(0.9, 0, 0, 25)
    statusLabel.Position = UDim2.new(0.05, 0, 0, 95)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Status: Ready to farm"
    statusLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.Parent = mainFrame
    
    -- Stats Frame
    local statsFrame = Instance.new("Frame")
    statsFrame.Size = UDim2.new(0.9, 0, 0, 80)
    statsFrame.Position = UDim2.new(0.05, 0, 0, 125)
    statsFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    statsFrame.BorderSizePixel = 0
    statsFrame.Parent = mainFrame
    
    local statsCorner = Instance.new("UICorner")
    statsCorner.CornerRadius = UDim.new(0, 8)
    statsCorner.Parent = statsFrame
    
    local statsStroke = Instance.new("UIStroke")
    statsStroke.Color = Color3.fromRGB(50, 50, 60)
    statsStroke.Thickness = 1
    statsStroke.Parent = statsFrame
    
    -- Stats Labels
    local coinsLabel = Instance.new("TextLabel")
    coinsLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
    coinsLabel.Position = UDim2.new(0.02, 0, 0, 0)
    coinsLabel.BackgroundTransparency = 1
    coinsLabel.Text = "Coins: 0"
    coinsLabel.TextColor3 = Color3.fromRGB(255, 215, 0)
    coinsLabel.TextScaled = true
    coinsLabel.Font = Enum.Font.Gotham
    coinsLabel.Parent = statsFrame
    
    local petsLabel = Instance.new("TextLabel")
    petsLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
    petsLabel.Position = UDim2.new(0.5, 0, 0, 0)
    petsLabel.BackgroundTransparency = 1
    petsLabel.Text = "Pets: 0"
    petsLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    petsLabel.TextScaled = true
    petsLabel.Font = Enum.Font.Gotham
    petsLabel.Parent = statsFrame
    
    local farmedLabel = Instance.new("TextLabel")
    farmedLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
    farmedLabel.Position = UDim2.new(0.02, 0, 0.5, 0)
    farmedLabel.BackgroundTransparency = 1
    farmedLabel.Text = "Farmed: 0"
    farmedLabel.TextColor3 = Color3.fromRGB(100, 200, 255)
    farmedLabel.TextScaled = true
    farmedLabel.Font = Enum.Font.Gotham
    farmedLabel.Parent = statsFrame
    
    local errorsLabel = Instance.new("TextLabel")
    errorsLabel.Size = UDim2.new(0.5, 0, 0.5, 0)
    errorsLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
    errorsLabel.BackgroundTransparency = 1
    errorsLabel.Text = "Errors: 0"
    errorsLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
    errorsLabel.TextScaled = true
    errorsLabel.Font = Enum.Font.Gotham
    errorsLabel.Parent = statsFrame
    
    -- Credit Label
    local creditLabel = Instance.new("TextLabel")
    creditLabel.Size = UDim2.new(1, 0, 0, 20)
    creditLabel.Position = UDim2.new(0, 0, 1, -25)
    creditLabel.BackgroundTransparency = 1
    creditLabel.Text = "PSX Auto Farm v1.0"
    creditLabel.TextColor3 = Color3.fromRGB(100, 100, 100)
    creditLabel.TextScaled = true
    creditLabel.Font = Enum.Font.Gotham
    creditLabel.Parent = mainFrame
    
    -- Store GUI elements
    gui = {
        screenGui = screenGui,
        mainFrame = mainFrame,
        toggleButton = toggleButton,
        statusLabel = statusLabel,
        coinsLabel = coinsLabel,
        petsLabel = petsLabel,
        farmedLabel = farmedLabel,
        errorsLabel = errorsLabel
    }
    
    return gui
end

-- ========================
-- GUI FUNCTIONALITY
-- ========================

-- Toggle auto farm
local function toggleAutoFarm()
    CONFIG.FARM_ENABLED = not CONFIG.FARM_ENABLED
    
    if CONFIG.FARM_ENABLED then
        -- Start farming
        gui.toggleButton.Text = "🟢 FARM: ON"
        gui.toggleButton.BackgroundColor3 = Color3.fromRGB(50, 220, 50)
        
        farmStats.startTime = tick()
        
        -- Start farming loop
        farmConnection = RunService.Heartbeat:Connect(function()
            if not isCurrentlyFarming then
                spawn(executeFarmCycle)
            end
        end)
        
        debugPrint("Auto farm started")
    else
        -- Stop farming
        gui.toggleButton.Text = "🔴 FARM: OFF"
        gui.toggleButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
        
        -- Stop farming loop
        if farmConnection then
            farmConnection:Disconnect()
            farmConnection = nil
        end
        
        isCurrentlyFarming = false
        debugPrint("Auto farm stopped")
    end
end

-- Update GUI display
local function updateGUI()
    if not gui.statusLabel then return end
    
    -- Update status
    if CONFIG.FARM_ENABLED then
        if isCurrentlyFarming then
            if farmStats.currentCoin then
                gui.statusLabel.Text = "Status: Farming " .. farmStats.currentCoin
            else
                gui.statusLabel.Text = "Status: Searching for coins..."
            end
            gui.statusLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
        else
            gui.statusLabel.Text = "Status: Active - Ready to farm"
            gui.statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
        end
    else
        gui.statusLabel.Text = "Status: Inactive"
        gui.statusLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    end
    
    -- Update stats
    gui.coinsLabel.Text = "Coins: " .. farmStats.coinsFound
    gui.petsLabel.Text = "Pets: " .. farmStats.petsFound
    gui.farmedLabel.Text = "Farmed: " .. farmStats.coinsFarmed
    gui.errorsLabel.Text = "Errors: " .. farmStats.errors
end

-- Add button hover effects
local function addHoverEffects()
    gui.toggleButton.MouseEnter:Connect(function()
        TweenService:Create(gui.toggleButton, TweenInfo.new(0.2), {
            Size = UDim2.new(0.9, 0, 0, 45)
        }):Play()
    end)
    
    gui.toggleButton.MouseLeave:Connect(function()
        TweenService:Create(gui.toggleButton, TweenInfo.new(0.2), {
            Size = UDim2.new(0.85, 0, 0, 40)
        }):Play()
    end)
end

-- ========================
-- INITIALIZATION
-- ========================

-- Create GUI and setup
createGUI()
addHoverEffects()

-- Connect toggle button
gui.toggleButton.MouseButton1Click:Connect(toggleAutoFarm)

-- GUI update loop
spawn(function()
    while gui.screenGui and gui.screenGui.Parent do
        updateGUI()
        wait(0.5)
    end
end)

-- Cleanup on player leaving
player.CharacterRemoving:Connect(function()
    if farmConnection then
        farmConnection:Disconnect()
    end
end)

-- ========================
-- INITIAL SETUP
-- ========================

-- Test the setup when script loads
spawn(function()
    wait(2)
    
    -- Test coin and pet detection
    local testCoins = findAllCoins()
    local testPets = findEquippedPets()
    
    print("🐾 Pet Simulator X Auto Farm Loaded!")
    print("📊 Initial scan results:")
    print("   - Found " .. #testCoins .. " coins")
    print("   - Found " .. #testPets .. " equipped pets")
    print("💡 Click the toggle button to start farming!")
    
    if #testCoins == 0 then
        print("⚠️  No coins found. Make sure you're in a world with coins!")
    end
    
    if #testPets == 0 then
        print("⚠️  No pets found. Make sure you have pets equipped!")
    end
    
    -- Test Network remote
    local networkRemote = getNetworkRemote()
    if networkRemote then
        print("✅ Network RemoteFunction found successfully")
    else
        print("❌ Network RemoteFunction not found - script may not work")
    end
end)
